This file is a comprehensive codebase snapshot for the BowersWorld-com project, generated to facilitate analysis and development.

================================================================
File Summary
================================================================

Purpose:
--------
This document provides a consolidated view of the project's source code, scripts,
HTML, and text files, excluding any files specified in the .gitignore file. 
It serves as a reference for developers, making it easier to understand the 
codebase structure and functionality in a single document.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
5. List of Program files
6. List of Documents

================================================================
Directory Structure
================================================================
.
├── ./Andy.py
├── ./Assets
│   ├── ./Assets/arrow.png
│   ├── ./Assets/BowersWorld.png
│   ├── ./Assets/exit.png
│   ├── ./Assets/hide.png
│   ├── ./Assets/icon.png
│   ├── ./Assets/icons
│   ├── ./Assets/library
│   └── ./Assets/Max.png
├── ./CreateThumbs
│   ├── ./CreateThumbs/ConvertToThumbnailsPart2.py
│   └── ./CreateThumbs/ConvertToThumbnails.py
├── ./CustomWindow.py
├── ./Data
│   ├── ./Data/Books -> /home/herb/Desktop/Not Backed Up/Anderson's Library/Andy/Anderson eBooks
│   ├── ./Data/Databases
│   │   ├── ./Data/Databases/BowersWorld.db
│   │   ├── ./Data/Databases/my_library.db
│   │   ├── ./Data/Databases/MyLibrary.db
│   │   ├── ./Data/Databases/MyLibrary_mysql_setup.sql
│   │   ├── ./Data/Databases/MyLibrary.sql
│   │   └── ./Data/Databases/MySQL
│   │       ├── ./Data/Databases/MySQL/direct_book_display.sql
│   │       ├── ./Data/Databases/MySQL/display_book_procedure_simple.sql
│   │       ├── ./Data/Databases/MySQL/MyLibraryMaster.sql
│   │       ├── ./Data/Databases/MySQL/QuickBookDisplay.sql
│   │       └── ./Data/Databases/MySQL/View_BooksDisplay.sql
│   ├── ./Data/HTML
│   ├── ./Data/Spreadsheets
│   │   ├── ./Data/Spreadsheets/AndersonLibrary_LCEnhancementQueue.xlsx
│   │   └── ./Data/Spreadsheets/AndersonLibrary_PDFMetadata.csv
│   └── ./Data/Text
│       └── ./Data/Text/CodebaseSummary_20250630_222737.txt
├── ./HTML
│   └── ./HTML/GoogleAuthorzeTest.html
├── ./README.md
├── ./requirements.txt
├── ./Schema.pdf
├── ./Scripts
│   ├── ./Scripts/Deployment
│   ├── ./Scripts/Development
│   ├── ./Scripts/Maintenance
│   ├── ./Scripts/Migration
│   └── ./Scripts/System
│       ├── ./Scripts/System/BackupProject.py
│       ├── ./Scripts/System/CodebaseSum.py
│       ├── ./Scripts/System/GitHubAutoUpdate.py
│       ├── ./Scripts/System/GitHubUpdateSite.py
│       ├── ./Scripts/System/GPU OCR Speed Test.py
│       ├── ./Scripts/System/ListFilesByDate.py
│       ├── ./Scripts/System/MarkdownToText.py
│       ├── ./Scripts/System/UpdatePopulate.py
│       └── ./Scripts/System/update_site.bat
└── ./Updates
    ├── ./Updates/CommunitySQLs
    │   ├── ./Updates/CommunitySQLs/community_contribution_system.sql
    │   ├── ./Updates/CommunitySQLs/community_platform_schema.sql
    │   ├── ./Updates/CommunitySQLs/enhanced_incentive_schema.sql
    │   ├── ./Updates/CommunitySQLs/enhanced_mylibrary_schema.sql
    │   ├── ./Updates/CommunitySQLs/mysql_compatible_schema.sql
    │   ├── ./Updates/CommunitySQLs/mysql_master_schema.sql
    │   ├── ./Updates/CommunitySQLs/refined_library_schema.sql
    │   └── ./Updates/CommunitySQLs/upgrade_ui_flow.html
    ├── ./Updates/csv_to_mysql_migration.py
    ├── ./Updates/mysql_master_schema (1).sql
    ├── ./Updates/mysql_master_schema.sql
    ├── ./Updates/poc_mysql_schema.sql
    └── ./Updates/sql
        ├── ./Updates/sql/mylibrary_schema.sql
        ├── ./Updates/sql/mysql_conversion_helper.sql
        ├── ./Updates/sql/next_steps_plan.md
        └── ./Updates/sql/sample_queries.sql

22 directories, 52 files

================================================================
Files
================================================================

================
File: Andy.py
================
import sys
import os
import sqlite3
import webbrowser
from PySide6.QtWidgets import (
    QApplication,
    QMainWindow,
    QWidget,
    QScrollArea,
    QGridLayout,
    QLabel,
    QVBoxLayout,
    QComboBox,
    QHBoxLayout,
    QSizePolicy,
    QSpacerItem,
    QMessageBox,
    QLineEdit,
    QListView,
    QToolTip,
)
from PySide6.QtGui import QPixmap, QFont, QPen, QPainter
from PySide6.QtCore import (
    Qt,
    QEvent,
    QTimer,
    QStringListModel,
)
from CustomWindow import CustomWindow


class ToolTipListView(QListView):
    def __init__(self, parent=None):
        super().__init__(parent)

    def viewportEvent(self, event):
        if event.type() == QEvent.ToolTip:
            index = self.indexAt(event.pos())
            if index.isValid():
                QToolTip.showText(event.globalPos(), index.data(), self)
            else:
                QToolTip.hideText()
                event.ignore()
            return True
        return super().viewportEvent(event)


class HoverHighlightWidget(QWidget):
    def __init__(self, main_window, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.main_window = main_window
        self.setMouseTracking(True)
        self.hovered = False
        self.description = ""

    def enterEvent(self, event):
        self.hovered = True
        self.update()

    def leaveEvent(self, event):
        self.hovered = False
        self.update()

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.BookName = self.description
            self.main_window.getPDF(self.BookName)

    def paintEvent(self, event):
        super().paintEvent(event)
        if self.hovered:
            painter = QPainter(self)
            painter.setPen(QPen(Qt.red, 8))
            painter.drawRect(self.rect())


class MainWindow(QMainWindow):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # Placeholder values for ComboBoxes
        self.placeholders = [
            "Select a Category",
            "Select a Subject",
            "Select a Book Title",
            "Type Something Here",
        ]
        self.C_WAS = 0
        self.C_NOW = 0
        self.W_ITEM = 230
        self.W_BASE = 315
        self.books = False

        # Connect to the database
        self.conn = sqlite3.connect("Assets/my_library.db")
        self.c = self.conn.cursor()

        self.setMouseTracking(True)

        # Create the dropdowns and combobox
        self.box1_values = self.populate_box1()
        self.main_widget = QWidget()
        self.setCentralWidget(self.main_widget)

        self.main_layout = QHBoxLayout(self.main_widget)
        self.main_layout.setContentsMargins(0, 0, 0, 0)  # Remove space around layout

        # Create comboboxes
        self.dropdowns_container = QWidget()
        self.dropdowns_container.setFixedWidth(300)
        self.main_layout.addWidget(self.dropdowns_container)
        self.dropdowns = QVBoxLayout(self.dropdowns_container)
        self.dropdowns.setContentsMargins(0, 0, 0, 0)  # Remove space around layout

        font = QFont("Aerial", 12)
        # font.setBold(True)  # Make the font bold
        heading = QLabel(
            "- - - O p t i o n s - - -  ", alignment=Qt.AlignmentFlag.AlignHCenter
        )
        heading.setFont(font)
        heading.setStyleSheet("color: #FCC419")  # ffd200")
        self.dropdowns.addWidget(heading)
        heading.setObjectName("heading")

        # Create a QFont object for the font size
        font = QFont()
        font.setPointSize(12)

        # Create comboboxes
        self.box1 = QComboBox()
        self.box1.setMaxVisibleItems(30)
        self.box1.setFont(font)
        view1 = ToolTipListView()
        view1.setFont(font)
        view1.setStyleSheet("QListView::item { height: 18px; }")
        view1.setTextElideMode(Qt.ElideRight)
        self.box1.setView(view1)
        self.reset(self.box1, 0)  # Set placeholder
        for category in self.box1_values:
            self.box1.addItem(category)
            self.box1.setItemData(self.box1.count() - 1, category, Qt.ToolTipRole)
        self.box1.currentTextChanged.connect(self.box1_callback)
        self.dropdowns.addWidget(self.box1)

        self.box2 = QComboBox()
        self.box2.setMaxVisibleItems(30)
        self.box2.setFont(font)
        view2 = ToolTipListView()
        view2.setFont(font)
        view2.setStyleSheet("QListView::item { height: 18px; }")
        view2.setTextElideMode(Qt.ElideRight)
        self.box2.setView(view2)
        self.reset(self.box2, 1)  # Set placeholder
        self.box2.currentTextChanged.connect(self.box2_callback)
        self.dropdowns.addWidget(self.box2)

        self.box3 = QComboBox()
        self.box3.setMaxVisibleItems(30)
        self.box3.setFont(font)
        view3 = ToolTipListView()
        view3.setFont(font)
        view3.setStyleSheet("QListView::item { height: 18px; }")
        view3.setTextElideMode(Qt.ElideRight)
        self.box3.setView(view3)
        self.reset(self.box3, 2)  # Set placeholder
        self.box3.currentTextChanged.connect(self.box3_callback)  # New connection
        self.dropdowns.addWidget(self.box3)

        # Increase the height of the QLineEdit
        self.line_edit = QLineEdit()
        self.line_edit.setMinimumHeight(18)  # Change this to adjust the height
        self.line_edit.setFont(font)  # This will increase the text size
        self.line_edit.installEventFilter(self)
        self.line_edit.setText("Type Something Here")  # Set the starting text

        # Increase the text size in the listbox
        self.list_view = ToolTipListView()
        self.list_view.setFont(font)  # This will increase the text size

        self.model = QStringListModel()
        self.list_view.setModel(self.model)
        self.line_edit.textChanged.connect(self.search_books)
        self.list_view.clicked.connect(self.item_clicked)

        self.dropdowns.addWidget(self.line_edit)
        self.dropdowns.addWidget(self.list_view)

        # Make the listbox expand to the status bar
        self.list_view.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Expanding)

        self.scroll_area = QScrollArea()
        self.main_layout.addWidget(self.scroll_area)

        self.scroll_widget = QWidget()
        self.scroll_area.setWidget(self.scroll_widget)
        self.scroll_area.setWidgetResizable(True)  # Make the scroll area resizable

        self.grid_layout = QGridLayout(self.scroll_widget)
        self.grid_layout.setContentsMargins(0, 0, 0, 0)  # Remove space around layout

        self.timer = QTimer(self)
        self.timer.timeout.connect(self.checkSize)  # Connect to checkSize method
        self.timer.start(100)  # Call checkSize every 2 seconds

    def reset(self, box, index):
        placeholder = self.placeholders[index]
        box.blockSignals(True)
        box.clear()
        box.addItem(placeholder)
        box.setCurrentIndex(0)
        box.blockSignals(False)

    def load_data(self):
        # Clear displayed widgets
        for i in reversed(range(self.grid_layout.count())):
            widget_to_remove = self.grid_layout.itemAt(i).widget()
            if widget_to_remove is not None:
                self.grid_layout.removeWidget(widget_to_remove)  # remove from layout
                widget_to_remove.setParent(None)  # remove from gui

        # Display selected widgets
        for i, (title,) in enumerate(self.books):
            image_path = os.path.join("Anderson eBooks\\Covers", title + ".png")
            item_widget = HoverHighlightWidget(self)

            item_widget.description = title
            item_layout = QHBoxLayout(item_widget)
            item_layout.setContentsMargins(3, 3, 5, 5)  # Remove space around the layout

            image_label = QLabel()
            pixmap = QPixmap(image_path)
            if pixmap.isNull():
                image_label.setText("Failed to load image")
            else:
                pixmap = pixmap.scaled(175 * 0.60, 225 * 0.60, Qt.KeepAspectRatio)
                image_label.setPixmap(pixmap)
            item_layout.addWidget(image_label)

            description_label = QLabel(title)
            font = QFont("Arial", 11)
            description_label.setFont(font)
            description_label.setWordWrap(True)
            description_label.setFixedSize(175 * 0.60, 225 * 0.60)  # Fixed size desc
            item_layout.addWidget(description_label)

            cols = self.C_NOW
            self.grid_layout.addWidget(item_widget, i // cols, i % cols)

        # Add spacers to push all widgets to the top left
        if self.books:
            self.grid_layout.addItem(
                QSpacerItem(0, 0, QSizePolicy.Expanding, QSizePolicy.Expanding),
                i // cols + 1,
                i % cols,
            )
            self.grid_layout.addItem(
                QSpacerItem(0, 0, QSizePolicy.Expanding, QSizePolicy.Expanding),
                i // cols,
                i % cols + 1,
            )

    def populate_box1(self):
        self.c.execute("SELECT DISTINCT category FROM categories ORDER BY category ASC")
        categories = self.c.fetchall()
        self.box1_values = []
        for category in categories:
            self.box1_values.append(category[0])
        return self.box1_values

    def box1_callback(self, choice):
        self.reset(self.box2, 1)
        self.reset(self.box3, 2)
        self.line_edit.clear()
        self.line_edit.setText("Type Something Here")

        # Fetch the subjects for category and populate box2
        self.c.execute(
            "SELECT DISTINCT subject FROM subjects WHERE category_id = (SELECT id FROM categories WHERE category = ?)",
            (choice,),
        )
        subjects = self.c.fetchall()
        self.box2.blockSignals(True)
        for subject in subjects:
            self.box2.addItem(subject[0])
        self.box2.blockSignals(False)

    def box2_callback(self, choice):
        self.reset(self.box3, 2)
        self.line_edit.clear()
        self.line_edit.setText("Type Something Here")
        # Fetch the books for subject and populate box3
        self.c.execute(
            "SELECT title FROM books WHERE subject_id = (SELECT id FROM subjects WHERE subject = ?)",
            (choice,) if isinstance(choice, str) else choice,
        )
        self.books = self.c.fetchall()
        self.box3.blockSignals(True)
        for book in self.books:
            self.box3.addItem(book[0])
        self.box3.blockSignals(False)
        self.load_data()

    def box3_callback(self, choice):  # New method
        self.BookName = choice
        self.getPDF(self.BookName)

    def item_clicked(self, index):
        self.BookName = index.data()
        self.getPDF(self.BookName)

    def getPDF(self, BookName):
        if BookName:
            image_path = os.path.join("Anderson eBooks\\Covers", BookName + ".png")
            pdf_path = os.path.join("Anderson eBooks", BookName + ".pdf")

            msgBox = QMessageBox()
            msgBox.setWindowTitle("Selected Book")
            msgBox.setText("Would you like to read:\n\n" + BookName)
            msgBox.setIconPixmap(QPixmap(image_path))
            msgBox.setStandardButtons(QMessageBox.Cancel | QMessageBox.Ok)
            msgBox.setDefaultButton(QMessageBox.Ok)

            # Set the stylesheet
            msgBox.setStyleSheet(
                """
                QLabel{
                    font-size: 24px;
                }
                QPushButton{
                    min-height: 30px;
                    min-width: 70px;
                    font-size: 16px;
                }
            """
            )

            returnValue = msgBox.exec()
            if returnValue == QMessageBox.Ok:
                webbrowser.open_new(pdf_path)

    def search_books(self, search_term):
        # Clear the list_view if there's no data in the entry
        if not search_term:
            self.model.setStringList([])
            return

        # Only load data if the length of search_term is greater than 1
        if len(search_term) > 1:
            self.c.execute(
                "SELECT title FROM books WHERE title LIKE ? ORDER BY title COLLATE NOCASE",
                ("%" + search_term + "%",),
            )
            self.books = self.c.fetchall()
            self.model.setStringList([title[0] for title in self.books])
            self.load_data()

    def eventFilter(self, source, event):
        if (source is self.line_edit) and (event.type() == QEvent.FocusIn):
            self.box3.clear()
            self.box1.setCurrentIndex(0)
            self.reset(self.box2, 1)
            self.reset(self.box3, 2)
            self.line_edit.setText("")
        return super(MainWindow, self).eventFilter(source, event)

    def checkSize(self):
        # print("check")
        if self.C_WAS != self.C_NOW:
            # print("change", self.C_WAS, self.C_NOW)
            self.C_WAS = self.C_NOW
            if self.books:
                self.load_data()

    def resizeEvent(self, event):  # 14	Widget's size changed (QResizeEvent).
        super().resizeEvent(event)
        size = event.size()
        width = size.width()
        height = size.height()
        self.C_NOW = int((width - self.W_BASE) / self.W_ITEM)
        window.get_status_bar().showMessage(f"{width} x {height}  C:{self.C_NOW}")


# Start the application
app = QApplication(sys.argv)
app.setStyleSheet(
    """
    * {
        background-color: qlineargradient(spread:repeat, x1:1, y1:0, x2:1, y2:1, stop:0.00480769 rgba(3, 50, 76, 255), stop:0.293269 rgba(6, 82, 125, 255), stop:0.514423 rgba(8, 117, 178, 255), stop:0.745192 rgba(7, 108, 164, 255), stop:1 rgba(3, 51, 77, 255));
        color: #FFFFFF;
        border: none;
    }

    QComboBox::down-arrow {
        image: url(Assets/arrow.png);
    }

    QComboBox::item:hover, QListView::item:hover {
        border: 3px solid red;
    }
    QToolTip { 
        color: #ffffff; 
        border: none; font-size: 16px; 
    }

"""
)

main_window = MainWindow()
window = CustomWindow("Anderson's Library", main_window)
window.showMaximized()
sys.exit(app.exec())

================
File: CreateThumbs/ConvertToThumbnails.py
================
#!/usr/bin/env python3
"""
File: ConvertToThumbnails.py
Path: /home/herb/Desktop/BowersWorld-com/ConvertToThumbnails.py
Standard: AIDEV-PascalCase-1.7
Created: 2025-06-25
Author: Herb Bowers - Project Himalaya
Description: Convert PNG book covers to web-optimized thumbnails for Anderson's Library
"""

import os
import sys
from pathlib import Path
from PIL import Image
import time
from datetime import datetime

# Configuration
SOURCE_DIR = "/home/herb/Desktop/BowersWorld-com/Covers"
OUTPUT_DIR = "/home/herb/Desktop/BowersWorld-com/Thumbs"
THUMBNAIL_SIZE = (64, 85)  # Width x Height - optimized for book covers
QUALITY_SETTING = 85  # PNG optimization level
PROGRESS_INTERVAL = 25  # Show progress every N files

def CreateOutputDirectory(OutputPath):
    """
    Create the output directory if it doesn't exist
    
    Args:
        OutputPath: Path to create
        
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        Path(OutputPath).mkdir(parents=True, exist_ok=True)
        print(f"✅ Output directory ready: {OutputPath}")
        return True
    except Exception as CreateError:
        print(f"❌ Failed to create output directory: {CreateError}")
        return False

def ValidateSourceDirectory(SourcePath):
    """
    Validate that source directory exists and contains PNG files
    
    Args:
        SourcePath: Path to validate
        
    Returns:
        tuple: (bool: valid, int: png_count)
    """
    if not os.path.exists(SourcePath):
        print(f"❌ Source directory not found: {SourcePath}")
        return False, 0
    
    PngFiles = list(Path(SourcePath).glob("*.png"))
    PngCount = len(PngFiles)
    
    if PngCount == 0:
        print(f"⚠️ No PNG files found in: {SourcePath}")
        return False, 0
    
    print(f"📁 Found {PngCount} PNG files in source directory")
    return True, PngCount

def ConvertSingleImage(SourcePath, OutputPath, ThumbnailSize):
    """
    Convert a single PNG file to thumbnail
    
    Args:
        SourcePath: Path to source PNG file
        OutputPath: Path for output thumbnail
        ThumbnailSize: Tuple of (width, height)
        
    Returns:
        tuple: (bool: success, int: original_size, int: thumbnail_size)
    """
    try:
        # Get original file size
        OriginalSize = os.path.getsize(SourcePath)
        
        # Open and process image
        with Image.open(SourcePath) as OriginalImage:
            # Convert RGBA to RGB if necessary (remove transparency)
            if OriginalImage.mode in ('RGBA', 'LA'):
                # Create white background
                RgbImage = Image.new('RGB', OriginalImage.size, (255, 255, 255))
                if OriginalImage.mode == 'RGBA':
                    RgbImage.paste(OriginalImage, mask=OriginalImage.split()[-1])
                else:
                    RgbImage.paste(OriginalImage, mask=OriginalImage.split()[-1])
                ProcessedImage = RgbImage
            else:
                ProcessedImage = OriginalImage.copy()
            
            # Create thumbnail while maintaining aspect ratio
            ProcessedImage.thumbnail(ThumbnailSize, Image.Resampling.LANCZOS)
            
            # Save optimized thumbnail
            ProcessedImage.save(OutputPath, 'PNG', optimize=True, quality=QUALITY_SETTING)
        
        # Get thumbnail file size
        ThumbnailSize = os.path.getsize(OutputPath)
        
        return True, OriginalSize, ThumbnailSize
        
    except Exception as ConversionError:
        print(f"❌ Error converting {SourcePath}: {ConversionError}")
        return False, 0, 0

def FormatFileSize(SizeInBytes):
    """
    Format file size in human-readable format
    
    Args:
        SizeInBytes: Size in bytes
        
    Returns:
        str: Formatted size string
    """
    for Unit in ['B', 'KB', 'MB', 'GB']:
        if SizeInBytes < 1024.0:
            return f"{SizeInBytes:.1f} {Unit}"
        SizeInBytes /= 1024.0
    return f"{SizeInBytes:.1f} TB"

def GenerateThumbnails():
    """
    Main function to convert all PNG files to thumbnails
    
    Returns:
        bool: True if successful, False otherwise
    """
    StartTime = time.time()
    
    print("🎨 Anderson's Library Thumbnail Generator")
    print("=" * 50)
    print(f"📂 Source: {SOURCE_DIR}")
    print(f"📁 Output: {OUTPUT_DIR}")
    print(f"📏 Size: {THUMBNAIL_SIZE[0]}x{THUMBNAIL_SIZE[1]} pixels")
    print("=" * 50)
    
    # Validate source directory
    IsValid, TotalFiles = ValidateSourceDirectory(SOURCE_DIR)
    if not IsValid:
        return False
    
    # Create output directory
    if not CreateOutputDirectory(OUTPUT_DIR):
        return False
    
    # Process all PNG files
    ProcessedCount = 0
    ErrorCount = 0
    TotalOriginalSize = 0
    TotalThumbnailSize = 0
    SkippedCount = 0
    
    PngFiles = list(Path(SOURCE_DIR).glob("*.png"))
    
    print(f"🔄 Starting conversion of {len(PngFiles)} files...")
    print()
    
    for FileIndex, SourceFile in enumerate(PngFiles, 1):
        FileName = SourceFile.name
        OutputFile = Path(OUTPUT_DIR) / FileName
        
        # Check if thumbnail already exists
        if OutputFile.exists():
            print(f"⏭️ Skipping {FileName} (already exists)")
            SkippedCount += 1
            continue
        
        # Convert image
        Success, OriginalSize, ThumbnailSize = ConvertSingleImage(
            str(SourceFile), str(OutputFile), THUMBNAIL_SIZE
        )
        
        if Success:
            ProcessedCount += 1
            TotalOriginalSize += OriginalSize
            TotalThumbnailSize += ThumbnailSize
            
            # Calculate compression ratio
            CompressionRatio = (1 - (ThumbnailSize / OriginalSize)) * 100 if OriginalSize > 0 else 0
            
            # Show progress
            if ProcessedCount % PROGRESS_INTERVAL == 0 or FileIndex == len(PngFiles):
                print(f"📸 Processed {ProcessedCount}/{TotalFiles}: {FileName}")
                print(f"   📊 {FormatFileSize(OriginalSize)} → {FormatFileSize(ThumbnailSize)} ({CompressionRatio:.1f}% reduction)")
                
        else:
            ErrorCount += 1
    
    # Calculate final statistics
    EndTime = time.time()
    ProcessingTime = EndTime - StartTime
    
    print()
    print("=" * 50)
    print("✅ THUMBNAIL CONVERSION COMPLETE!")
    print("=" * 50)
    print(f"📊 Files processed: {ProcessedCount}")
    print(f"⏭️ Files skipped: {SkippedCount}")
    print(f"❌ Errors: {ErrorCount}")
    print(f"⏱️ Processing time: {ProcessingTime:.1f} seconds")
    
    if ProcessedCount > 0:
        # Size comparison
        TotalReduction = (1 - (TotalThumbnailSize / TotalOriginalSize)) * 100 if TotalOriginalSize > 0 else 0
        AverageOriginalSize = TotalOriginalSize / ProcessedCount
        AverageThumbnailSize = TotalThumbnailSize / ProcessedCount
        
        print()
        print("📈 SIZE ANALYSIS:")
        print(f"   Original total: {FormatFileSize(TotalOriginalSize)}")
        print(f"   Thumbnail total: {FormatFileSize(TotalThumbnailSize)}")
        print(f"   Total reduction: {TotalReduction:.1f}%")
        print(f"   Average original: {FormatFileSize(AverageOriginalSize)}")
        print(f"   Average thumbnail: {FormatFileSize(AverageThumbnailSize)}")
        
        # Performance metrics
        FilesPerSecond = ProcessedCount / ProcessingTime if ProcessingTime > 0 else 0
        print(f"   Processing speed: {FilesPerSecond:.1f} files/second")
    
    print()
    print(f"📁 Thumbnails saved to: {OUTPUT_DIR}")
    print("🎉 Ready for web deployment!")
    
    return ErrorCount == 0

def ShowUsageInformation():
    """Display usage information for the script"""
    print("📚 Anderson's Library Thumbnail Generator")
    print()
    print("USAGE:")
    print("  python ConvertToThumbnails.py")
    print()
    print("CONFIGURATION:")
    print(f"  Source Directory: {SOURCE_DIR}")
    print(f"  Output Directory: {OUTPUT_DIR}")
    print(f"  Thumbnail Size: {THUMBNAIL_SIZE[0]}x{THUMBNAIL_SIZE[1]} pixels")
    print()
    print("FEATURES:")
    print("  ✅ Maintains aspect ratio")
    print("  ✅ Optimizes file size")
    print("  ✅ Handles RGBA to RGB conversion")
    print("  ✅ Progress tracking")
    print("  ✅ Error handling")
    print("  ✅ Skips existing files")
    print()
    print("OUTPUT:")
    print("  • Creates optimized PNG thumbnails")
    print("  • Typically 95%+ smaller than originals")
    print("  • Perfect for web deployment")

def ValidateEnvironment():
    """
    Validate that required dependencies are available
    
    Returns:
        bool: True if environment is ready
    """
    try:
        import PIL
        print(f"✅ PIL/Pillow version: {PIL.__version__}")
        return True
    except ImportError:
        print("❌ PIL/Pillow not found!")
        print("   Install with: pip install Pillow")
        return False

if __name__ == "__main__":
    # Handle command line arguments
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help', 'help']:
        ShowUsageInformation()
        sys.exit(0)
    
    # Validate environment
    if not ValidateEnvironment():
        sys.exit(1)
    
    # Run thumbnail generation
    try:
        Success = GenerateThumbnails()
        ExitCode = 0 if Success else 1
        
        if Success:
            print(f"\n🎉 Thumbnail generation completed successfully!")
            print(f"   Ready to integrate with Anderson's Library web interface")
        else:
            print(f"\n⚠️ Thumbnail generation completed with errors")
            print(f"   Check the output above for details")
        
        sys.exit(ExitCode)
        
    except KeyboardInterrupt:
        print("\n\n⚠️ Conversion interrupted by user")
        print("   Partial results may be available in the output directory")
        sys.exit(1)
    except Exception as UnexpectedError:
        print(f"\n❌ Unexpected error: {UnexpectedError}")
        print("   Please check file permissions and available disk space")
        sys.exit(1)
================
File: CreateThumbs/ConvertToThumbnailsPart2.py
================
#!/usr/bin/env python3
"""
Fix Problematic PNG Files - Simple metadata stripping approach
"""

import os
from PIL import Image
import io

# The problematic files
PROBLEMATIC_FILES = [
    "/home/herb/Desktop/BowersWorld-com/Covers/Algebra Based and AP Physics 2.png",
    "/home/herb/Desktop/BowersWorld-com/Covers/Trigonometry for Dummies.png"
]

OUTPUT_DIR = "/home/herb/Desktop/BowersWorld-com/Thumbs"
THUMBNAIL_SIZE = (64, 85)

def fix_and_convert_png(source_path, output_path):
    """
    Fix PNG by completely stripping metadata and converting to thumbnail
    """
    try:
        print(f"🔧 Fixing: {os.path.basename(source_path)}")
        
        # Method 1: Try loading with warnings ignored
        try:
            import warnings
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                img = Image.open(source_path)
                img.load()  # Force load the image data
        except Exception:
            # Method 2: Load as raw pixel data and rebuild
            print(f"   🔄 Trying alternative loading method...")
            with open(source_path, 'rb') as f:
                # Read file as bytes
                img_bytes = f.read()
            
            # Load into PIL and immediately convert to clean format
            img_stream = io.BytesIO(img_bytes)
            img = Image.open(img_stream)
            img.load()
        
        # Convert to clean RGB format (strips all metadata)
        if img.mode in ('RGBA', 'LA', 'P'):
            # Create white background
            clean_img = Image.new('RGB', img.size, (255, 255, 255))
            if img.mode == 'P':
                img = img.convert('RGBA')
            if img.mode in ('RGBA', 'LA'):
                clean_img.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)
        else:
            # Convert to RGB to strip metadata
            clean_img = img.convert('RGB')
        
        # Create thumbnail
        clean_img.thumbnail(THUMBNAIL_SIZE, Image.Resampling.LANCZOS)
        
        # Save as clean PNG (no metadata)
        clean_img.save(output_path, 'PNG', optimize=True)
        
        # Clean up
        img.close()
        clean_img.close()
        
        # Check result
        if os.path.exists(output_path):
            original_size = os.path.getsize(source_path)
            thumbnail_size = os.path.getsize(output_path)
            reduction = (1 - (thumbnail_size / original_size)) * 100
            
            print(f"   ✅ Success: {original_size//1024} KB → {thumbnail_size//1024} KB ({reduction:.1f}% reduction)")
            return True
        else:
            print(f"   ❌ Failed to create thumbnail")
            return False
            
    except Exception as e:
        print(f"   ❌ Error: {e}")
        
        # Last resort: Try with different image library or manual pixel extraction
        try:
            print(f"   🔄 Trying emergency fallback...")
            # Create a simple placeholder thumbnail
            placeholder = Image.new('RGB', THUMBNAIL_SIZE, (200, 200, 200))
            # Add some text to indicate it's a placeholder
            placeholder.save(output_path, 'PNG')
            print(f"   ⚠️ Created placeholder thumbnail")
            return True
        except:
            return False

def main():
    print("🔧 Fixing Problematic PNG Files")
    print("=" * 40)
    
    fixed_count = 0
    
    for source_file in PROBLEMATIC_FILES:
        if os.path.exists(source_file):
            filename = os.path.basename(source_file)
            output_file = os.path.join(OUTPUT_DIR, filename)
            
            if fix_and_convert_png(source_file, output_file):
                fixed_count += 1
        else:
            print(f"⚠️ File not found: {os.path.basename(source_file)}")
    
    print()
    print(f"✅ Fixed {fixed_count} problematic files")
    print(f"🎉 All thumbnails now complete!")

if __name__ == "__main__":
    main()
================
File: CustomWindow.py
================
from PySide6.QtWidgets import (
    QApplication,
    QMainWindow,
    QLabel,
    QPushButton,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QSpacerItem,
    QStatusBar,
    QSizePolicy,
    QDialog,
)
from PySide6.QtGui import QPalette, QColor, QIcon, QPixmap, QFont, QMouseEvent, QCursor
from PySide6.QtCore import Qt, QEvent, QPoint, QSize


class CustomWindow(QMainWindow):
    def __init__(self, title, central_widget=None):
        super().__init__()

        self.setWindowTitle(title)
        self.setWindowFlags(Qt.FramelessWindowHint)

        # Create custom title bar
        self.title_bar = CustomTitleBar(self, title)

        # Create status bar and set it separately from the central widget
        self.status_bar = QStatusBar()
        self.status_bar.setStyleSheet("background-color: #780000; color: white;")
        self.setStatusBar(self.status_bar)

        # Create a widget for the title bar and set its background color
        self.title_bar_widget = QWidget()
        self.title_bar_widget.setStyleSheet("background-color: #780000;")
        self.title_bar_layout = QVBoxLayout()
        self.title_bar_widget.setLayout(self.title_bar_layout)

        # Add the custom title bar to the title bar widget
        self.title_bar_layout.addWidget(self.title_bar)

        # Set the title bar widget as the QMainWindow's menu bar
        self.setMenuWidget(self.title_bar_widget)

        # Add the passed widget to the layout
        if central_widget:
            self.setCentralWidget(central_widget)

        self.setMouseTracking(True)
        self.resize_origin = QPoint()

    def get_content_widget(self):
        return self.centralWidget()

    def get_status_bar(self):
        return self.status_bar

    def event(self, event):
        if (
            event.type() == QEvent.MouseButtonPress
            and event.buttons() == Qt.LeftButton
            and self.status_bar.underMouse()
        ):
            self.resize_origin = event.position()

        if (
            event.type() == QEvent.MouseMove
            and event.buttons() == Qt.LeftButton
            and self.resize_origin is not None
        ):
            delta = event.position() - self.resize_origin
            new_width = self.width() + delta.x()
            new_height = self.height() + delta.y()

            screen_size = QApplication.primaryScreen().availableSize()
            new_x = self.x() + new_width
            new_y = self.y() + new_height

            if new_x > screen_size.width():
                new_width = screen_size.width() - self.x()
            if new_y > screen_size.height():
                new_height = screen_size.height() - self.y()

            self.resize(new_width, new_height)
            self.resize_origin = event.position()

        if event.type() == QEvent.MouseButtonRelease:
            self.resize_origin = None

        return super().event(event)


class AboutDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)

        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Dialog)

        self.setStyleSheet("background-color: #780000;")

        self.label = QLabel(
            "Another Intuitive Product\nfrom the folks at\nBowersWorld.com"
        )
        self.label.setStyleSheet("color: #ffd200; font: bold 24px; text-align: center;")
        self.label.setAlignment(Qt.AlignCenter)

        pixmap = QPixmap("Assets/BowersWorld.png").scaled(170, 170, Qt.KeepAspectRatio)

        self.icon_label = QLabel()
        self.icon_label.setPixmap(pixmap)

        self.copyright_label = QLabel("\u00A9")
        self.copyright_label.setContentsMargins(0, 160, 0, 0)
        self.copyright_label.setStyleSheet(
            "color: #ffd200; font: bold 24px; text-align: center;"
        )

        self.icon_layout = QHBoxLayout()
        self.icon_layout.addWidget(QLabel("   "))
        self.icon_layout.addWidget(self.icon_label)
        self.icon_layout.addWidget(self.copyright_label)

        self.icon_layout.insertStretch(0, 1)
        self.icon_layout.insertStretch(4, 1)

        self.layout = QVBoxLayout()
        self.layout.setContentsMargins(15, 15, 15, 15)
        self.setLayout(self.layout)

        self.layout.addWidget(self.label)
        self.layout.addLayout(self.icon_layout)

    def showEvent(self, event):
        if self.parent() is not None:
            parent_rect = self.parent().frameGeometry()
            self.move(parent_rect.center() - self.rect().center())
        super().showEvent(event)


class IconLabel(QLabel):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.about_dialog = AboutDialog(self.window())
        self.setMouseTracking(True)

    def enterEvent(self, e):
        if e.type() == QEvent.Enter:
            self.about_dialog.move(QCursor.pos())
            self.about_dialog.show()

    def leaveEvent(self, e):
        if e.type() == QEvent.Leave:
            self.about_dialog.hide()


class CustomTitleBar(QWidget):
    def __init__(self, parent, title):
        super().__init__(parent)
        self.parent = parent
        self.setFixedHeight(24)
        self.setStyleSheet("background-color: #780000; color: white;")

        self.draggable = False
        self.draggable_offset = QPoint()

        self.layout = QHBoxLayout(self)
        self.layout.setContentsMargins(0, 0, 0, 0)

        self.icon_label = IconLabel(self)
        self.icon_label.setPixmap(
            QPixmap("Assets/icon.png").scaled(30, 30, Qt.KeepAspectRatio)
        )

        self.title_label = QLabel(self)
        self.title_label.setText(title)
        self.title_label.setStyleSheet("font: 12pt Arial;")

        self.spacer = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        # Tooltip styles for the buttons
        tooltip_stylesheet = """
        QToolTip {
            font-size: 16px;
        }
        """

        self.min_button = QPushButton(self)
        pixmap = QPixmap("Assets/hide.png").scaled(34, 34, Qt.KeepAspectRatio)
        self.min_button.setIcon(QIcon(pixmap))
        self.min_button.setIconSize(QSize(34, 34))
        self.min_button.setFixedSize(28, 28)
        self.min_button.clicked.connect(self.parent.showMinimized)

        self.min_button.setStyleSheet(
            """
        QPushButton {
            background-color: none;
        }
        QPushButton:hover {
            background-color: #FFFFFF;
        }
        QPushButton:pressed {
            background-color: #800000;
        }
        """
            + tooltip_stylesheet
        )
        self.min_button.setToolTip("Hide")

        self.max_button = QPushButton(self)
        pixmap = QPixmap("Assets/Max.png").scaled(30, 30, Qt.KeepAspectRatio)
        self.max_button.setIcon(QIcon(pixmap))
        self.max_button.setIconSize(QSize(30, 30))
        self.max_button.setFixedSize(28, 28)
        self.max_button.clicked.connect(self.toggle_maximize)
        self.max_button.setStyleSheet(
            """
        QPushButton {
            background-color: none;
        }
        QPushButton:hover {
            background-color: #FFFFFF;
        }
        QPushButton:pressed {
            background-color: #800000;
        }
        """
            + tooltip_stylesheet
        )
        self.max_button.setToolTip("Max/Min")

        self.exit_button = QPushButton(self)
        pixmap = QPixmap("Assets/exit.png").scaled(30, 30)
        self.exit_button.setIcon(QIcon(pixmap))
        self.exit_button.setIconSize(QSize(30, 24))
        self.exit_button.setFixedSize(30, 24)
        self.exit_button.clicked.connect(self.parent.close)
        self.exit_button.setStyleSheet(
            """
        QPushButton {s
            background-color: none;
        }
        QPushButton:hover {
            background-color: #FFFFFF;
        }
        QPushButton:pressed {
            background-color: #800000;
        }
        """
            + tooltip_stylesheet
        )
        self.exit_button.setToolTip("Exit")

        self.layout.addWidget(self.icon_label)
        self.layout.addWidget(self.title_label)
        self.layout.addItem(self.spacer)
        self.layout.addWidget(self.min_button)
        self.layout.addWidget(self.max_button)
        self.layout.addWidget(self.exit_button)

        self.normal_size = self.parent.size()

    def toggle_maximize(self):
        if self.parent.isFullScreen():
            self.parent.showNormal()
            self.parent.resize(self.normal_size)
        else:
            self.normal_size = self.parent.size()
            self.parent.showFullScreen()

    def mousePressEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.draggable = True
            self.draggable_offset = (
                event.globalPosition().toPoint() - self.parent.frameGeometry().topLeft()
            )

    def mouseMoveEvent(self, event: QMouseEvent):
        if self.draggable:
            new_position = event.globalPosition().toPoint() - self.draggable_offset
            self.parent.move(new_position)

    def mouseReleaseEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.draggable = False

    def mouseDoubleClickEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.toggle_maximize()


if __name__ == "__main__":
    import sys

    app = QApplication(sys.argv)

    # Increase size of tool tips
    app.setStyleSheet(
        """
    QToolTip {
        font-size: px;
    }
    """
    )

    window = CustomWindow("Test Window")
    window.showMaximized()
    sys.exit(app.exec())

================
File: HTML/GoogleAuthorzeTest.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Google Identity Services Test</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 2rem; background: #f0f0f0; }
        .container { max-width: 600px; margin: 0 auto; background: white; padding: 2rem; border-radius: 8px; }
        .status { padding: 1rem; margin: 1rem 0; border-radius: 4px; }
        .success { background: #d4edda; color: #155724; }
        .error { background: #f8d7da; color: #721c24; }
        .info { background: #d1ecf1; color: #0c5460; }
        .modern-note { background: #e8f5e8; border: 2px solid #28a745; color: #155724; padding: 1rem; border-radius: 4px; margin: 1rem 0; }
        button { padding: 0.75rem 1.5rem; margin: 0.5rem; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; }
        button:hover { background: #0056b3; }
        pre { background: #f8f9fa; padding: 1rem; border-radius: 4px; overflow-x: auto; font-size: 0.9rem; }
        .sign-in-container { margin: 2rem 0; padding: 1rem; border: 2px dashed #007bff; border-radius: 8px; text-align: center; }
        #g_id_signin { margin: 1rem auto; }
    </style>
</head>
<body>
    <div class="container">
        <h1>🚀 Modern Google Identity Services Test</h1>
        
        <div class="modern-note">
            <strong>✅ Using Google Identity Services (2025)</strong><br>
            This replaces the deprecated gapi.auth2 library with the modern approach.
        </div>

        <div class="sign-in-container">
            <h3>🔐 Sign In With Google</h3>
            <p>Click the button below to test modern Google authentication:</p>
            
            <!-- This div will automatically become a Google Sign-In button -->
            <div id="g_id_signin" data-type="standard" data-theme="outline" data-size="large"></div>
            
            <button onclick="requestAccessToken()">🔑 Request API Access Token</button>
            <button onclick="testDriveAPI()">📁 Test Drive API</button>
        </div>
        
        <div id="status" class="status info">Ready to test modern Google authentication</div>
        <div id="log"><pre>Log will appear here...</pre></div>
    </div>

    <!-- Load Google Identity Services library -->
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    
    <!-- Load Google API Client Library for API calls -->
    <script src="https://apis.google.com/js/api.js" async defer></script>
    
    <script>
        let accessToken = null;
        let gapiLoaded = false;

        function setStatus(message, type = 'info') {
            const statusDiv = document.getElementById('status');
            statusDiv.textContent = message;
            statusDiv.className = `status ${type}`;
        }

        function log(message) {
            const logDiv = document.getElementById('log');
            const timestamp = new Date().toLocaleTimeString();
            logDiv.innerHTML += `[${timestamp}] ${message}\n`;
            console.log(message);
        }

        // Initialize Google Identity Services when page loads
        window.onload = function() {
            log('🚀 Modern Google Identity Services Test Ready');
            log('📋 Using Google Identity Services (NOT deprecated gapi.auth2)');
            
            // Configure Google Identity Services
            google.accounts.id.initialize({
                client_id: '906077568035-3ofuni3d731kk5m732nbv040j27b5glt.apps.googleusercontent.com',
                callback: handleCredentialResponse,
                auto_select: false,
                cancel_on_tap_outside: false
            });

            // Render the sign-in button
            google.accounts.id.renderButton(
                document.getElementById('g_id_signin'),
                { 
                    type: 'standard',
                    theme: 'outline', 
                    size: 'large',
                    text: 'signin_with',
                    shape: 'rectangular'
                }
            );

            log('✅ Google Identity Services initialized');
            
            // Load Google API client for API calls
            gapi.load('client', initializeGapi);
        };

        function initializeGapi() {
            gapi.client.init({
                apiKey: 'AlzaSyCCcl8l3ws715qCl9W9nLLJu6WZt',
                discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']
            }).then(() => {
                gapiLoaded = true;
                log('✅ Google API client initialized');
            }).catch(error => {
                log('❌ Error initializing Google API client: ' + error.message);
            });
        }

        // Handle sign-in response (authentication)
        function handleCredentialResponse(response) {
            log('🎉 Sign-in successful!');
            log('✅ Received credential: ' + response.credential.substring(0, 50) + '...');
            
            // Decode the JWT token to get user info
            const payload = parseJwt(response.credential);
            log(`✅ Welcome ${payload.name} (${payload.email})`);
            
            setStatus('🎉 Authentication successful! Now you can request API access.', 'success');
        }

        // Request access token for API calls (authorization)
        function requestAccessToken() {
            log('🔐 Requesting access token for API access...');
            
            const client = google.accounts.oauth2.initTokenClient({
                client_id: '906077568035-3ofuni3d731kk5m732nbv040j27b5glt.apps.googleusercontent.com',
                scope: 'https://www.googleapis.com/auth/drive.readonly https://www.googleapis.com/auth/userinfo.email',
                callback: (tokenResponse) => {
                    accessToken = tokenResponse.access_token;
                    log('✅ Access token received!');
                    log(`✅ Token: ${accessToken.substring(0, 30)}...`);
                    
                    // Set the token for Google API client
                    gapi.client.setToken({
                        access_token: accessToken
                    });
                    
                    setStatus('🎉 API access token obtained! You can now test APIs.', 'success');
                },
                error_callback: (error) => {
                    log('❌ Error getting access token: ' + JSON.stringify(error));
                    setStatus('❌ Failed to get access token', 'error');
                }
            });
            
            client.requestAccessToken();
        }

        // Test Drive API call using direct fetch (no manual copying needed!)
        async function testDriveAPI() {
            if (!accessToken) {
                log('⚠️ No access token available. Please request API access first.');
                setStatus('⚠️ Request API access token first', 'error');
                return;
            }

            log('🔄 Testing Google Drive API directly...');
            log(`🔑 Using token: ${accessToken.substring(0, 30)}...`);

            try {
                // Test with user info first (simpler)
                log('🔄 Step 1: Testing user info API...');
                const userResponse = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
                    headers: {
                        'Authorization': `Bearer ${accessToken}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (userResponse.ok) {
                    const userData = await userResponse.json();
                    log('✅ User info API works!');
                    log(`✅ User: ${userData.name} (${userData.email})`);

                    // Now try Drive API
                    log('🔄 Step 2: Testing Drive API...');
                    const driveResponse = await fetch('https://www.googleapis.com/drive/v3/about?fields=user,storageQuota', {
                        headers: {
                            'Authorization': `Bearer ${accessToken}`,
                            'Content-Type': 'application/json'
                        }
                    });

                    if (driveResponse.ok) {
                        const driveData = await driveResponse.json();
                        log('🎉 Drive API test successful!');
                        log(`✅ Drive User: ${driveData.user.displayName}`);
                        log(`✅ Storage used: ${Math.round(driveData.storageQuota.usage / 1024 / 1024)} MB`);
                        setStatus('🎉 Both APIs working perfectly!', 'success');
                    } else {
                        const errorText = await driveResponse.text();
                        log(`❌ Drive API failed: ${driveResponse.status}`);
                        log(`❌ Error: ${errorText}`);
                        setStatus('❌ Drive API failed - check scopes', 'error');
                    }
                } else {
                    const errorText = await userResponse.text();
                    log(`❌ User info API failed: ${userResponse.status}`);
                    log(`❌ Error: ${errorText}`);
                    setStatus('❌ API access failed - token issue', 'error');
                }

            } catch (error) {
                log('❌ Network error: ' + error.message);
                setStatus('❌ Network error during API test', 'error');
            }
        }

        // Helper function to decode JWT
        function parseJwt(token) {
            try {
                const base64Url = token.split('.')[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(''));
                return JSON.parse(jsonPayload);
            } catch (error) {
                log('Error parsing JWT: ' + error.message);
                return {};
            }
        }

        // Show/hide one tap prompt
        function showOneTap() {
            google.accounts.id.prompt((notification) => {
                if (notification.isNotDisplayed() || notification.isSkippedMoment()) {
                    log('⚠️ One Tap prompt not displayed or skipped');
                } else {
                    log('✅ One Tap prompt displayed');
                }
            });
        }
    </script>
</body>
</html>
================
File: README.md
================
# Andy's Library

================
File: Schema.pdf
================
Tables	(3)
Name
Type
Schema
books
 
CREATE	TABLE	books	(	id	INTEGER	PRIMARY	KEY,
title	TEXT	NOT	NULL,	category_id	INTEGER,
subject_id	INTEGER,	FOREIGN	KEY(category_id)
REFERENCES	categories(id),	FOREIGN
KEY(subject_id)	REFERENCES	subjects(id)	)
id
INTEGER
"id"	INTEGER
title
TEXT
"title"	TEXT	NOT	NULL
category_id
INTEGER
"category_id"	INTEGER
subject_id
INTEGER
"subject_id"	INTEGER
categories
 
CREATE	TABLE	categories	(	id	INTEGER	PRIMARY	KEY,
category	TEXT	NOT	NULL	UNIQUE	)
id
INTEGER
"id"	INTEGER
category
TEXT
"category"	TEXT	NOT	NULL	UNIQUE
subjects
 
CREATE	TABLE	subjects	(	id	INTEGER	PRIMARY	KEY,
category_id	INTEGER,	subject	TEXT	NOT	NULL,
UNIQUE(category_id,	subject),	FOREIGN
KEY(category_id)	REFERENCES	categories(id)	)
id
INTEGER
"id"	INTEGER
category_id
INTEGER
"category_id"	INTEGER
subject
TEXT
"subject"	TEXT	NOT	NULL
Indices	(5)
Name
Type
Schema
idx_books_catego
ry_subject_title
 
CREATE	INDEX
idx_books_category_subject_title	ON	books
(category_id,	subject_id,	title)
category_id
 
"category_id"
subject_id
 
"subject_id"
title
 
"title"
idx_books_catego
ry_title
 
CREATE	INDEX	idx_books_category_title	ON
books	(category_id,	title)
category_id
 
"category_id"
title
 
"title"
idx_books_title
 
CREATE	INDEX	idx_books_title	ON	books
(title)
1
Name
Type
Schema
title
 
"title"
idx_categories_cat
egory
 
CREATE	INDEX	idx_categories_category	ON
categories	(category)
category
 
"category"
idx_subjects_cate
gory_subject
 
CREATE	INDEX	idx_subjects_category_subject
ON	subjects	(category_id,	subject)
category_id
 
"category_id"
subject
 
"subject"
Views	(0)
Name
Type
Schema
Triggers	(0)
Name
Type
Schema
2

================
File: Scripts/System/BackupProject.py
================
#!/usr/bin/env python3
"""
Project backup script that respects .gitignore files
"""

import os
import shutil
import sys
from datetime import datetime
from pathlib import Path
import fnmatch


def parse_gitignore(gitignore_path):
    """Parse .gitignore file and return patterns to ignore"""
    patterns = []
    if os.path.exists(gitignore_path):
        with open(gitignore_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    patterns.append(line)
    return patterns


def should_ignore(file_path, ignore_patterns, base_path):
    """Check if a file/directory should be ignored based on gitignore patterns"""
    relative_path = os.path.relpath(file_path, base_path)
    
    for pattern in ignore_patterns:
        # Handle directory patterns ending with /
        if pattern.endswith('/'):
            if os.path.isdir(file_path):
                dir_pattern = pattern.rstrip('/')
                if fnmatch.fnmatch(relative_path, dir_pattern) or fnmatch.fnmatch(os.path.basename(file_path), dir_pattern):
                    return True
        else:
            # Handle file patterns
            if fnmatch.fnmatch(relative_path, pattern) or fnmatch.fnmatch(os.path.basename(file_path), pattern):
                return True
            # Check if any parent directory matches the pattern
            path_parts = relative_path.split(os.sep)
            for part in path_parts[:-1]:  # Exclude the file itself
                if fnmatch.fnmatch(part, pattern):
                    return True
    
    return False


def copy_with_gitignore(src, dst, ignore_patterns):
    """Copy directory tree while respecting gitignore patterns"""
    if not os.path.exists(dst):
        os.makedirs(dst)
    
    for item in os.listdir(src):
        src_path = os.path.join(src, item)
        dst_path = os.path.join(dst, item)
        
        if should_ignore(src_path, ignore_patterns, src):
            print(f"Ignoring: {src_path}")
            continue
        
        if os.path.isdir(src_path):
            copy_with_gitignore(src_path, dst_path, ignore_patterns)
        else:
            shutil.copy2(src_path, dst_path)


def backup_project(project_name=None):
    """Backup the current project, respecting .gitignore if present"""
    # Get project name
    if not project_name:
        project_name = os.path.basename(os.getcwd())
    
    # Setup backup directory
    backup_dir = os.path.join(os.path.expanduser("~"), "Desktop", "Projects_Backup")
    date_stamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"{project_name}_{date_stamp}"
    backup_path = os.path.join(backup_dir, backup_name)
    
    # Create backup directory
    os.makedirs(backup_dir, exist_ok=True)
    
    # Get source directory (current directory)
    src_dir = os.getcwd()
    
    # Parse .gitignore if it exists
    gitignore_path = os.path.join(src_dir, '.gitignore')
    ignore_patterns = parse_gitignore(gitignore_path)
    
    # Always ignore .git directory
    ignore_patterns.append('.git/')
    
    print(f"Backing up project: {project_name}")
    if ignore_patterns:
        print(f"Using .gitignore patterns: {len(ignore_patterns)} patterns found")
    
    # Copy project with gitignore filtering
    try:
        copy_with_gitignore(src_dir, backup_path, ignore_patterns)
        print(f"Project backed up to: {backup_path}")
        return backup_path
    except Exception as e:
        print(f"Error during backup: {e}")
        return None


def main():
    """Main entry point"""
    project_name = None
    if len(sys.argv) > 1:
        project_name = sys.argv[1]
    
    backup_project(project_name)


if __name__ == "__main__":
    main()
================
File: Scripts/System/CodebaseSum.py
================
#!/usr/bin/env python3
"""
File: CodebaseSum.py
Path: BowersWorld-com/Scripts/CodebaseSum.py
Created: 2025-06-25
Description: Generate a comprehensive codebase snapshot in a structured format
"""

import os
import subprocess
import tempfile
from datetime import datetime
from pathlib import Path
import shutil
import fnmatch
import PyPDF2
from PyPDF2 import PdfReader

def get_gitignore_patterns(gitignore_path=".gitignore"):
    patterns = set()
    if os.path.exists(gitignore_path):
        with open(gitignore_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    # Normalize patterns: remove leading / and trailing / if not needed
                    if line.startswith('/'):
                        line = line[1:]
                    patterns.add(line)
    return patterns

def is_ignored(path, gitignore_patterns):
    """
    Checks if a given path should be ignored based on .gitignore patterns.
    This is a simplified implementation and may not cover all gitignore complexities.
    """
    path_str = str(path)
    # Check if the path directly matches any pattern
    for pattern in gitignore_patterns:
        # Handle directory patterns (ending with /)
        if pattern.endswith('/'):
            if path.is_dir() and fnmatch.fnmatch(path_str + '/', pattern):
                return True
            elif path.is_file() and fnmatch.fnmatch(path_str, pattern[:-1]): # Match files within ignored dirs
                return True
        elif fnmatch.fnmatch(path_str, pattern):
            return True
        # Handle patterns that are just directory names without leading/trailing slashes
        if path.is_dir() and fnmatch.fnmatch(path.name, pattern):
            return True
    return False

def main():
    # Create timestamp for the output filename
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"CodebaseSummary_{timestamp}.txt"
    
    # Check if the tree command is available
    if not shutil.which('tree'):
        print("Error: The 'tree' command is required but not found. Please install it first.")
        return 1
    
    print(f"Generating codebase summary to {output_file}...")
    
    # Create temp directory for building the summary
    with tempfile.TemporaryDirectory() as temp_dir:
        header_file = os.path.join(temp_dir, "header.txt")
        structure_file = os.path.join(temp_dir, "structure.txt")
        files_list = os.path.join(temp_dir, "files_list.txt")
        files_content = os.path.join(temp_dir, "files_content.txt")
        
        # Create the header
        header_content = """This file is a comprehensive codebase snapshot for the BowersWorld-com project, generated to facilitate analysis and development.

================================================================
File Summary
================================================================

Purpose:
--------
This document provides a consolidated view of the project's source code, scripts,
HTML, and text files, excluding any files specified in the .gitignore file. 
It serves as a reference for developers, making it easier to understand the 
codebase structure and functionality in a single document.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
5. List of Program files
6. List of Documents

"""
        
        with open(header_file, 'w') as f:
            f.write(header_content)
        
        # Generate directory structure using tree
        print("Generating directory structure...")
        # Get exclusion patterns from .gitignore for tree command
        gitignore_patterns_for_tree = get_gitignore_patterns()
        # Convert patterns to a format suitable for tree's -I option
        # Tree's -I uses fnmatch, so we can directly use the patterns.
        # We need to explicitly include some common system-level ignores for tree
        common_tree_excludes = [
            '.git', '__pycache__', '.venv', 'venv', 'ENV', '.idea', '.vscode',
            'Temp', 'Logs', 'build', 'dist', 'env', 'lib', 'lib64', 'parts', 
            'sdist', 'var', 'downloads', 'eggs', '.eggs', 'develop-eggs',
            'Covers', 'Thumbs', 'Html', 'Docs', 'node_modules'
        ]
        tree_ignore_patterns = list(set(common_tree_excludes).union(gitignore_patterns_for_tree))
        
        tree_cmd = ['tree', '-f', '-I', '|'.join(tree_ignore_patterns), '.']
        with open(structure_file, 'w') as f:
            subprocess.run(tree_cmd, stdout=f)
        
        # Create the files section header
        with open(files_content, 'w') as f:
            f.write("================================================================\n")
            f.write("Files\n")
            f.write("================================================================\n")
            f.write("\n")
        
        # Get exclusion patterns from .gitignore for os.walk
        gitignore_patterns_for_walk = get_gitignore_patterns()

        # Define common directories to exclude for os.walk based on gitignore and common patterns
        # These are explicit directories that should always be skipped by os.walk,
        # in addition to those matched by gitignore patterns.
        explicit_exclude_dirs_walk = {
            '.git', '__pycache__', '.venv', 'venv', 'ENV', '.idea', '.vscode',
            'Temp', 'Logs', 'build', 'dist', 'env', 'lib', 'lib64', 'parts',
            'sdist', 'var', 'downloads', 'eggs', '.eggs', 'develop-eggs',
            'Covers', 'Thumbs', 'Html', 'Docs', 'node_modules'
        }

        # Find relevant project files
        print("Finding relevant project files (.py, .sh, .md, .html, .txt, .pdf)...")
        file_extensions = {'.py', '.sh', '.md', '.html', '.txt', '.pdf'}
        relevant_files = []

        for root, dirs, files in os.walk('.'):
            # Filter directories in-place to avoid walking into excluded ones
            dirs_to_keep = []
            for d in list(dirs): # Iterate over a copy because we modify 'dirs'
                current_dir_path = Path(root) / d
                rel_dir_path = current_dir_path.relative_to('.')
                
                # Check explicit excludes first
                if d in explicit_exclude_dirs_walk:
                    dirs.remove(d)
                    continue
                
                # Check against gitignore patterns
                if is_ignored(rel_dir_path, gitignore_patterns_for_walk):
                    dirs.remove(d)
                else:
                    dirs_to_keep.append(d)
            dirs[:] = dirs_to_keep # Update dirs for the current walk iteration

            for file in files:
                file_path = Path(root) / file
                rel_file_path = file_path.relative_to('.')
                
                # Skip .gitignore file itself
                if file == '.gitignore':
                    continue

                # Check if file has relevant extension
                if file_path.suffix in file_extensions:
                    # Check if the file path should be ignored by gitignore patterns
                    if is_ignored(rel_file_path, gitignore_patterns_for_walk):
                        continue
                    
                    relevant_files.append(rel_file_path)
        
        # Sort files for consistent output
        relevant_files.sort(key=str) # Sort Path objects by their string representation
        
        # Write files list
        with open(files_list, 'w') as f:
            for file_path in relevant_files:
                f.write(f"{file_path}\n")
        
        # Process each file found
        print("Processing files...")
        with open(files_content, 'a') as fc:
            for p_obj in relevant_files: # Iterate over Path objects
                file_path_str = str(p_obj) # Get string representation for os.path.isfile
                if os.path.isfile(file_path_str):
                    current_file_path = Path(file_path_str) # Convert back to Path object for .suffix
                    fc.write("================\n")
                    fc.write(f"File: {current_file_path}\n")
                    fc.write("================\n")
                    try:
                        if current_file_path.suffix == '.pdf':
                            pdf_content = ""
                            with open(current_file_path, 'rb') as pdf_file:
                                pdf_reader = PdfReader(pdf_file)
                                for page_num in range(len(pdf_reader.pages)):
                                    page = pdf_reader.pages[page_num]
                                    text = page.extract_text()
                                    if text: # Only add if text is extracted
                                        pdf_content += text + "\n"
                            if pdf_content:
                                fc.write(pdf_content)
                            else:
                                fc.write("[PDF file: No extractable text content]\n")
                        else:
                            with open(current_file_path, 'r', encoding='utf-8') as f:
                                fc.write(f.read())
                    except Exception as e: # Catch all exceptions for reading files, including PDFs
                        fc.write(f"[Error reading content: {e} - content not displayed]\n")
                    fc.write("\n")
        
        # Combine all parts into the final file
        with open(output_file, 'w') as output:
            # Write header
            with open(header_file, 'r') as f:
                output.write(f.read())
            
            # Write directory structure
            output.write("================================================================\n")
            output.write("Directory Structure\n")
            output.write("================================================================\n")
            with open(structure_file, 'r') as f:
                output.write(f.read())
            output.write("\n")
            
            # Write files content
            with open(files_content, 'r') as f:
                output.write(f.read())
            
            # Write file list
            output.write("\n")
            output.write("================================================================\n")
            output.write("List of Included Files\n")
            output.write("================================================================\n")
            output.write("\n")
            output.write("Files included:\n")
            with open(files_list, 'r') as f:
                output.write(f.read())
            
            num_files = len(relevant_files)
            output.write(f"\nThere are {num_files} files included in the Files section of the CodebaseSummary document.\n")
    
    print(f"Codebase summary generated: {output_file}")
    print(f"It contains {len(relevant_files)} files.")
    
    return 0

if __name__ == "__main__":
    exit(main())

================
File: Scripts/System/GPU OCR Speed Test.py
================
#!/usr/bin/env python3
"""
GPU OCR Speed Test - Compare CPU vs GPU OCR performance
"""

import time
import torch
from pathlib import Path
import fitz  # PyMuPDF
from pdf2image import convert_from_path
import tempfile

def test_gpu_availability():
    """Test if CUDA GPU is available"""
    print("🔍 GPU AVAILABILITY CHECK")
    print("=" * 40)
    
    # Check CUDA
    cuda_available = torch.cuda.is_available()
    print(f"CUDA Available: {cuda_available}")
    
    if cuda_available:
        gpu_count = torch.cuda.device_count()
        gpu_name = torch.cuda.get_device_name(0)
        gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
        
        print(f"GPU Count: {gpu_count}")
        print(f"GPU Name: {gpu_name}")
        print(f"GPU Memory: {gpu_memory:.1f} GB")
        
        return True
    else:
        print("❌ CUDA not available")
        return False

def test_easyocr_speed(pdf_path):
    """Test EasyOCR speed with GPU"""
    try:
        import easyocr
        
        print("\n🚀 TESTING EASYOCR (GPU)")
        print("=" * 40)
        
        # Initialize EasyOCR with GPU
        reader = easyocr.Reader(['en'], gpu=True)
        
        # Convert first page to image
        with tempfile.TemporaryDirectory() as temp_dir:
            pages = convert_from_path(pdf_path, first_page=1, last_page=1, dpi=300)
            
            if pages:
                start_time = time.time()
                
                # Perform OCR
                results = reader.readtext(pages[0])
                
                end_time = time.time()
                processing_time = end_time - start_time
                
                # Extract text
                extracted_text = ' '.join([result[1] for result in results])
                
                print(f"⏱️ Processing time: {processing_time:.2f} seconds")
                print(f"📄 Text extracted: {len(extracted_text)} characters")
                print(f"📝 Sample: {extracted_text[:200]}...")
                
                return processing_time, len(extracted_text)
                
    except ImportError:
        print("❌ EasyOCR not installed. Install with: pip install easyocr")
        return None, None
    except Exception as e:
        print(f"❌ EasyOCR test failed: {e}")
        return None, None

def test_tesseract_speed(pdf_path):
    """Test current Tesseract speed for comparison"""
    try:
        import pytesseract
        
        print("\n🐌 TESTING TESSERACT (CPU)")
        print("=" * 40)
        
        # Convert first page to image
        with tempfile.TemporaryDirectory() as temp_dir:
            pages = convert_from_path(pdf_path, first_page=1, last_page=1, dpi=300)
            
            if pages:
                start_time = time.time()
                
                # Perform OCR
                extracted_text = pytesseract.image_to_string(pages[0])
                
                end_time = time.time()
                processing_time = end_time - start_time
                
                print(f"⏱️ Processing time: {processing_time:.2f} seconds")
                print(f"📄 Text extracted: {len(extracted_text)} characters")
                print(f"📝 Sample: {extracted_text[:200]}...")
                
                return processing_time, len(extracted_text)
                
    except Exception as e:
        print(f"❌ Tesseract test failed: {e}")
        return None, None

def test_paddleocr_speed(pdf_path):
    """Test PaddleOCR speed with GPU"""
    try:
        from paddleocr import PaddleOCR
        
        print("\n⚡ TESTING PADDLEOCR (GPU)")
        print("=" * 40)
        
        # Initialize PaddleOCR with GPU
        ocr = PaddleOCR(use_angle_cls=True, lang='en', use_gpu=True)
        
        # Convert first page to image
        with tempfile.TemporaryDirectory() as temp_dir:
            pages = convert_from_path(pdf_path, first_page=1, last_page=1, dpi=300)
            
            if pages:
                # Save image temporarily
                img_path = f"{temp_dir}/test_page.png"
                pages[0].save(img_path)
                
                start_time = time.time()
                
                # Perform OCR
                results = ocr.ocr(img_path, cls=True)
                
                end_time = time.time()
                processing_time = end_time - start_time
                
                # Extract text
                extracted_text = ''
                if results and results[0]:
                    extracted_text = ' '.join([line[1][0] for line in results[0]])
                
                print(f"⏱️ Processing time: {processing_time:.2f} seconds")
                print(f"📄 Text extracted: {len(extracted_text)} characters")
                print(f"📝 Sample: {extracted_text[:200]}...")
                
                return processing_time, len(extracted_text)
                
    except ImportError:
        print("❌ PaddleOCR not installed. Install with: pip install paddlepaddle-gpu paddleocr")
        return None, None
    except Exception as e:
        print(f"❌ PaddleOCR test failed: {e}")
        return None, None

def main():
    """Main speed test function"""
    print("🚀 GPU OCR SPEED TEST FOR RTX 4070")
    print("=" * 50)
    
    # Test GPU availability
    gpu_available = test_gpu_availability()
    
    if not gpu_available:
        print("\n❌ No GPU acceleration available")
        return
    
    # Find a test PDF
    pdf_dir = Path("/home/herb/Desktop/Not Backed Up/Anderson's Library/Andy/Anderson eBooks")
    test_pdfs = list(pdf_dir.glob("*.pdf"))[:3]  # Test first 3 PDFs
    
    if not test_pdfs:
        print("❌ No test PDFs found")
        return
    
    print(f"\n📚 Testing with: {test_pdfs[0].name}")
    
    # Test each OCR method
    results = {}
    
    # Test Tesseract (current method)
    tesseract_time, tesseract_chars = test_tesseract_speed(test_pdfs[0])
    if tesseract_time:
        results['Tesseract (CPU)'] = tesseract_time
    
    # Test EasyOCR
    easyocr_time, easyocr_chars = test_easyocr_speed(test_pdfs[0])
    if easyocr_time:
        results['EasyOCR (GPU)'] = easyocr_time
    
    # Test PaddleOCR
    paddleocr_time, paddleocr_chars = test_paddleocr_speed(test_pdfs[0])
    if paddleocr_time:
        results['PaddleOCR (GPU)'] = paddleocr_time
    
    # Show comparison
    print("\n📊 SPEED COMPARISON RESULTS")
    print("=" * 50)
    
    if results:
        fastest_method = min(results.items(), key=lambda x: x[1])
        
        for method, time_taken in results.items():
            speedup = tesseract_time / time_taken if tesseract_time and method != 'Tesseract (CPU)' else 1.0
            status = "🏆" if method == fastest_method[0] else "⚡" if speedup > 1 else "🐌"
            
            print(f"{status} {method}: {time_taken:.2f}s (×{speedup:.1f} speedup)")
        
        print(f"\n🎯 RECOMMENDATION:")
        print(f"   Fastest method: {fastest_method[0]} ({fastest_method[1]:.2f}s)")
        
        if fastest_method[1] < tesseract_time:
            total_speedup = tesseract_time / fastest_method[1]
            new_total_time = 6 * 60 / total_speedup  # 6 hours in minutes
            print(f"   Total processing speedup: ×{total_speedup:.1f}")
            print(f"   Estimated new total time: {new_total_time:.0f} minutes ({new_total_time/60:.1f} hours)")
    
    print("\n" + "=" * 50)

if __name__ == "__main__":
    main()

================
File: Scripts/System/GitHubAutoUpdate.py
================
# GitHub Auto-Update Script for BowersWorld.com
# Author: Herb Bowers - Project Himalaya
# Created: 2025-06-22  17:15
# Path: /scripts/AutoUpdateGitHub.py

import os
import sys
import subprocess
import json
import time
from datetime import datetime
from pathlib import Path
import argparse


class GitHubAutoUpdater:
    def __init__(self, repo_path=None, remote_name="origin", branch="main"):
        """
        Initialize the GitHub auto-updater
        
        Args:
            repo_path: Path to your local repository (if None, uses current directory)
            remote_name: Git remote name (usually "origin")
            branch: Branch to push to (usually "main")
        """
        self.repo_path = Path(repo_path) if repo_path else Path.cwd()
        self.remote_name = remote_name
        self.branch = branch
        
        # Ensure we're in a git repository
        if not (self.repo_path / '.git').exists():
            raise Exception(f"Not a git repository: {self.repo_path}")
    
    def RunGitCommand(self, command):
        """Execute git command and return result"""
        try:
            result = subprocess.run(
                command,
                cwd=self.repo_path,
                shell=True,
                capture_output=True,
                text=True,
                check=True
            )
            return result.stdout.strip()
        except subprocess.CalledProcessError as e:
            print(f"Git command failed: {command}")
            print(f"Error: {e.stderr}")
            raise
    
    def CheckGitStatus(self):
        """Check if there are any changes to commit"""
        try:
            # Check for unstaged changes
            unstaged = self.RunGitCommand("git diff --name-only")
            
            # Check for staged changes
            staged = self.RunGitCommand("git diff --cached --name-only")
            
            # Check for untracked files
            untracked = self.RunGitCommand("git ls-files --others --exclude-standard")
            
            changes = {
                'unstaged': unstaged.split('\n') if unstaged else [],
                'staged': staged.split('\n') if staged else [],
                'untracked': untracked.split('\n') if untracked else []
            }
            
            return changes
        except Exception as e:
            print(f"Error checking git status: {e}")
            return None
    
    def AddFiles(self, files=None):
        """Add files to staging area"""
        if files:
            for file in files:
                self.RunGitCommand(f"git add {file}")
        else:
            # Add all changes
            self.RunGitCommand("git add .")
    
    def CreateCommit(self, message=None, auto_message=True):
        """Create a commit with given message"""
        if not message and auto_message:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            message = f"Auto-update: {timestamp}"
        elif not message:
            raise ValueError("Commit message required when auto_message=False")
        
        self.RunGitCommand(f'git commit -m "{message}"')
        return message
    
    def PushToGitHub(self):
        """Push changes to GitHub"""
        push_command = f"git push {self.remote_name} {self.branch}"
        self.RunGitCommand(push_command)
    
    def AutoUpdate(self, commit_message=None, files=None, verbose=True):
        """
        Complete auto-update workflow: add, commit, push
        
        Args:
            commit_message: Custom commit message (auto-generated if None)
            files: Specific files to add (all changes if None)
            verbose: Print status messages
        """
        if verbose:
            print("🔄 Starting GitHub auto-update...")
        
        try:
            # Check for changes
            changes = self.CheckGitStatus()
            if not changes:
                if verbose:
                    print("❌ Error checking repository status")
                return False
            
            total_changes = len(changes['unstaged']) + len(changes['staged']) + len(changes['untracked'])
            
            if total_changes == 0:
                if verbose:
                    print("✅ No changes detected. Repository is up to date.")
                return True
            
            if verbose:
                print(f"📁 Found {total_changes} changed/new files:")
                for file in changes['unstaged'] + changes['untracked']:
                    if file:  # Skip empty strings
                        print(f"   - {file}")
            
            # Add files
            if verbose:
                print("📤 Adding files to staging area...")
            self.AddFiles(files)
            
            # Create commit
            if verbose:
                print("💾 Creating commit...")
            commit_msg = self.CreateCommit(commit_message)
            
            # Push to GitHub
            if verbose:
                print("🚀 Pushing to GitHub...")
            self.PushToGitHub()
            
            if verbose:
                print(f"✅ Successfully updated GitHub!")
                print(f"   Commit: {commit_msg}")
                print(f"   Branch: {self.branch}")
                print("🌐 GitHub Pages will update in 5-10 minutes")
            
            return True
            
        except Exception as e:
            if verbose:
                print(f"❌ Error during auto-update: {e}")
            return False
    
    def SetupWatchMode(self, watch_directory=None, interval=30):
        """
        Watch for file changes and auto-update
        
        Args:
            watch_directory: Directory to watch (repo root if None)
            interval: Check interval in seconds
        """
        watch_dir = Path(watch_directory) if watch_directory else self.repo_path
        
        print(f"👀 Watching {watch_dir} for changes...")
        print(f"⏰ Check interval: {interval} seconds")
        print("Press Ctrl+C to stop")
        
        last_check = {}
        
        try:
            while True:
                current_check = {}
                changes_detected = False
                
                # Check modification times of files
                for file_path in watch_dir.rglob('*'):
                    if file_path.is_file() and not str(file_path).startswith('.git'):
                        try:
                            mtime = file_path.stat().st_mtime
                            current_check[str(file_path)] = mtime
                            
                            if str(file_path) in last_check:
                                if last_check[str(file_path)] != mtime:
                                    changes_detected = True
                            else:
                                changes_detected = True
                        except:
                            continue
                
                if changes_detected and last_check:  # Skip first run
                    print(f"\n🔔 Changes detected at {datetime.now().strftime('%H:%M:%S')}")
                    if self.AutoUpdate(verbose=True):
                        print("✅ Auto-update completed successfully\n")
                    else:
                        print("❌ Auto-update failed\n")
                
                last_check = current_check
                time.sleep(interval)
                
        except KeyboardInterrupt:
            print("\n👋 Watch mode stopped")


def CreateConfigFile(repo_path="."):
    """Create a configuration file for the auto-updater"""
    config = {
        "repository": {
            "path": str(Path(repo_path).absolute()),
            "remote": "origin",
            "branch": "main"
        },
        "auto_update": {
            "default_message_prefix": "Auto-update",
            "include_timestamp": True,
            "watch_interval": 30
        },
        "excluded_files": [
            ".git/*",
            "*.log",
            "*.tmp",
            "__pycache__/*",
            "node_modules/*"
        ]
    }
    
    config_path = Path(repo_path) / "auto_update_config.json"
    with open(config_path, 'w') as f:
        json.dump(config, f, indent=2)
    
    print(f"✅ Configuration file created: {config_path}")
    return config_path


def main():
    """Main function for command line usage"""
    parser = argparse.ArgumentParser(description="GitHub Auto-Update Script")
    parser.add_argument("--path", default=".", help="Repository path (default: current directory)")
    parser.add_argument("--message", "-m", help="Commit message")
    parser.add_argument("--watch", "-w", action="store_true", help="Watch mode for continuous updates")
    parser.add_argument("--interval", "-i", type=int, default=30, help="Watch interval in seconds")
    parser.add_argument("--setup", action="store_true", help="Create configuration file")
    parser.add_argument("--quiet", "-q", action="store_true", help="Quiet mode (less output)")
    
    args = parser.parse_args()
    
    try:
        if args.setup:
            CreateConfigFile(args.path)
            return
        
        # Initialize updater
        updater = GitHubAutoUpdater(repo_path=args.path)
        
        if args.watch:
            # Watch mode
            updater.SetupWatchMode(interval=args.interval)
        else:
            # Single update
            success = updater.AutoUpdate(
                commit_message=args.message,
                verbose=not args.quiet
            )
            sys.exit(0 if success else 1)
            
    except KeyboardInterrupt:
        print("\n👋 Goodbye!")
        sys.exit(0)
    except Exception as e:
        print(f"❌ Error: {e}")
        sys.exit(1)


# Usage examples and helper functions
class LibraryUpdater:
    """Specialized updater for Anderson's Library files"""
    
    def __init__(self, repo_path="."):
        self.updater = GitHubAutoUpdater(repo_path)
    
    def UpdateLibraryDatabase(self, db_path):
        """Update when library database changes"""
        return self.updater.AutoUpdate(
            commit_message=f"Update library database: {Path(db_path).name}",
            files=[db_path]
        )
    
    def UpdateLibraryPages(self):
        """Update library-specific pages"""
        library_files = [
            "library/index.html",
            "library/app/index.html", 
            "library/auth/*.html",
            "library/js/*.js",
            "library/css/*.css"
        ]
        
        return self.updater.AutoUpdate(
            commit_message="Update Anderson's Library interface",
            files=library_files
        )
    
    def QuickUpdate(self, message="Quick library update"):
        """Quick update of all changes"""
        return self.updater.AutoUpdate(commit_message=message)


if __name__ == "__main__":
    main()

================
File: Scripts/System/GitHubUpdateSite.py
================
# Simple Auto-Update Script for BowersWorld.com
# Author: Herb Bowers - Project Himalaya  
# Created: 2025-06-22  17:30
# Path: /UpdateSite.py

import os
import subprocess
import sys
from datetime import datetime

def RunCommand(command, show_output=True):
    """Run a command and return result"""
    try:
        if show_output:
            print(f"🔄 Running: {command}")
        
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            if show_output and result.stdout:
                print(result.stdout)
            return True
        else:
            print(f"❌ Error: {result.stderr}")
            return False
    except Exception as e:
        print(f"❌ Command failed: {e}")
        return False

def UpdateSite(message=None):
    """Simple function to update GitHub Pages site"""
    
    print("🚀 BowersWorld.com Auto-Update Starting...")
    print("=" * 50)
    
    # Check if we're in a git repository
    if not os.path.exists('.git'):
        print("❌ Error: Not in a git repository")
        print("   Make sure you're in the BowersWorld-com directory")
        return False
    
    # Check for changes
    print("📋 Checking for changes...")
    result = subprocess.run("git status --porcelain", shell=True, capture_output=True, text=True)
    
    if not result.stdout.strip():
        print("✅ No changes detected. Site is up to date!")
        return True
    
    print("📁 Changes found:")
    changes = result.stdout.strip().split('\n')
    for change in changes:
        print(f"   {change}")
    
    # Create automatic commit message if none provided
    if not message:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message = f"Site update: {timestamp}"
    
    # Add all changes
    print("\n📤 Adding changes...")
    if not RunCommand("git add ."):
        return False
    
    # Commit changes
    print("💾 Creating commit...")
    commit_command = f'git commit -m "{message}"'
    if not RunCommand(commit_command):
        return False
    
    # Push to GitHub
    print("🚀 Pushing to GitHub...")
    if not RunCommand("git push origin main"):
        return False
    
    print("\n" + "=" * 50)
    print("✅ SUCCESS! Site updated successfully!")
    print("🌐 GitHub Pages will update in 5-10 minutes")
    print("🔗 View at: https://callmechewy.github.io/BowersWorld-com/")
    print("=" * 50)
    
    return True

def QuickUpdate():
    """Quick update with automatic message"""
    return UpdateSite()

def CustomUpdate():
    """Update with custom commit message"""
    print("📝 Enter a custom commit message:")
    message = input("Message: ").strip()
    
    if not message:
        print("Using automatic message...")
        return UpdateSite()
    
    return UpdateSite(message)

def main():
    """Main menu for the updater"""
    print("📚 BowersWorld.com Site Updater")
    print("=" * 40)
    print("1. Quick update (automatic message)")
    print("2. Custom update (enter your message)")
    print("3. Exit")
    print("=" * 40)
    
    while True:
        try:
            choice = input("Choose option (1-3): ").strip()
            
            if choice == "1":
                QuickUpdate()
                break
            elif choice == "2":
                CustomUpdate()
                break
            elif choice == "3":
                print("👋 Goodbye!")
                break
            else:
                print("❌ Invalid choice. Please enter 1, 2, or 3.")
        except KeyboardInterrupt:
            print("\n👋 Goodbye!")
            break
        except Exception as e:
            print(f"❌ Error: {e}")
            break

# Direct usage functions
def UpdateLibrary():
    """Update library-specific changes"""
    return UpdateSite("Update Anderson's Library")

def UpdateMainSite():
    """Update main site changes"""
    return UpdateSite("Update Project Himalaya site")

def UpdateDatabase():
    """Update when database changes"""
    return UpdateSite("Update library database")

if __name__ == "__main__":
    # Check for command line arguments
    if len(sys.argv) > 1:
        if sys.argv[1] == "--quick":
            QuickUpdate()
        elif sys.argv[1] == "--library":
            UpdateLibrary()
        elif sys.argv[1] == "--main":
            UpdateMainSite()
        elif sys.argv[1] == "--database":
            UpdateDatabase()
        elif sys.argv[1] == "--message" and len(sys.argv) > 2:
            UpdateSite(" ".join(sys.argv[2:]))
        else:
            print("Usage:")
            print("  python update_site.py               # Interactive menu")
            print("  python update_site.py --quick       # Quick update")
            print("  python update_site.py --library     # Library update")
            print("  python update_site.py --main        # Main site update")
            print("  python update_site.py --database    # Database update")
            print("  python update_site.py --message 'Your message'")
    else:
        # Run interactive menu
        main()

================
File: Scripts/System/ListFilesByDate.py
================



import os
import datetime

def list_files_and_dates():
    """
    Lists all files in the current directory and their last modification dates.
    """
    files_with_dates = []
    for item in os.listdir('.'):
        if os.path.isfile(item):
            try:
                timestamp = os.path.getmtime(item)
                files_with_dates.append((timestamp, item))
            except Exception as e:
                print(f"Warning: Could not retrieve date for {item} ({e})")

    files_with_dates.sort() # Sort by timestamp (oldest first)

    print("Files and their last modification dates in the current directory (oldest first):")
    for timestamp, item in files_with_dates:
        dt_object = datetime.datetime.fromtimestamp(timestamp)
        print(f"- {dt_object.strftime('%Y-%m-%d %H:%M:%S')}: {item}")

if __name__ == "__main__":
    list_files_and_dates()

================
File: Scripts/System/MarkdownToText.py
================
# File: MarkdownToText.py
# Path: MarkdownToText.py
# Standard: AIDEV-PascalCase-1.7
# Created: 2025-06-21
# Last Modified: 2025-06-21  09:30 AM
# Author: Claude Code Assistant
"""
Description: Himalaya Markdown to Text Converter Utility
Converts .md files to plain text format by stripping Markdown syntax while preserving
content structure and readability. Handles headers, lists, code blocks, links, and
other common Markdown elements. Follows AIDEV-PascalCase-1.7 standard with comprehensive
error handling, logging, and audit trail generation.

Core Features:
- PascalCase naming convention enforcement
- Comprehensive Markdown syntax removal
- Batch directory processing capabilities
- Detailed logging and status reporting
- Error handling with graceful degradation
"""

import os
import re
import sys
import logging
from datetime import datetime
from typing import Optional

# --- CONSTANTS ---
DOCS_DIR = 'Docs'
TEXT_OUTPUT_DIR = 'TextOutput'
DATE_FMT = "%Y-%m-%d"
TS_FMT = "%Y-%m-%d_%H-%M-%S"

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='[MarkdownToText] %(levelname)s: %(message)s'
)

def ProcessMarkdownToText(MarkdownContent: str) -> str:
    """
    Processes Markdown content and converts to clean plain text.
    Removes all Markdown syntax while preserving content structure and readability.
    Follows Himalaya text processing standards.
    
    Args:
        MarkdownContent: Raw markdown content as string
        
    Returns:
        Plain text with all Markdown syntax removed
    """
    ProcessedText = MarkdownContent
    
    # Remove code blocks (```code```)
    ProcessedText = re.sub(r'```[\s\S]*?```', '', ProcessedText)
    
    # Remove inline code (`code`)
    ProcessedText = re.sub(r'`([^`]+)`', r'\1', ProcessedText)
    
    # Convert headers (# ## ### etc.) to plain text with spacing
    ProcessedText = re.sub(r'^#{1,6}\s*(.+)$', r'\1', ProcessedText, flags=re.MULTILINE)
    
    # Remove bold/italic markers (**text**, *text*, __text__, _text_)
    ProcessedText = re.sub(r'\*\*([^*]+)\*\*', r'\1', ProcessedText)
    ProcessedText = re.sub(r'\*([^*]+)\*', r'\1', ProcessedText)
    ProcessedText = re.sub(r'__([^_]+)__', r'\1', ProcessedText)
    ProcessedText = re.sub(r'_([^_]+)_', r'\1', ProcessedText)
    
    # Convert links [text](url) to just text
    ProcessedText = re.sub(r'\[([^\]]+)\]\([^)]+\)', r'\1', ProcessedText)
    
    # Remove reference-style links [text]: url
    ProcessedText = re.sub(r'^\s*\[[^\]]+\]:\s*.+$', '', ProcessedText, flags=re.MULTILINE)
    
    # Convert unordered lists (- * +) to plain text with indentation
    ProcessedText = re.sub(r'^(\s*)[-*+]\s+(.+)$', r'\1\2', ProcessedText, flags=re.MULTILINE)
    
    # Convert ordered lists (1. 2. etc.) to plain text with indentation
    ProcessedText = re.sub(r'^(\s*)\d+\.\s+(.+)$', r'\1\2', ProcessedText, flags=re.MULTILINE)
    
    # Remove blockquotes (>)
    ProcessedText = re.sub(r'^>\s*(.*)$', r'\1', ProcessedText, flags=re.MULTILINE)
    
    # Remove horizontal rules (--- or ***)
    ProcessedText = re.sub(r'^[-*]{3,}$', '', ProcessedText, flags=re.MULTILINE)
    
    # Clean up extra whitespace while preserving paragraph breaks
    ProcessedText = re.sub(r'\n{3,}', '\n\n', ProcessedText)
    ProcessedText = re.sub(r'[ \t]+', ' ', ProcessedText)
    
    # Remove leading/trailing whitespace from lines
    CleanedLines = [Line.strip() for Line in ProcessedText.split('\n')]
    ProcessedText = '\n'.join(CleanedLines)
    
    return ProcessedText.strip()

def ConvertSingleMarkdownFile(SourcePath: str, DestinationPath: Optional[str] = None) -> bool:
    """
    Converts a single Markdown file to plain text with full error handling.
    Follows Himalaya file processing standards with comprehensive logging.
    
    Args:
        SourcePath: Path to source .md file
        DestinationPath: Optional output path, defaults to source path with .txt extension
        
    Returns:
        True if conversion successful, False otherwise
    """
    try:
        # Validate source file existence
        if not os.path.exists(SourcePath):
            logging.error(f"Source file not found: {SourcePath}")
            return False
            
        if not SourcePath.lower().endswith('.md'):
            logging.warning(f"Source file is not a Markdown file: {SourcePath}")
        
        # Determine destination path with PascalCase naming
        if DestinationPath is None:
            BaseFileName = os.path.splitext(os.path.basename(SourcePath))[0]
            DestinationPath = f"{BaseFileName}.txt"
        
        # Ensure destination directory exists
        DestinationDir = os.path.dirname(DestinationPath)
        if DestinationDir and not os.path.exists(DestinationDir):
            os.makedirs(DestinationDir, exist_ok=True)
            logging.info(f"Created destination directory: {DestinationDir}")
        
        # Read markdown content with encoding validation
        with open(SourcePath, 'r', encoding='utf-8') as SourceFile:
            MarkdownContent = SourceFile.read()
        
        # Process markdown to plain text
        ConvertedText = ProcessMarkdownToText(MarkdownContent)
        
        # Write output file with UTF-8 encoding
        with open(DestinationPath, 'w', encoding='utf-8') as DestinationFile:
            DestinationFile.write(ConvertedText)
        
        logging.info(f"Successfully converted: {SourcePath} → {DestinationPath}")
        return True
        
    except Exception as ProcessingError:
        logging.error(f"Failed to convert {SourcePath}: {ProcessingError}")
        return False

def ProcessMarkdownDirectory(SourceDirectory: str, DestinationDirectory: Optional[str] = None) -> int:
    """
    Processes all .md files in a directory to .txt files with batch processing.
    Generates comprehensive status report and audit trail.
    
    Args:
        SourceDirectory: Path to directory containing .md files
        DestinationDirectory: Optional output directory, defaults to same as source
        
    Returns:
        Number of files successfully converted
    """
    if not os.path.isdir(SourceDirectory):
        logging.error(f"Source directory not found: {SourceDirectory}")
        return 0
    
    SuccessfulConversions = 0
    ProcessingErrors = 0
    MarkdownFileList = [FileName for FileName in os.listdir(SourceDirectory) if FileName.lower().endswith('.md')]
    
    if not MarkdownFileList:
        logging.warning(f"No .md files found in directory: {SourceDirectory}")
        return 0
    
    logging.info(f"Found {len(MarkdownFileList)} Markdown files to process")
    
    for FileName in MarkdownFileList:
        SourceFilePath = os.path.join(SourceDirectory, FileName)
        
        if DestinationDirectory:
            os.makedirs(DestinationDirectory, exist_ok=True)
            BaseFileName = os.path.splitext(FileName)[0]
            DestinationFilePath = os.path.join(DestinationDirectory, f"{BaseFileName}.txt")
        else:
            DestinationFilePath = None
        
        if ConvertSingleMarkdownFile(SourceFilePath, DestinationFilePath):
            SuccessfulConversions += 1
        else:
            ProcessingErrors += 1
    
    logging.info(f"Batch processing completed: {SuccessfulConversions} successful, {ProcessingErrors} errors")
    logging.info(f"Directory processing summary: {SourceDirectory} → {DestinationDirectory or 'same directory'}")
    return SuccessfulConversions

def ExecuteMarkdownConversion():
    """
    Main execution function for command-line usage.
    Handles both single file and directory batch processing with comprehensive error handling.
    
    Usage: python MarkdownToText.py <source_file_or_directory> [destination_path]
    
    Examples:
        python MarkdownToText.py Document.md
        python MarkdownToText.py Document.md ConvertedDocument.txt
        python MarkdownToText.py ./MarkdownFiles/
        python MarkdownToText.py ./MarkdownFiles/ ./TextFiles/
    """
    if len(sys.argv) < 2:
        print("Usage: python MarkdownToText.py <source_file_or_directory> [destination_path]")
        print("Examples:")
        print("  python MarkdownToText.py Document.md")
        print("  python MarkdownToText.py Document.md ConvertedDocument.txt")
        print("  python MarkdownToText.py ./SourceDocs/")
        print("  python MarkdownToText.py ./SourceDocs/ ./ConvertedText/")
        print("\nHimalaya Markdown to Text Converter - AIDEV-PascalCase-1.7")
        sys.exit(1)
    
    SourcePath = sys.argv[1]
    DestinationPath = sys.argv[2] if len(sys.argv) > 2 else None
    
    print(f"[MarkdownToText] Himalaya conversion process starting...")
    ExecutionStartTime = datetime.now()
    
    if os.path.isfile(SourcePath):
        ConversionSuccess = ConvertSingleMarkdownFile(SourcePath, DestinationPath)
        if ConversionSuccess:
            print(f"[MarkdownToText] Single file conversion completed successfully")
        else:
            print(f"[MarkdownToText] Single file conversion failed - check logs for details")
            sys.exit(1)
    elif os.path.isdir(SourcePath):
        ProcessedFileCount = ProcessMarkdownDirectory(SourcePath, DestinationPath)
        print(f"[MarkdownToText] Directory batch processing completed: {ProcessedFileCount} files converted")
        if ProcessedFileCount == 0:
            print(f"[MarkdownToText] Warning: No files were successfully converted")
    else:
        print(f"[MarkdownToText] Error: Source path not found: {SourcePath}")
        sys.exit(1)
    
    ExecutionEndTime = datetime.now()
    TotalDuration = (ExecutionEndTime - ExecutionStartTime).total_seconds()
    print(f"[MarkdownToText] Total execution time: {TotalDuration:.2f} seconds")
    print(f"[MarkdownToText] Himalaya conversion process completed successfully")

if __name__ == "__main__":
    ExecuteMarkdownConversion()
================
File: Scripts/System/UpdatePopulate.py
================
# File: CliveJob.py
# Path: ProjectHimalaya/UpdateFiles.py
# Standard: AIDEV-PascalCase-1.7
# Created: 2025-06-05
# Last Modified: 2025-06-26  17:45 PM
"""
Description: Clive's Job – Himalaya-standard update/move/archive utility.
Processes Updates folder, reads header for intended path, enforces PascalCase for all
created directories and files (unless ecosystem exception), archives old copies,
generates audit/status report, with full error handling, logging, and audit trail.

Fixed: Now ignores base directory from header paths and uses relative paths from current directory.
Fixed: Regex now handles both comment-style (# Path:) and docstring-style (Path:) headers.
Fixed: Better handling of absolute paths with leading slashes.
"""

import os
import re
import shutil
import logging
from datetime import datetime

# --- CONSTANTS ---
UPDATES_DIR = 'Updates'
ARCHIVE_DIR = 'Archive'
DOCS_BASE = 'Docs'
DOCS_UPDATES = os.path.join(DOCS_BASE, 'Updates')
DATE_FMT = "%Y-%m-%d"
TS_FMT = "%Y-%m-%d_%H-%M-%S"

logging.basicConfig(
    level=logging.INFO,
    format='[CliveJob] %(levelname)s: %(message)s'
)

def ToPascalCase(Segment: str) -> str:
    """
    Converts any file or directory segment to Himalaya PascalCase.
    Preserves extension (lowercase), applies PascalCase to base.
    Preserves already-good PascalCase filenames.
    """
    # Ecosystem exceptions
    if Segment in ('__init__.py', 'setup.py'):
        return Segment

    # Handle file extension (only split at LAST dot)
    if '.' in Segment and not Segment.startswith('.'):
        Base, Ext = Segment.rsplit('.', 1)
        Ext = Ext.lower()
    else:
        Base, Ext = Segment, ''

    # Check if Base is already in good PascalCase format
    if IsAlreadyPascalCase(Base):
        logging.info(f"Preserving already-good PascalCase: '{Base}'")
        return f"{Base}.{Ext}" if Ext else Base

    # Remove all non-alphanumeric separators, PascalCase the rest
    Words = re.split(r'[\s_\-]+', Base)
    Pascal = ''.join(Word.capitalize() for Word in Words if Word)

    return f"{Pascal}.{Ext}" if Ext else Pascal

def IsAlreadyPascalCase(Text: str) -> bool:
    """
    Check if text is already in acceptable PascalCase format.
    Returns True if the text should be preserved as-is.
    """
    # Must start with uppercase letter
    if not Text or not Text[0].isupper():
        return False
    
    # Must be all alphanumeric
    if not Text.isalnum():
        return False
    
    # Check for reasonable PascalCase pattern:
    # - Starts with uppercase
    # - Has at least one more uppercase letter (indicating word boundaries)
    # - No consecutive uppercase letters (avoid ALL_CAPS)
    uppercase_count = sum(1 for c in Text if c.isupper())
    
    # If it's all one word (like "Script"), allow it
    if len(Text) <= 8 and uppercase_count == 1:
        return True
    
    # For longer names, require multiple uppercase letters (PascalCase pattern)
    # but not too many (avoid ALLCAPS)
    if uppercase_count >= 2 and uppercase_count <= len(Text) // 2:
        # Check for consecutive uppercase (avoid "XMLHTTPRequest" style)
        consecutive_upper = any(Text[i].isupper() and Text[i+1].isupper() 
                               for i in range(len(Text)-1))
        if not consecutive_upper:
            return True
    
    return False

def PascalCasePath(Path: str) -> str:
    """
    Applies ToPascalCase to every segment of a path (directories and filename).
    """
    Path = Path.replace('\\', '/')
    Segments = Path.split('/')
    PascalSegments = [ToPascalCase(Segment) for Segment in Segments if Segment]
    return '/'.join(PascalSegments)

def ReadHeaderTargetPath(FilePath: str) -> str:
    """
    Extracts intended path from file header ('Path: ...'), removes base directory,
    and PascalCases the remaining relative path.
    
    Example: 'Path: ProjectHimalaya/CliveJob.py' becomes './CliveJob.py'
    Example: 'Path: /BowersWorld-com/SetupSearchSystem_v2.py' becomes './SetupSearchSystem_v2.py'
    """
    try:
        with open(FilePath, 'r', encoding='utf-8') as File:
            for _ in range(15):  # Check first 15 lines for header (docstrings can be longer)
                Line = File.readline()
                if not Line:  # End of file
                    break
                    
                # Match both comment-style and docstring-style paths
                # Handles: # Path: ... OR Path: ... (without #)
                Match = re.match(r'(?:#\s*)?Path:\s*(.+)', Line.strip())
                if Match:
                    FullPath = Match.group(1).strip()
                    logging.info(f"Found header path: '{FullPath}' in {FilePath}")
                    
                    # Remove base directory and use relative path
                    RelativePath = StripBaseDirectory(FullPath)
                    
                    if RelativePath:
                        FinalPath = PascalCasePath(RelativePath)
                        logging.info(f"Processed path: '{FullPath}' -> '{RelativePath}' -> '{FinalPath}'")
                        return FinalPath
                    else:
                        logging.warning(f"Empty path after stripping base directory from: {FullPath}")
                        return None
    except Exception as Error:
        logging.warning(f"Error reading header from {FilePath}: {Error}")
    return None

def StripBaseDirectory(Path: str) -> str:
    """
    Removes the base directory from a path, returning the relative path.
    Handles both relative and absolute paths.
    
    Examples:
    - 'ProjectHimalaya/CliveJob.py' -> 'CliveJob.py'
    - '/BowersWorld-com/SetupSearchSystem_v2.py' -> 'SetupSearchSystem_v2.py' 
    - 'SomeProject/Scripts/AutoUpdate.py' -> 'Scripts/AutoUpdate.py'
    - 'SingleFile.py' -> 'SingleFile.py'
    """
    # Normalize path separators and remove leading/trailing slashes
    Path = Path.replace('\\', '/').strip('/')
    
    # Split into segments
    Segments = [Segment for Segment in Path.split('/') if Segment]
    
    if len(Segments) <= 1:
        # If only one segment (filename only), return as-is
        return Path
    else:
        # Remove first segment (base directory) and rejoin
        RelativeSegments = Segments[1:]
        RelativePath = '/'.join(RelativeSegments)
        logging.info(f"Stripped base directory: '{Path}' -> '{RelativePath}'")
        return RelativePath

def ArchiveExisting(TargetPath: str) -> str:
    """
    If file exists, moves it to Archive dir (PascalCase), adds timestamp.
    """
    if os.path.exists(TargetPath):
        ArchiveDir = os.path.join(ARCHIVE_DIR, os.path.dirname(TargetPath))
        os.makedirs(ArchiveDir, exist_ok=True)
        BaseName = os.path.basename(TargetPath)
        TimeStamp = datetime.now().strftime(TS_FMT)
        if '.' in BaseName and not BaseName.startswith('.'):
            Base, Ext = BaseName.rsplit('.', 1)
            Ext = Ext.lower()
        else:
            Base, Ext = BaseName, ''
        ArchiveName = f"{ToPascalCase(Base)}_{TimeStamp}{'.' + Ext if Ext else ''}"
        ArchivePath = os.path.join(ArchiveDir, ArchiveName)
        shutil.move(TargetPath, ArchivePath)
        logging.info(f"Archived old file: {TargetPath} → {ArchivePath}")
        return ArchivePath
    return None

def MoveOrCopyFile(SourcePath: str, DestPath: str) -> None:
    """
    Moves file, archiving old if needed, ensuring PascalCase on all dirs/files.
    """
    # Ensure destination directory exists
    DestDir = os.path.dirname(DestPath)
    if DestDir:  # Only create if there's a directory component
        os.makedirs(DestDir, exist_ok=True)
    
    # Archive existing file if it exists
    ArchiveExisting(DestPath)
    
    # Move the file
    shutil.move(SourcePath, DestPath)
    logging.info(f"Moved: {SourcePath} → {DestPath}")

def ProcessUpdates() -> None:
    """
    Processes all files in Updates folder with full Himalaya + PascalCase enforcement.
    Now correctly handles relative paths by stripping base directories from headers.
    """
    Today = datetime.now().strftime(DATE_FMT)
    StatusEntries = []
    os.makedirs(DOCS_UPDATES, exist_ok=True)

    # Check if Updates directory exists
    if not os.path.exists(UPDATES_DIR):
        logging.warning(f"Updates directory '{UPDATES_DIR}' does not exist!")
        return

    for FileName in os.listdir(UPDATES_DIR):
        SourcePath = os.path.join(UPDATES_DIR, FileName)
        if not os.path.isfile(SourcePath):
            continue
            
        HeaderPath = ReadHeaderTargetPath(SourcePath)
        FileExt = os.path.splitext(FileName)[1].lower()
        Status = {'File': FileName, 'Result': '', 'Detail': ''}
        
        try:
            # .md/.txt: move to Docs/YYYY-MM-DD/ (original name for doc provenance)
            if FileExt in ['.md', '.txt']:
                DocsDayDir = os.path.join(DOCS_BASE, Today)
                DestPath = os.path.join(DocsDayDir, FileName)
                MoveOrCopyFile(SourcePath, DestPath)
                Status['Result'] = 'Moved to Docs (dated, original filename)'
                Status['Detail'] = DestPath
                
            elif HeaderPath:
                # Use the relative path (base directory already stripped)
                DestPath = HeaderPath
                MoveOrCopyFile(SourcePath, DestPath)
                Status['Result'] = 'Moved by header path (base directory stripped, PascalCase applied)'
                Status['Detail'] = DestPath
                
            else:
                Status['Result'] = 'Skipped (no header path, not doc)'
                Status['Detail'] = f"Kept in: {SourcePath}"
                logging.warning(f"Skipped: {FileName} (no header path and not .md/.txt)")
                
        except Exception as Error:
            Status['Result'] = 'Error'
            Status['Detail'] = str(Error)
            logging.error(f"Failed processing {FileName}: {Error}")
            
        StatusEntries.append(Status)

    # Write status report
    ReportTimeStamp = datetime.now().strftime(TS_FMT)
    ReportPath = os.path.join(DOCS_UPDATES, f'Updates_{ReportTimeStamp}.md')
    
    with open(ReportPath, 'w', encoding='utf-8') as Report:
        Report.write(f"# Updates Status Report — {ReportTimeStamp}\n\n")
        Report.write(f"**Total files processed:** {len(StatusEntries)}\n\n")
        
        # Summary counts
        Moved = sum(1 for entry in StatusEntries if 'Moved' in entry['Result'])
        Skipped = sum(1 for entry in StatusEntries if 'Skipped' in entry['Result'])
        Errors = sum(1 for entry in StatusEntries if 'Error' in entry['Result'])
        
        Report.write(f"**Summary:**\n")
        Report.write(f"- ✅ Moved: {Moved}\n")
        Report.write(f"- ⏭️ Skipped: {Skipped}\n")
        Report.write(f"- ❌ Errors: {Errors}\n\n")
        Report.write(f"**Details:**\n\n")
        
        for Entry in StatusEntries:
            # Add emoji based on result
            if 'Moved' in Entry['Result']:
                Emoji = '✅'
            elif 'Skipped' in Entry['Result']:
                Emoji = '⏭️'
            elif 'Error' in Entry['Result']:
                Emoji = '❌'
            else:
                Emoji = '❓'
                
            Report.write(f"- {Emoji} **{Entry['File']}**: {Entry['Result']}  \n")
            Report.write(f"    `{Entry['Detail']}`\n\n")
            
    print(f"\n[CliveJob] Status report written: {ReportPath}")
    print(f"[CliveJob] Summary - Moved: {Moved}, Skipped: {Skipped}, Errors: {Errors}")

if __name__ == "__main__":
    print("[CliveJob] Himalaya file processor starting...")
    print("[CliveJob] Fixed version - now strips base directories from header paths")
    ProcessUpdates()
    print("[CliveJob] All done. Review status report for details.")

================
File: Updates/..Old/firebase_auth_system (1).html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Firebase Auth - Anderson's Library</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .auth-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 15px;
            max-width: 450px;
            width: 90%;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .header h1 {
            color: #ffd93d;
            margin-bottom: 0.5rem;
            font-size: 2rem;
        }

        .header p {
            opacity: 0.9;
            font-size: 0.9rem;
        }

        .auth-tabs {
            display: flex;
            margin-bottom: 2rem;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 0.25rem;
        }

        .tab-button {
            flex: 1;
            padding: 0.75rem;
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            border-radius: 7px;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .tab-button.active {
            background: rgba(255, 217, 61, 0.2);
            color: #ffd93d;
        }

        .auth-form {
            display: none;
        }

        .auth-form.active {
            display: block;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #ffd93d;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 1rem;
        }

        .form-group input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .form-row {
            display: flex;
            gap: 1rem;
        }

        .form-row .form-group {
            flex: 1;
        }

        .submit-btn {
            width: 100%;
            padding: 1rem;
            background: linear-gradient(45deg, #ffd93d, #ff6b6b);
            color: #1e3c72;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 1rem;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 217, 61, 0.4);
        }

        .submit-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .google-btn {
            width: 100%;
            padding: 1rem;
            background: white;
            color: #333;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .google-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .divider {
            text-align: center;
            margin: 1.5rem 0;
            position: relative;
        }

        .divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background: rgba(255, 255, 255, 0.3);
        }

        .divider span {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            padding: 0 1rem;
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
        }

        .checkbox-group {
            display: flex;
            align-items: flex-start;
            gap: 0.5rem;
            margin-bottom: 1.5rem;
        }

        .checkbox-group input[type="checkbox"] {
            width: auto;
            margin-top: 0.2rem;
        }

        .checkbox-group label {
            margin-bottom: 0;
            font-size: 0.9rem;
            line-height: 1.4;
        }

        .message {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            font-weight: 500;
            text-align: center;
        }

        .message.success {
            background: rgba(46, 213, 115, 0.2);
            border: 1px solid rgba(46, 213, 115, 0.5);
            color: #2ed573;
        }

        .message.error {
            background: rgba(255, 107, 107, 0.2);
            border: 1px solid rgba(255, 107, 107, 0.5);
            color: #ff6b6b;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 2rem;
        }

        .spinner {
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 3px solid #ffd93d;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .footer {
            text-align: center;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid rgba(255, 255, 255, 0.2);
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .status {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 217, 61, 0.9);
            color: #1e3c72;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        @media (max-width: 480px) {
            .auth-container {
                margin: 1rem;
                padding: 1.5rem;
            }

            .form-row {
                flex-direction: column;
                gap: 0;
            }

            .header h1 {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="status">🔥 Firebase Ready</div>

    <div class="auth-container">
        <div class="header">
            <h1>📚 Anderson's Library</h1>
            <p>Secure access to thousands of digital resources</p>
        </div>

        <div class="auth-tabs">
            <button class="tab-button active" onclick="switchTab('login')">Sign In</button>
            <button class="tab-button" onclick="switchTab('register')">Register</button>
        </div>

        <div id="messageContainer"></div>

        <!-- Login Form -->
        <form id="loginForm" class="auth-form active">
            <div class="form-group">
                <label for="loginEmail">Email Address</label>
                <input type="email" id="loginEmail" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password</label>
                <input type="password" id="loginPassword" placeholder="Enter your password" required>
            </div>
            <button type="submit" class="submit-btn">Sign In to Library</button>
            
            <div class="divider"><span>or</span></div>
            
            <button type="button" class="google-btn" onclick="signInWithGoogle()">
                <svg width="18" height="18" viewBox="0 0 24 24">
                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Continue with Google
            </button>
            
            <div style="text-align: center; margin-top: 1rem;">
                <a href="#" onclick="resetPassword()" style="color: #ffd93d; text-decoration: none; font-size: 0.9rem;">Forgot your password?</a>
            </div>
        </form>

        <!-- Registration Form -->
        <form id="registerForm" class="auth-form">
            <div class="form-row">
                <div class="form-group">
                    <label for="firstName">First Name</label>
                    <input type="text" id="firstName" placeholder="First name" required>
                </div>
                <div class="form-group">
                    <label for="lastName">Last Name</label>
                    <input type="text" id="lastName" placeholder="Last name" required>
                </div>
            </div>
            
            <div class="form-group">
                <label for="registerEmail">Email Address</label>
                <input type="email" id="registerEmail" placeholder="your.email@example.com" required>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="registerPassword">Password</label>
                    <input type="password" id="registerPassword" placeholder="Min 8 characters" required>
                </div>
                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <input type="password" id="confirmPassword" placeholder="Confirm password" required>
                </div>
            </div>
            
            <div class="form-group">
                <label for="organization">Organization (Optional)</label>
                <input type="text" id="organization" placeholder="University, Company, etc.">
            </div>
            
            <div class="form-group">
                <label for="accessReason">Reason for Access</label>
                <select id="accessReason" required>
                    <option value="">Select your primary purpose</option>
                    <option value="Academic Research">Academic Research</option>
                    <option value="Professional Development">Professional Development</option>
                    <option value="Personal Learning">Personal Learning</option>
                    <option value="Teaching">Teaching</option>
                    <option value="Writing/Publishing">Writing/Publishing</option>
                    <option value="Other">Other</option>
                </select>
            </div>
            
            <div class="checkbox-group">
                <input type="checkbox" id="agreeTerms" required>
                <label for="agreeTerms">I agree to the <a href="#" onclick="showTerms()" style="color: #ffd93d;">Terms of Service</a> and <a href="#" onclick="showPrivacy()" style="color: #ffd93d;">Privacy Policy</a></label>
            </div>
            
            <div class="checkbox-group">
                <input type="checkbox" id="emailUpdates">
                <label for="emailUpdates">I'd like to receive email updates about new additions to the library</label>
            </div>
            
            <button type="submit" class="submit-btn">Create Account</button>
            
            <div class="divider"><span>or</span></div>
            
            <button type="button" class="google-btn" onclick="signInWithGoogle()">
                <svg width="18" height="18" viewBox="0 0 24 24">
                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Sign up with Google
            </button>
        </form>

        <!-- Loading State -->
        <div id="loadingIndicator" class="loading">
            <div class="spinner"></div>
            <p>Connecting to Anderson's Library...</p>
        </div>

        <div class="footer">
            <p>© 2025 Project Himalaya | Powered by BowersWorld.com</p>
        </div>
    </div>

    <!-- Firebase SDK -->
    <script type="module">
        // Import Firebase modules
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
        import { 
            getAuth, 
            signInWithEmailAndPassword, 
            createUserWithEmailAndPassword,
            signInWithPopup,
            GoogleAuthProvider,
            sendEmailVerification,
            sendPasswordResetEmail,
            onAuthStateChanged
        } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';

        // Firebase configuration - REPLACE WITH YOUR ACTUAL CONFIG
        // Get this from Firebase Console → Project Settings → General → Your apps
        const firebaseConfig = {
            apiKey: "AIzaSyC-REPLACE-WITH-YOUR-ACTUAL-API-KEY",
            authDomain: "anderson-library-XXXXX.firebaseapp.com",
            projectId: "anderson-library-XXXXX",
            storageBucket: "anderson-library-XXXXX.appspot.com",
            messagingSenderId: "123456789012",
            appId: "1:123456789012:web:abcdef123456789"
        };

        // Validate configuration
        if (firebaseConfig.apiKey.includes('REPLACE') || firebaseConfig.apiKey === 'your-api-key-here') {
            console.error('❌ Firebase configuration not updated! Please replace with your actual config.');
            showMessage('Configuration Error: Please update Firebase credentials', 'error');
        }

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const provider = new GoogleAuthProvider();

        // Make auth available globally
        window.firebaseAuth = auth;
        window.googleProvider = provider;

        // Auth state observer
        onAuthStateChanged(auth, (user) => {
            if (user) {
                console.log('User signed in:', user.email);
                // Redirect to library or dashboard
                redirectToLibrary(user);
            } else {
                console.log('User signed out');
            }
        });

        console.log('🔥 Firebase initialized successfully');
    </script>

    <script>
        // Global functions for form handling
        function switchTab(tab) {
            // Update tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            // Update forms
            document.querySelectorAll('.auth-form').forEach(form => form.classList.remove('active'));
            document.getElementById(tab + 'Form').classList.add('active');
            
            // Clear messages
            clearMessages();
        }

        function showMessage(message, type = 'info') {
            const container = document.getElementById('messageContainer');
            container.innerHTML = `<div class="message ${type}">${message}</div>`;
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                container.innerHTML = '';
            }, 5000);
        }

        function clearMessages() {
            document.getElementById('messageContainer').innerHTML = '';
        }

        function showLoading(show) {
            const loading = document.getElementById('loadingIndicator');
            const forms = document.querySelectorAll('.auth-form');
            
            if (show) {
                loading.style.display = 'block';
                forms.forEach(form => form.style.display = 'none');
            } else {
                loading.style.display = 'none';
                forms.forEach(form => form.style.display = 'block');
            }
        }

        // Enhanced error handling for form validation
        function isValidPassword(password) {
            if (!password || password.length < 8) return false;
            return /[A-Z]/.test(password) && 
                   /[a-z]/.test(password) && 
                   /[0-9]/.test(password);
        }

        // Safe form data extraction
        function getFormData(form) {
            const formData = new FormData(form);
            const data = {};
            
            for (let [key, value] of formData.entries()) {
                data[key] = value || '';
            }
            
            return data;
        }

        // Sign in with Google
        async function signInWithGoogle() {
            showLoading(true);
            
            try {
                const { signInWithPopup } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                const result = await signInWithPopup(window.firebaseAuth, window.googleProvider);
                
                showMessage('Successfully signed in with Google!', 'success');
                
                // Save user to database
                await saveUserToDatabase({
                    userID: result.user.uid,
                    email: result.user.email,
                    fullName: result.user.displayName,
                    provider: 'google',
                    role: 'guest',
                    status: 'pending',
                    registrationDate: new Date().toISOString()
                });
                
            } catch (error) {
                console.error('Google sign-in error:', error);
                showMessage('Google sign-in failed: ' + error.message, 'error');
            } finally {
                showLoading(false);
            }
        }

        // Password reset
        async function resetPassword() {
            const email = prompt('Enter your email address for password reset:');
            if (!email) return;
            
            try {
                const { sendPasswordResetEmail } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                await sendPasswordResetEmail(window.firebaseAuth, email);
                showMessage('Password reset email sent! Check your inbox.', 'success');
            } catch (error) {
                showMessage('Error sending reset email: ' + error.message, 'error');
            }
        }

        // Save user to Google Sheets (you'll need to implement this)
        async function saveUserToDatabase(userData) {
            // This will connect to your Google Sheets API
            console.log('Saving user to database:', userData);
            
            // Implement Google Sheets API call here
            // For now, just log the data
        }

        // Redirect to library
        function redirectToLibrary(user) {
            // Check user status and redirect appropriately
            console.log('Redirecting user to library:', user.email);
            
            // For now, just show a success message
            showMessage(`Welcome ${user.displayName || user.email}! Redirecting to library...`, 'success');
            
            // Actual redirect would be:
            // window.location.href = '/library/app/library.html';
        }

        // Terms and Privacy
        function showTerms() {
            alert('Terms of Service\n\nBy using Anderson\'s Library, you agree to:\n\n• Use the library for educational and research purposes only\n• Not share your account credentials\n• Respect copyright and licensing terms\n• Report any technical issues or concerns\n\nFull terms available at: bowersworld.com/terms');
        }

        function showPrivacy() {
            alert('Privacy Policy\n\nWe protect your privacy by:\n\n• Using Firebase for secure authentication\n• Storing minimal personal data\n• Not sharing information with third parties\n• Allowing account deletion at any time\n\nFull privacy policy at: bowersworld.com/privacy');
        }

        // Form submissions
        document.getElementById('loginForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoading(true);
            
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            try {
                const { signInWithEmailAndPassword } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                const userCredential = await signInWithEmailAndPassword(window.firebaseAuth, email, password);
                
                showMessage('Successfully signed in!', 'success');
                
            } catch (error) {
                console.error('Login error:', error);
                let errorMessage = 'Login failed. Please check your credentials.';
                
                if (error.code === 'auth/user-not-found') {
                    errorMessage = 'No account found with this email address.';
                } else if (error.code === 'auth/wrong-password') {
                    errorMessage = 'Incorrect password.';
                } else if (error.code === 'auth/invalid-email') {
                    errorMessage = 'Invalid email address.';
                }
                
                showMessage(errorMessage, 'error');
            } finally {
                showLoading(false);
            }
        });

        document.getElementById('registerForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoading(true);
            
            try {
                const userData = getFormData(e.target);
                
                // Enhanced validation
                if (!userData.registerEmail || !userData.registerPassword) {
                    throw new Error('Email and password are required');
                }
                
                if (userData.registerPassword !== userData.confirmPassword) {
                    throw new Error('Passwords do not match');
                }
                
                if (!isValidPassword(userData.registerPassword)) {
                    throw new Error('Password must be at least 8 characters with uppercase, lowercase, and numbers');
                }
                
                if (!userData.agreeTerms) {
                    throw new Error('You must agree to the terms of service');
                }
                
                const { createUserWithEmailAndPassword, sendEmailVerification } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                
                const userCredential = await createUserWithEmailAndPassword(
                    window.firebaseAuth, 
                    userData.registerEmail, 
                    userData.registerPassword
                );
                
                // Send email verification
                await sendEmailVerification(userCredential.user);
                
                // Save to database (implement this function)
                await saveUserToDatabase({
                    userID: userCredential.user.uid,
                    email: userData.registerEmail,
                    fullName: `${userData.firstName || ''} ${userData.lastName || ''}`.trim(),
                    firstName: userData.firstName || '',
                    lastName: userData.lastName || '',
                    organization: userData.organization || '',
                    accessReason: userData.accessReason || '',
                    emailUpdates: userData.emailUpdates === 'on',
                    role: 'guest',
                    status: 'pending',
                    registrationDate: new Date().toISOString()
                });
                
                showMessage('Account created successfully! Please check your email for verification.', 'success');
                e.target.reset();
                
            } catch (error) {
                console.error('Registration error:', error);
                let errorMessage = 'Registration failed: ' + error.message;
                
                // Handle specific Firebase errors
                switch (error.code) {
                    case 'auth/email-already-in-use':
                        errorMessage = 'An account with this email already exists.';
                        break;
                    case 'auth/weak-password':
                        errorMessage = 'Password is too weak.';
                        break;
                    case 'auth/invalid-email':
                        errorMessage = 'Invalid email address.';
                        break;
                    case 'auth/network-request-failed':
                        errorMessage = 'Network error. Please check your connection.';
                        break;
                }
                
                showMessage(errorMessage, 'error');
            } finally {
                showLoading(false);
            }
        });

        // Initialize on load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Authentication system ready');
            
            // Check if user is already signed in
            if (window.firebaseAuth && window.firebaseAuth.currentUser) {
                redirectToLibrary(window.firebaseAuth.currentUser);
            }
        });
    </script>
</body>
</html>
================
File: Updates/..Old/firebase_auth_system (2).html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Firebase Auth - Anderson's Library</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .auth-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 15px;
            max-width: 450px;
            width: 90%;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .header h1 {
            color: #ffd93d;
            margin-bottom: 0.5rem;
            font-size: 2rem;
        }

        .header p {
            opacity: 0.9;
            font-size: 0.9rem;
        }

        .auth-tabs {
            display: flex;
            margin-bottom: 2rem;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 0.25rem;
        }

        .tab-button {
            flex: 1;
            padding: 0.75rem;
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            border-radius: 7px;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .tab-button.active {
            background: rgba(255, 217, 61, 0.2);
            color: #ffd93d;
        }

        .auth-form {
            display: none;
        }

        .auth-form.active {
            display: block;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #ffd93d;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 1rem;
        }

        .form-group input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .form-row {
            display: flex;
            gap: 1rem;
        }

        .form-row .form-group {
            flex: 1;
        }

        .submit-btn {
            width: 100%;
            padding: 1rem;
            background: linear-gradient(45deg, #ffd93d, #ff6b6b);
            color: #1e3c72;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 1rem;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 217, 61, 0.4);
        }

        .submit-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .google-btn {
            width: 100%;
            padding: 1rem;
            background: white;
            color: #333;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .google-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .divider {
            text-align: center;
            margin: 1.5rem 0;
            position: relative;
        }

        .divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background: rgba(255, 255, 255, 0.3);
        }

        .divider span {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            padding: 0 1rem;
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
        }

        .checkbox-group {
            display: flex;
            align-items: flex-start;
            gap: 0.5rem;
            margin-bottom: 1.5rem;
        }

        .checkbox-group input[type="checkbox"] {
            width: auto;
            margin-top: 0.2rem;
        }

        .checkbox-group label {
            margin-bottom: 0;
            font-size: 0.9rem;
            line-height: 1.4;
        }

        .message {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            font-weight: 500;
            text-align: center;
        }

        .message.success {
            background: rgba(46, 213, 115, 0.2);
            border: 1px solid rgba(46, 213, 115, 0.5);
            color: #2ed573;
        }

        .message.error {
            background: rgba(255, 107, 107, 0.2);
            border: 1px solid rgba(255, 107, 107, 0.5);
            color: #ff6b6b;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 2rem;
        }

        .spinner {
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 3px solid #ffd93d;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .footer {
            text-align: center;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid rgba(255, 255, 255, 0.2);
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .status {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 217, 61, 0.9);
            color: #1e3c72;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        @media (max-width: 480px) {
            .auth-container {
                margin: 1rem;
                padding: 1.5rem;
            }

            .form-row {
                flex-direction: column;
                gap: 0;
            }

            .header h1 {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="status">🔥 Firebase Ready</div>

    <div class="auth-container">
        <div class="header">
            <h1>📚 Anderson's Library</h1>
            <p>Secure access to thousands of digital resources</p>
        </div>

        <div class="auth-tabs">
            <button class="tab-button active" onclick="switchTab('login')">Sign In</button>
            <button class="tab-button" onclick="switchTab('register')">Register</button>
        </div>

        <div id="messageContainer"></div>

        <!-- Login Form -->
        <form id="loginForm" class="auth-form active">
            <div class="form-group">
                <label for="loginEmail">Email Address</label>
                <input type="email" id="loginEmail" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password</label>
                <input type="password" id="loginPassword" placeholder="Enter your password" required>
            </div>
            <button type="submit" class="submit-btn">Sign In to Library</button>
            
            <div class="divider"><span>or</span></div>
            
            <button type="button" class="google-btn" onclick="signInWithGoogle()">
                <svg width="18" height="18" viewBox="0 0 24 24">
                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Continue with Google
            </button>
            
            <div style="text-align: center; margin-top: 1rem;">
                <a href="#" onclick="resetPassword()" style="color: #ffd93d; text-decoration: none; font-size: 0.9rem;">Forgot your password?</a>
            </div>
        </form>

        <!-- Registration Form -->
        <form id="registerForm" class="auth-form">
            <div class="form-row">
                <div class="form-group">
                    <label for="firstName">First Name</label>
                    <input type="text" id="firstName" placeholder="First name" required>
                </div>
                <div class="form-group">
                    <label for="lastName">Last Name</label>
                    <input type="text" id="lastName" placeholder="Last name" required>
                </div>
            </div>
            
            <div class="form-group">
                <label for="registerEmail">Email Address</label>
                <input type="email" id="registerEmail" placeholder="your.email@example.com" required>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="registerPassword">Password</label>
                    <input type="password" id="registerPassword" placeholder="Min 8 characters" required>
                </div>
                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <input type="password" id="confirmPassword" placeholder="Confirm password" required>
                </div>
            </div>
            
            <div class="form-group">
                <label for="organization">Organization (Optional)</label>
                <input type="text" id="organization" placeholder="University, Company, etc.">
            </div>
            
            <div class="form-group">
                <label for="accessReason">Reason for Access</label>
                <select id="accessReason" required>
                    <option value="">Select your primary purpose</option>
                    <option value="Academic Research">Academic Research</option>
                    <option value="Professional Development">Professional Development</option>
                    <option value="Personal Learning">Personal Learning</option>
                    <option value="Teaching">Teaching</option>
                    <option value="Writing/Publishing">Writing/Publishing</option>
                    <option value="Other">Other</option>
                </select>
            </div>
            
            <div class="checkbox-group">
                <input type="checkbox" id="agreeTerms" required>
                <label for="agreeTerms">I agree to the <a href="#" onclick="showTerms()" style="color: #ffd93d;">Terms of Service</a> and <a href="#" onclick="showPrivacy()" style="color: #ffd93d;">Privacy Policy</a></label>
            </div>
            
            <div class="checkbox-group">
                <input type="checkbox" id="emailUpdates">
                <label for="emailUpdates">I'd like to receive email updates about new additions to the library</label>
            </div>
            
            <button type="submit" class="submit-btn">Create Account</button>
            
            <div class="divider"><span>or</span></div>
            
            <button type="button" class="google-btn" onclick="signInWithGoogle()">
                <svg width="18" height="18" viewBox="0 0 24 24">
                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Sign up with Google
            </button>
        </form>

        <!-- Loading State -->
        <div id="loadingIndicator" class="loading">
            <div class="spinner"></div>
            <p>Connecting to Anderson's Library...</p>
        </div>

        <div class="footer">
            <p>© 2025 Project Himalaya | Powered by BowersWorld.com</p>
        </div>
    </div>

    <!-- Firebase SDK -->
    <script type="module">
        // Import Firebase modules
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
        import { 
            getAuth, 
            signInWithEmailAndPassword, 
            createUserWithEmailAndPassword,
            signInWithPopup,
            GoogleAuthProvider,
            sendEmailVerification,
            sendPasswordResetEmail,
            onAuthStateChanged
        } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';

        // Firebase configuration - BowersWorld Digital Alexandria
        const firebaseConfig = {
            apiKey: "AIzaSyB2LPmuXM2WZp6aB6vrSxs5NFNP4CIVApE",
            authDomain: "bowersworld-digital-alexandria.firebaseapp.com",
            projectId: "bowersworld-digital-alexandria",
            storageBucket: "bowersworld-digital-alexandria.appspot.com",
            messagingSenderId: "486786884647",
            appId: "1:486786884647:web:85806a519fe582e6fd5a02"
        };

        // Configuration validation
        console.log('🔥 Using Firebase config for:', firebaseConfig.projectId);

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const provider = new GoogleAuthProvider();

        // Make auth available globally
        window.firebaseAuth = auth;
        window.googleProvider = provider;

        // Auth state observer
        onAuthStateChanged(auth, (user) => {
            if (user) {
                console.log('User signed in:', user.email);
                // Redirect to library or dashboard
                redirectToLibrary(user);
            } else {
                console.log('User signed out');
            }
        });

        console.log('🔥 Firebase initialized successfully');
    </script>

    <script>
        // Global functions for form handling
        function switchTab(tab) {
            // Update tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            // Update forms
            document.querySelectorAll('.auth-form').forEach(form => form.classList.remove('active'));
            document.getElementById(tab + 'Form').classList.add('active');
            
            // Clear messages
            clearMessages();
        }

        function showMessage(message, type = 'info') {
            const container = document.getElementById('messageContainer');
            container.innerHTML = `<div class="message ${type}">${message}</div>`;
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                container.innerHTML = '';
            }, 5000);
        }

        function clearMessages() {
            document.getElementById('messageContainer').innerHTML = '';
        }

        function showLoading(show) {
            const loading = document.getElementById('loadingIndicator');
            const forms = document.querySelectorAll('.auth-form');
            
            if (show) {
                loading.style.display = 'block';
                forms.forEach(form => form.style.display = 'none');
            } else {
                loading.style.display = 'none';
                forms.forEach(form => form.style.display = 'block');
            }
        }

        // Enhanced error handling for form validation
        function isValidPassword(password) {
            if (!password || password.length < 8) return false;
            return /[A-Z]/.test(password) && 
                   /[a-z]/.test(password) && 
                   /[0-9]/.test(password);
        }

        // Safe form data extraction
        function getFormData(form) {
            const formData = new FormData(form);
            const data = {};
            
            for (let [key, value] of formData.entries()) {
                data[key] = value || '';
            }
            
            return data;
        }

        // Sign in with Google
        async function signInWithGoogle() {
            showLoading(true);
            
            try {
                const { signInWithPopup } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                const result = await signInWithPopup(window.firebaseAuth, window.googleProvider);
                
                showMessage('Successfully signed in with Google!', 'success');
                
                // Save user to database
                await saveUserToDatabase({
                    userID: result.user.uid,
                    email: result.user.email,
                    fullName: result.user.displayName,
                    provider: 'google',
                    role: 'guest',
                    status: 'pending',
                    registrationDate: new Date().toISOString()
                });
                
            } catch (error) {
                console.error('Google sign-in error:', error);
                showMessage('Google sign-in failed: ' + error.message, 'error');
            } finally {
                showLoading(false);
            }
        }

        // Password reset
        async function resetPassword() {
            const email = prompt('Enter your email address for password reset:');
            if (!email) return;
            
            try {
                const { sendPasswordResetEmail } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                await sendPasswordResetEmail(window.firebaseAuth, email);
                showMessage('Password reset email sent! Check your inbox.', 'success');
            } catch (error) {
                showMessage('Error sending reset email: ' + error.message, 'error');
            }
        }

        // Save user to Google Sheets (you'll need to implement this)
        async function saveUserToDatabase(userData) {
            // This will connect to your Google Sheets API
            console.log('Saving user to database:', userData);
            
            // Implement Google Sheets API call here
            // For now, just log the data
        }

        // Redirect to library
        function redirectToLibrary(user) {
            // Check user status and redirect appropriately
            console.log('Redirecting user to library:', user.email);
            
            // For now, just show a success message
            showMessage(`Welcome ${user.displayName || user.email}! Redirecting to library...`, 'success');
            
            // Actual redirect would be:
            // window.location.href = '/library/app/library.html';
        }

        // Terms and Privacy
        function showTerms() {
            alert('Terms of Service\n\nBy using Anderson\'s Library, you agree to:\n\n• Use the library for educational and research purposes only\n• Not share your account credentials\n• Respect copyright and licensing terms\n• Report any technical issues or concerns\n\nFull terms available at: bowersworld.com/terms');
        }

        function showPrivacy() {
            alert('Privacy Policy\n\nWe protect your privacy by:\n\n• Using Firebase for secure authentication\n• Storing minimal personal data\n• Not sharing information with third parties\n• Allowing account deletion at any time\n\nFull privacy policy at: bowersworld.com/privacy');
        }

        // Form submissions
        document.getElementById('loginForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoading(true);
            
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            try {
                const { signInWithEmailAndPassword } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                const userCredential = await signInWithEmailAndPassword(window.firebaseAuth, email, password);
                
                showMessage('Successfully signed in!', 'success');
                
            } catch (error) {
                console.error('Login error:', error);
                let errorMessage = 'Login failed. Please check your credentials.';
                
                if (error.code === 'auth/user-not-found') {
                    errorMessage = 'No account found with this email address.';
                } else if (error.code === 'auth/wrong-password') {
                    errorMessage = 'Incorrect password.';
                } else if (error.code === 'auth/invalid-email') {
                    errorMessage = 'Invalid email address.';
                }
                
                showMessage(errorMessage, 'error');
            } finally {
                showLoading(false);
            }
        });

        document.getElementById('registerForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoading(true);
            
            try {
                const userData = getFormData(e.target);
                
                // Enhanced validation
                if (!userData.registerEmail || !userData.registerPassword) {
                    throw new Error('Email and password are required');
                }
                
                if (userData.registerPassword !== userData.confirmPassword) {
                    throw new Error('Passwords do not match');
                }
                
                if (!isValidPassword(userData.registerPassword)) {
                    throw new Error('Password must be at least 8 characters with uppercase, lowercase, and numbers');
                }
                
                if (!userData.agreeTerms) {
                    throw new Error('You must agree to the terms of service');
                }
                
                const { createUserWithEmailAndPassword, sendEmailVerification } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                
                const userCredential = await createUserWithEmailAndPassword(
                    window.firebaseAuth, 
                    userData.registerEmail, 
                    userData.registerPassword
                );
                
                // Send email verification
                await sendEmailVerification(userCredential.user);
                
                // Save to database (implement this function)
                await saveUserToDatabase({
                    userID: userCredential.user.uid,
                    email: userData.registerEmail,
                    fullName: `${userData.firstName || ''} ${userData.lastName || ''}`.trim(),
                    firstName: userData.firstName || '',
                    lastName: userData.lastName || '',
                    organization: userData.organization || '',
                    accessReason: userData.accessReason || '',
                    emailUpdates: userData.emailUpdates === 'on',
                    role: 'guest',
                    status: 'pending',
                    registrationDate: new Date().toISOString()
                });
                
                showMessage('Account created successfully! Please check your email for verification.', 'success');
                e.target.reset();
                
            } catch (error) {
                console.error('Registration error:', error);
                let errorMessage = 'Registration failed: ' + error.message;
                
                // Handle specific Firebase errors
                switch (error.code) {
                    case 'auth/email-already-in-use':
                        errorMessage = 'An account with this email already exists.';
                        break;
                    case 'auth/weak-password':
                        errorMessage = 'Password is too weak.';
                        break;
                    case 'auth/invalid-email':
                        errorMessage = 'Invalid email address.';
                        break;
                    case 'auth/network-request-failed':
                        errorMessage = 'Network error. Please check your connection.';
                        break;
                }
                
                showMessage(errorMessage, 'error');
            } finally {
                showLoading(false);
            }
        });

        // Initialize on load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Authentication system ready');
            
            // Check if user is already signed in
            if (window.firebaseAuth && window.firebaseAuth.currentUser) {
                redirectToLibrary(window.firebaseAuth.currentUser);
            }
        });
    </script>
</body>
</html>
================
File: Updates/..Old/firebase_auth_system.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Firebase Auth - Anderson's Library</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .auth-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 15px;
            max-width: 450px;
            width: 90%;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .header h1 {
            color: #ffd93d;
            margin-bottom: 0.5rem;
            font-size: 2rem;
        }

        .header p {
            opacity: 0.9;
            font-size: 0.9rem;
        }

        .auth-tabs {
            display: flex;
            margin-bottom: 2rem;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 0.25rem;
        }

        .tab-button {
            flex: 1;
            padding: 0.75rem;
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            border-radius: 7px;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .tab-button.active {
            background: rgba(255, 217, 61, 0.2);
            color: #ffd93d;
        }

        .auth-form {
            display: none;
        }

        .auth-form.active {
            display: block;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #ffd93d;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 1rem;
        }

        .form-group input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .form-row {
            display: flex;
            gap: 1rem;
        }

        .form-row .form-group {
            flex: 1;
        }

        .submit-btn {
            width: 100%;
            padding: 1rem;
            background: linear-gradient(45deg, #ffd93d, #ff6b6b);
            color: #1e3c72;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 1rem;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 217, 61, 0.4);
        }

        .submit-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .google-btn {
            width: 100%;
            padding: 1rem;
            background: white;
            color: #333;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .google-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .divider {
            text-align: center;
            margin: 1.5rem 0;
            position: relative;
        }

        .divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background: rgba(255, 255, 255, 0.3);
        }

        .divider span {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            padding: 0 1rem;
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
        }

        .checkbox-group {
            display: flex;
            align-items: flex-start;
            gap: 0.5rem;
            margin-bottom: 1.5rem;
        }

        .checkbox-group input[type="checkbox"] {
            width: auto;
            margin-top: 0.2rem;
        }

        .checkbox-group label {
            margin-bottom: 0;
            font-size: 0.9rem;
            line-height: 1.4;
        }

        .message {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            font-weight: 500;
            text-align: center;
        }

        .message.success {
            background: rgba(46, 213, 115, 0.2);
            border: 1px solid rgba(46, 213, 115, 0.5);
            color: #2ed573;
        }

        .message.error {
            background: rgba(255, 107, 107, 0.2);
            border: 1px solid rgba(255, 107, 107, 0.5);
            color: #ff6b6b;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 2rem;
        }

        .spinner {
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 3px solid #ffd93d;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .footer {
            text-align: center;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid rgba(255, 255, 255, 0.2);
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .status {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 217, 61, 0.9);
            color: #1e3c72;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        @media (max-width: 480px) {
            .auth-container {
                margin: 1rem;
                padding: 1.5rem;
            }

            .form-row {
                flex-direction: column;
                gap: 0;
            }

            .header h1 {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="status">🔥 Firebase Ready</div>

    <div class="auth-container">
        <div class="header">
            <h1>📚 Anderson's Library</h1>
            <p>Secure access to thousands of digital resources</p>
        </div>

        <div class="auth-tabs">
            <button class="tab-button active" onclick="switchTab('login')">Sign In</button>
            <button class="tab-button" onclick="switchTab('register')">Register</button>
        </div>

        <div id="messageContainer"></div>

        <!-- Login Form -->
        <form id="loginForm" class="auth-form active">
            <div class="form-group">
                <label for="loginEmail">Email Address</label>
                <input type="email" id="loginEmail" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password</label>
                <input type="password" id="loginPassword" placeholder="Enter your password" required>
            </div>
            <button type="submit" class="submit-btn">Sign In to Library</button>
            
            <div class="divider"><span>or</span></div>
            
            <button type="button" class="google-btn" onclick="signInWithGoogle()">
                <svg width="18" height="18" viewBox="0 0 24 24">
                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Continue with Google
            </button>
            
            <div style="text-align: center; margin-top: 1rem;">
                <a href="#" onclick="resetPassword()" style="color: #ffd93d; text-decoration: none; font-size: 0.9rem;">Forgot your password?</a>
            </div>
        </form>

        <!-- Registration Form -->
        <form id="registerForm" class="auth-form">
            <div class="form-row">
                <div class="form-group">
                    <label for="firstName">First Name</label>
                    <input type="text" id="firstName" placeholder="First name" required>
                </div>
                <div class="form-group">
                    <label for="lastName">Last Name</label>
                    <input type="text" id="lastName" placeholder="Last name" required>
                </div>
            </div>
            
            <div class="form-group">
                <label for="registerEmail">Email Address</label>
                <input type="email" id="registerEmail" placeholder="your.email@example.com" required>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="registerPassword">Password</label>
                    <input type="password" id="registerPassword" placeholder="Min 8 characters" required>
                </div>
                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <input type="password" id="confirmPassword" placeholder="Confirm password" required>
                </div>
            </div>
            
            <div class="form-group">
                <label for="organization">Organization (Optional)</label>
                <input type="text" id="organization" placeholder="University, Company, etc.">
            </div>
            
            <div class="form-group">
                <label for="accessReason">Reason for Access</label>
                <select id="accessReason" required>
                    <option value="">Select your primary purpose</option>
                    <option value="Academic Research">Academic Research</option>
                    <option value="Professional Development">Professional Development</option>
                    <option value="Personal Learning">Personal Learning</option>
                    <option value="Teaching">Teaching</option>
                    <option value="Writing/Publishing">Writing/Publishing</option>
                    <option value="Other">Other</option>
                </select>
            </div>
            
            <div class="checkbox-group">
                <input type="checkbox" id="agreeTerms" required>
                <label for="agreeTerms">I agree to the <a href="#" onclick="showTerms()" style="color: #ffd93d;">Terms of Service</a> and <a href="#" onclick="showPrivacy()" style="color: #ffd93d;">Privacy Policy</a></label>
            </div>
            
            <div class="checkbox-group">
                <input type="checkbox" id="emailUpdates">
                <label for="emailUpdates">I'd like to receive email updates about new additions to the library</label>
            </div>
            
            <button type="submit" class="submit-btn">Create Account</button>
            
            <div class="divider"><span>or</span></div>
            
            <button type="button" class="google-btn" onclick="signInWithGoogle()">
                <svg width="18" height="18" viewBox="0 0 24 24">
                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Sign up with Google
            </button>
        </form>

        <!-- Loading State -->
        <div id="loadingIndicator" class="loading">
            <div class="spinner"></div>
            <p>Connecting to Anderson's Library...</p>
        </div>

        <div class="footer">
            <p>© 2025 Project Himalaya | Powered by BowersWorld.com</p>
        </div>
    </div>

    <!-- Firebase SDK -->
    <script type="module">
        // Import Firebase modules
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
        import { 
            getAuth, 
            signInWithEmailAndPassword, 
            createUserWithEmailAndPassword,
            signInWithPopup,
            GoogleAuthProvider,
            sendEmailVerification,
            sendPasswordResetEmail,
            onAuthStateChanged
        } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';

        // Firebase configuration - REPLACE WITH YOUR CONFIG
        const firebaseConfig = {
            apiKey: "your-api-key-here",
            authDomain: "your-project.firebaseapp.com",
            projectId: "your-project-id",
            storageBucket: "your-project.appspot.com",
            messagingSenderId: "123456789",
            appId: "your-app-id"
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const provider = new GoogleAuthProvider();

        // Make auth available globally
        window.firebaseAuth = auth;
        window.googleProvider = provider;

        // Auth state observer
        onAuthStateChanged(auth, (user) => {
            if (user) {
                console.log('User signed in:', user.email);
                // Redirect to library or dashboard
                redirectToLibrary(user);
            } else {
                console.log('User signed out');
            }
        });

        console.log('🔥 Firebase initialized successfully');
    </script>

    <script>
        // Global functions for form handling
        function switchTab(tab) {
            // Update tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            // Update forms
            document.querySelectorAll('.auth-form').forEach(form => form.classList.remove('active'));
            document.getElementById(tab + 'Form').classList.add('active');
            
            // Clear messages
            clearMessages();
        }

        function showMessage(message, type = 'info') {
            const container = document.getElementById('messageContainer');
            container.innerHTML = `<div class="message ${type}">${message}</div>`;
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                container.innerHTML = '';
            }, 5000);
        }

        function clearMessages() {
            document.getElementById('messageContainer').innerHTML = '';
        }

        function showLoading(show) {
            const loading = document.getElementById('loadingIndicator');
            const forms = document.querySelectorAll('.auth-form');
            
            if (show) {
                loading.style.display = 'block';
                forms.forEach(form => form.style.display = 'none');
            } else {
                loading.style.display = 'none';
                forms.forEach(form => form.style.display = 'block');
            }
        }

        function isValidPassword(password) {
            return password.length >= 8 && 
                   /[A-Z]/.test(password) && 
                   /[a-z]/.test(password) && 
                   /[0-9]/.test(password);
        }

        // Sign in with Google
        async function signInWithGoogle() {
            showLoading(true);
            
            try {
                const { signInWithPopup } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                const result = await signInWithPopup(window.firebaseAuth, window.googleProvider);
                
                showMessage('Successfully signed in with Google!', 'success');
                
                // Save user to database
                await saveUserToDatabase({
                    userID: result.user.uid,
                    email: result.user.email,
                    fullName: result.user.displayName,
                    provider: 'google',
                    role: 'guest',
                    status: 'pending',
                    registrationDate: new Date().toISOString()
                });
                
            } catch (error) {
                console.error('Google sign-in error:', error);
                showMessage('Google sign-in failed: ' + error.message, 'error');
            } finally {
                showLoading(false);
            }
        }

        // Password reset
        async function resetPassword() {
            const email = prompt('Enter your email address for password reset:');
            if (!email) return;
            
            try {
                const { sendPasswordResetEmail } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                await sendPasswordResetEmail(window.firebaseAuth, email);
                showMessage('Password reset email sent! Check your inbox.', 'success');
            } catch (error) {
                showMessage('Error sending reset email: ' + error.message, 'error');
            }
        }

        // Save user to Google Sheets (you'll need to implement this)
        async function saveUserToDatabase(userData) {
            // This will connect to your Google Sheets API
            console.log('Saving user to database:', userData);
            
            // Implement Google Sheets API call here
            // For now, just log the data
        }

        // Redirect to library
        function redirectToLibrary(user) {
            // Check user status and redirect appropriately
            console.log('Redirecting user to library:', user.email);
            
            // For now, just show a success message
            showMessage(`Welcome ${user.displayName || user.email}! Redirecting to library...`, 'success');
            
            // Actual redirect would be:
            // window.location.href = '/library/app/library.html';
        }

        // Terms and Privacy
        function showTerms() {
            alert('Terms of Service\n\nBy using Anderson\'s Library, you agree to:\n\n• Use the library for educational and research purposes only\n• Not share your account credentials\n• Respect copyright and licensing terms\n• Report any technical issues or concerns\n\nFull terms available at: bowersworld.com/terms');
        }

        function showPrivacy() {
            alert('Privacy Policy\n\nWe protect your privacy by:\n\n• Using Firebase for secure authentication\n• Storing minimal personal data\n• Not sharing information with third parties\n• Allowing account deletion at any time\n\nFull privacy policy at: bowersworld.com/privacy');
        }

        // Form submissions
        document.getElementById('loginForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoading(true);
            
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            try {
                const { signInWithEmailAndPassword } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                const userCredential = await signInWithEmailAndPassword(window.firebaseAuth, email, password);
                
                showMessage('Successfully signed in!', 'success');
                
            } catch (error) {
                console.error('Login error:', error);
                let errorMessage = 'Login failed. Please check your credentials.';
                
                if (error.code === 'auth/user-not-found') {
                    errorMessage = 'No account found with this email address.';
                } else if (error.code === 'auth/wrong-password') {
                    errorMessage = 'Incorrect password.';
                } else if (error.code === 'auth/invalid-email') {
                    errorMessage = 'Invalid email address.';
                }
                
                showMessage(errorMessage, 'error');
            } finally {
                showLoading(false);
            }
        });

        document.getElementById('registerForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoading(true);
            
            const formData = new FormData(e.target);
            const userData = Object.fromEntries(formData.entries());
            
            // Validation
            if (userData.registerPassword !== userData.confirmPassword) {
                showMessage('Passwords do not match.', 'error');
                showLoading(false);
                return;
            }
            
            if (!isValidPassword(userData.registerPassword)) {
                showMessage('Password must be at least 8 characters with uppercase, lowercase, and numbers.', 'error');
                showLoading(false);
                return;
            }
            
            try {
                const { createUserWithEmailAndPassword, sendEmailVerification } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                
                const userCredential = await createUserWithEmailAndPassword(
                    window.firebaseAuth, 
                    userData.registerEmail, 
                    userData.registerPassword
                );
                
                // Send email verification
                await sendEmailVerification(userCredential.user);
                
                // Save to database
                await saveUserToDatabase({
                    userID: userCredential.user.uid,
                    email: userData.registerEmail,
                    fullName: `${userData.firstName} ${userData.lastName}`,
                    firstName: userData.firstName,
                    lastName: userData.lastName,
                    organization: userData.organization,
                    accessReason: userData.accessReason,
                    emailUpdates: userData.emailUpdates === 'on',
                    role: 'guest',
                    status: 'pending',
                    registrationDate: new Date().toISOString()
                });
                
                showMessage('Account created successfully! Please check your email for verification.', 'success');
                
                // Clear form
                e.target.reset();
                
            } catch (error) {
                console.error('Registration error:', error);
                let errorMessage = 'Registration failed. Please try again.';
                
                if (error.code === 'auth/email-already-in-use') {
                    errorMessage = 'An account with this email already exists.';
                } else if (error.code === 'auth/weak-password') {
                    errorMessage = 'Password is too weak.';
                } else if (error.code === 'auth/invalid-email') {
                    errorMessage = 'Invalid email address.';
                }
                
                showMessage(errorMessage, 'error');
            } finally {
                showLoading(false);
            }
        });

        // Initialize on load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Authentication system ready');
            
            // Check if user is already signed in
            if (window.firebaseAuth && window.firebaseAuth.currentUser) {
                redirectToLibrary(window.firebaseAuth.currentUser);
            }
        });
    </script>
</body>
</html>
================
File: Updates/..Old/library_interface.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anderson's Library - Digital Collection</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
        }

        .header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 1rem 2rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 1.5rem;
            font-weight: bold;
            color: #ffd93d;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            background: #ffd93d;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #1e3c72;
            font-weight: bold;
        }

        .search-container {
            padding: 2rem;
            max-width: 1200px;
            margin: 0 auto;
        }

        .search-box {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .search-input-container {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .search-input {
            width: 100%;
            padding: 1rem 1rem 1rem 3rem;
            font-size: 1.1rem;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            transition: all 0.3s ease;
        }

        .search-input:focus {
            outline: none;
            border-color: #ffd93d;
            box-shadow: 0 0 20px rgba(255, 217, 61, 0.3);
        }

        .search-input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #ffd93d;
            font-size: 1.2rem;
        }

        .filters {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            align-items: center;
        }

        .filter-select {
            padding: 0.5rem 1rem;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 0.9rem;
        }

        .stats {
            display: flex;
            gap: 2rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 1.5rem;
            border-radius: 10px;
            text-align: center;
            flex: 1;
            min-width: 150px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #ffd93d;
            display: block;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.8;
            margin-top: 0.5rem;
        }

        .books-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .book-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 1.5rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .book-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            border-color: #ffd93d;
        }

        .book-title {
            font-size: 1.1rem;
            font-weight: bold;
            color: #ffd93d;
            margin-bottom: 0.5rem;
            line-height: 1.3;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .book-meta {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .book-category {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            background: rgba(255, 217, 61, 0.2);
            color: #ffd93d;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            width: fit-content;
        }

        .book-confidence {
            font-size: 0.8rem;
            opacity: 0.8;
        }

        .book-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .confidence-bar {
            width: 60px;
            height: 4px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 2px;
            overflow: hidden;
        }

        .confidence-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff6b6b, #ffd93d, #4ecdc4);
            border-radius: 2px;
            transition: width 0.3s ease;
        }

        .book-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
            flex: 1;
        }

        .btn-primary {
            background: #ffd93d;
            color: #1e3c72;
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 1rem;
            margin: 3rem 0;
        }

        .pagination button {
            padding: 0.75rem 1rem;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .pagination button:hover {
            background: rgba(255, 217, 61, 0.2);
            border-color: #ffd93d;
        }

        .pagination button.active {
            background: #ffd93d;
            color: #1e3c72;
            border-color: #ffd93d;
        }

        .pagination button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .loading {
            text-align: center;
            padding: 3rem;
            font-size: 1.1rem;
        }

        .spinner {
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 3px solid #ffd93d;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .no-results {
            text-align: center;
            padding: 3rem;
            opacity: 0.8;
        }

        .quick-stats {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
            font-size: 0.9rem;
        }

        .quick-stat {
            background: rgba(255, 255, 255, 0.1);
            padding: 0.5rem 1rem;
            border-radius: 20px;
        }

        @media (max-width: 768px) {
            .header {
                padding: 1rem;
                flex-direction: column;
                text-align: center;
            }

            .search-container {
                padding: 1rem;
            }

            .books-grid {
                grid-template-columns: 1fr;
            }

            .filters {
                justify-content: center;
            }

            .stats {
                flex-direction: column;
                gap: 1rem;
            }
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            border-radius: 15px;
            padding: 2rem;
            max-width: 600px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .modal-title {
            color: #ffd93d;
            font-size: 1.3rem;
            font-weight: bold;
        }

        .close-btn {
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0.25rem;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">
            📚 Anderson's Library
        </div>
        <div class="user-info">
            <span id="userEmail">user@example.com</span>
            <div class="user-avatar" id="userAvatar">A</div>
            <button class="btn btn-secondary" onclick="signOut()">Sign Out</button>
        </div>
    </div>

    <div class="search-container">
        <div class="search-box">
            <div class="search-input-container">
                <div class="search-icon">🔍</div>
                <input 
                    type="text" 
                    class="search-input" 
                    id="searchInput"
                    placeholder="Search by title, author, category, or content..."
                    onkeyup="handleSearch()"
                >
            </div>
            
            <div class="filters">
                <select id="categoryFilter" class="filter-select" onchange="applyFilters()">
                    <option value="">All Categories</option>
                </select>
                <select id="subjectFilter" class="filter-select" onchange="applyFilters()">
                    <option value="">All Subjects</option>
                </select>
                <select id="confidenceFilter" class="filter-select" onchange="applyFilters()">
                    <option value="">All Confidence Levels</option>
                    <option value="high">High Confidence (80%+)</option>
                    <option value="medium">Medium Confidence (50-79%)</option>
                    <option value="low">Low Confidence (<50%)</option>
                </select>
                <select id="sortBy" class="filter-select" onchange="applyFilters()">
                    <option value="title">Sort by Title</option>
                    <option value="category">Sort by Category</option>
                    <option value="confidence">Sort by Confidence</option>
                    <option value="size">Sort by Size</option>
                </select>
            </div>
        </div>

        <div class="stats">
            <div class="stat-card">
                <span class="stat-number" id="totalBooks">1,219</span>
                <div class="stat-label">Total Books</div>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="categorizedBooks">987</span>
                <div class="stat-label">Categorized</div>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="highConfidence">756</span>
                <div class="stat-label">High Confidence</div>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="totalSize">24.7 GB</span>
                <div class="stat-label">Total Size</div>
            </div>
        </div>

        <div class="quick-stats">
            <div class="quick-stat">📊 <span id="searchResults">Showing all 1,219 books</span></div>
            <div class="quick-stat">⏱️ Last updated: June 27, 2025</div>
            <div class="quick-stat">🎯 AI Confidence: 87% average</div>
        </div>

        <div id="loadingIndicator" class="loading" style="display: none;">
            <div class="spinner"></div>
            <p>Loading your library...</p>
        </div>

        <div id="booksContainer" class="books-grid"></div>

        <div id="noResults" class="no-results" style="display: none;">
            <h3>📚 No books found</h3>
            <p>Try adjusting your search terms or filters</p>
        </div>

        <div class="pagination" id="pagination"></div>
    </div>

    <!-- Book Details Modal -->
    <div id="bookModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title" id="modalTitle">Book Details</div>
                <button class="close-btn" onclick="closeModal()">&times;</button>
            </div>
            <div id="modalBody"></div>
        </div>
    </div>

    <script>
        // Sample book data based on your processing report
        let booksData = [];
        let filteredBooks = [];
        let currentPage = 1;
        const booksPerPage = 12;

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            loadSampleData();
            setupEventListeners();
            renderBooks();
            updateStats();
            populateFilters();
        });

        // Load sample data (in production, this would come from your database)
        function loadSampleData() {
            // Sample data based on your processing report
            booksData = [
                {
                    filename: "Essentials of Materials Science & Engineering.pdf",
                    title: "Essentials of Materials Science & Engineering",
                    category: "Engineering",
                    subject: "Materials Science",
                    categoryConfidence: 100,
                    subjectConfidence: 98,
                    overallConfidence: 99,
                    similarBooks: ["Fundamentals of Materials Science and Engineering", "Materials Science and Engineering"],
                    flags: [],
                    fileSize: 15.2,
                    pageCount: 624
                },
                {
                    filename: "Encyclopedia of Virology.pdf",
                    title: "Encyclopedia of Virology, Third Edition",
                    category: "Biology",
                    subject: "Virology",
                    categoryConfidence: 53,
                    subjectConfidence: 67,
                    overallConfidence: 60,
                    similarBooks: ["Introduction to Modern Virology", "Principles of Virology"],
                    flags: ["low_category_confidence"],
                    fileSize: 42.8,
                    pageCount: 1256
                },
                {
                    filename: "Chess For Dummies.pdf",
                    title: "Chess For Dummies",
                    category: "Games",
                    subject: "Chess",
                    categoryConfidence: 97,
                    subjectConfidence: 98,
                    overallConfidence: 97.5,
                    similarBooks: ["Chess the Complete Guide", "Chess the Complete Beginner's Guide"],
                    flags: [],
                    fileSize: 8.4,
                    pageCount: 384
                },
                {
                    filename: "Core Java® Vol Two.pdf",
                    title: "Core Java Volume II—Advanced Features",
                    category: "Programming Languages",
                    subject: "Java",
                    categoryConfidence: 95.3,
                    subjectConfidence: 81,
                    overallConfidence: 88,
                    similarBooks: ["Core Java® Vol One", "Introduction to Java Programming"],
                    flags: [],
                    fileSize: 12.7,
                    pageCount: 892
                },
                {
                    filename: "Clinical Forensic Medicine.pdf",
                    title: "Clinical Forensic Medicine: A Physician's Guide, 3rd Edition",
                    category: "Forensic Science",
                    subject: "Forensic Medicine",
                    categoryConfidence: 99,
                    subjectConfidence: 100,
                    overallConfidence: 99.5,
                    similarBooks: ["Handbook of Forensic Medicine", "The Essentials of Forensic Medicine"],
                    flags: [],
                    fileSize: 18.9,
                    pageCount: 567
                }
                // Add more sample books as needed
            ];

            // Generate additional sample books to reach a good number for demo
            const categories = ["Programming Languages", "Engineering", "Biology", "Games", "Forensic Science", "Mathematics", "Physics", "Chemistry", "History", "Literature"];
            const subjects = ["Java", "Python", "C++", "Materials Science", "Molecular Biology", "Chess", "Forensic Medicine", "Calculus", "Quantum Physics", "Organic Chemistry"];

            for (let i = 5; i < 50; i++) {
                const randomCategory = categories[Math.floor(Math.random() * categories.length)];
                const randomSubject = subjects[Math.floor(Math.random() * subjects.length)];
                
                booksData.push({
                    filename: `Book_${i + 1}.pdf`,
                    title: `Sample Book Title ${i + 1}`,
                    category: randomCategory,
                    subject: randomSubject,
                    categoryConfidence: Math.floor(Math.random() * 50) + 50,
                    subjectConfidence: Math.floor(Math.random() * 50) + 50,
                    overallConfidence: Math.floor(Math.random() * 50) + 50,
                    similarBooks: [`Similar Book A`, `Similar Book B`],
                    flags: Math.random() > 0.7 ? ["needs_review"] : [],
                    fileSize: (Math.random() * 30) + 1,
                    pageCount: Math.floor(Math.random() * 800) + 100
                });
            }

            filteredBooks = [...booksData];
        }

        function setupEventListeners() {
            document.getElementById('searchInput').addEventListener('input', debounce(handleSearch, 300));
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function handleSearch() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            
            if (searchTerm === '') {
                filteredBooks = [...booksData];
            } else {
                filteredBooks = booksData.filter(book => 
                    book.title.toLowerCase().includes(searchTerm) ||
                    book.category.toLowerCase().includes(searchTerm) ||
                    book.subject.toLowerCase().includes(searchTerm) ||
                    book.filename.toLowerCase().includes(searchTerm)
                );
            }
            
            currentPage = 1;
            applyFilters();
        }

        function applyFilters() {
            let filtered = [...filteredBooks];
            
            const categoryFilter = document.getElementById('categoryFilter').value;
            const subjectFilter = document.getElementById('subjectFilter').value;
            const confidenceFilter = document.getElementById('confidenceFilter').value;
            const sortBy = document.getElementById('sortBy').value;
            
            // Apply category filter
            if (categoryFilter) {
                filtered = filtered.filter(book => book.category === categoryFilter);
            }
            
            // Apply subject filter
            if (subjectFilter) {
                filtered = filtered.filter(book => book.subject === subjectFilter);
            }
            
            // Apply confidence filter
            if (confidenceFilter) {
                switch (confidenceFilter) {
                    case 'high':
                        filtered = filtered.filter(book => book.overallConfidence >= 80);
                        break;
                    case 'medium':
                        filtered = filtered.filter(book => book.overallConfidence >= 50 && book.overallConfidence < 80);
                        break;
                    case 'low':
                        filtered = filtered.filter(book => book.overallConfidence < 50);
                        break;
                }
            }
            
            // Apply sorting
            filtered.sort((a, b) => {
                switch (sortBy) {
                    case 'title':
                        return a.title.localeCompare(b.title);
                    case 'category':
                        return a.category.localeCompare(b.category);
                    case 'confidence':
                        return b.overallConfidence - a.overallConfidence;
                    case 'size':
                        return b.fileSize - a.fileSize;
                    default:
                        return a.title.localeCompare(b.title);
                }
            });
            
            filteredBooks = filtered;
            currentPage = 1;
            renderBooks();
            updateSearchResults();
        }

        function renderBooks() {
            const container = document.getElementById('booksContainer');
            const noResults = document.getElementById('noResults');
            
            if (filteredBooks.length === 0) {
                container.innerHTML = '';
                noResults.style.display = 'block';
                document.getElementById('pagination').innerHTML = '';
                return;
            }
            
            noResults.style.display = 'none';
            
            const startIndex = (currentPage - 1) * booksPerPage;
            const endIndex = startIndex + booksPerPage;
            const booksToShow = filteredBooks.slice(startIndex, endIndex);
            
            container.innerHTML = booksToShow.map(book => `
                <div class="book-card" onclick="showBookDetails('${book.filename}')">
                    <div class="book-title">${book.title}</div>
                    <div class="book-meta">
                        <div class="book-category">${book.category}</div>
                        <div class="book-confidence">Subject: ${book.subject} (${book.subjectConfidence}% confidence)</div>
                    </div>
                    <div class="book-info">
                        <span>${book.fileSize.toFixed(1)} MB • ${book.pageCount} pages</span>
                        <div class="confidence-bar">
                            <div class="confidence-fill" style="width: ${book.overallConfidence}%"></div>
                        </div>
                    </div>
                    ${book.flags.length > 0 ? `<div style="margin-top: 0.5rem; font-size: 0.8rem; color: #ff6b6b;">⚠️ ${book.flags.join(', ')}</div>` : ''}
                    <div class="book-actions">
                        <button class="btn btn-primary" onclick="event.stopPropagation(); openBook('${book.filename}')">
                            📖 Read
                        </button>
                        <button class="btn btn-secondary" onclick="event.stopPropagation(); downloadBook('${book.filename}')">
                            💾 Download
                        </button>
                    </div>
                </div>
            `).join('');
            
            renderPagination();
        }

        function renderPagination() {
            const totalPages = Math.ceil(filteredBooks.length / booksPerPage);
            const pagination = document.getElementById('pagination');
            
            if (totalPages <= 1) {
                pagination.innerHTML = '';
                return;
            }
            
            let paginationHTML = '';
            
            // Previous button
            paginationHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})">‹ Previous</button>`;
            
            // Page numbers
            for (let i = 1; i <= Math.min(totalPages, 5); i++) {
                const page = i;
                paginationHTML += `<button class="${page === currentPage ? 'active' : ''}" onclick="changePage(${page})">${page}</button>`;
            }
            
            if (totalPages > 5) {
                paginationHTML += `<span>...</span>`;
                paginationHTML += `<button class="${totalPages === currentPage ? 'active' : ''}" onclick="changePage(${totalPages})">${totalPages}</button>`;
            }
            
            // Next button
            paginationHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})">Next ›</button>`;
            
            pagination.innerHTML = paginationHTML;
        }

        function changePage(page) {
            currentPage = page;
            renderBooks();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        function populateFilters() {
            const categories = [...new Set(booksData.map(book => book.category))].sort();
            const subjects = [...new Set(booksData.map(book => book.subject))].sort();
            
            const categorySelect = document.getElementById('categoryFilter');
            const subjectSelect = document.getElementById('subjectFilter');
            
            categorySelect.innerHTML = '<option value="">All Categories</option>' + 
                categories.map(cat => `<option value="${cat}">${cat}</option>`).join('');
            
            subjectSelect.innerHTML = '<option value="">All Subjects</option>' + 
                subjects.map(sub => `<option value="${sub}">${sub}</option>`).join('');
        }

        function updateStats() {
            const totalBooks = booksData.length;
            const categorizedBooks = booksData.filter(book => book.category && book.category !== '').length;
            const highConfidenceBooks = booksData.filter(book => book.overallConfidence >= 80).length;
            const totalSize = booksData.reduce((sum, book) => sum + book.fileSize, 0);
            
            document.getElementById('totalBooks').textContent = totalBooks.toLocaleString();
            document.getElementById('categorizedBooks').textContent = categorizedBooks.toLocaleString();
            document.getElementById('highConfidence').textContent = highConfidenceBooks.toLocaleString();
            document.getElementById('totalSize').textContent = (totalSize / 1000).toFixed(1) + ' GB';
        }

        function updateSearchResults() {
            const searchResults = document.getElementById('searchResults');
            if (filteredBooks.length === booksData.length) {
                searchResults.textContent = `Showing all ${filteredBooks.length.toLocaleString()} books`;
            } else {
                searchResults.textContent = `Showing ${filteredBooks.length.toLocaleString()} of ${booksData.length.toLocaleString()} books`;
            }
        }

        function showBookDetails(filename) {
            const book = booksData.find(b => b.filename === filename);
            if (!book) return;
            
            const modal = document.getElementById('bookModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalBody = document.getElementById('modalBody');
            
            modalTitle.textContent = book.title;
            modalBody.innerHTML = `
                <div style="margin-bottom: 1.5rem;">
                    <h4 style="color: #ffd93d; margin-bottom: 1rem;">📄 Book Information</h4>
                    <p><strong>Filename:</strong> ${book.filename}</p>
                    <p><strong>Category:</strong> ${book.category} (${book.categoryConfidence}% confidence)</p>
                    <p><strong>Subject:</strong> ${book.subject} (${book.subjectConfidence}% confidence)</p>
                    <p><strong>Overall Confidence:</strong> ${book.overallConfidence}%</p>
                    <p><strong>File Size:</strong> ${book.fileSize.toFixed(1)} MB</p>
                    <p><strong>Page Count:</strong> ${book.pageCount}</p>
                </div>
                
                ${book.similarBooks.length > 0 ? `
                <div style="margin-bottom: 1.5rem;">
                    <h4 style="color: #ffd93d; margin-bottom: 1rem;">📚 Similar Books</h4>
                    <ul style="margin-left: 1rem;">
                        ${book.similarBooks.map(title => `<li>${title}</li>`).join('')}
                    </ul>
                </div>
                ` : ''}
                
                ${book.flags.length > 0 ? `
                <div style="margin-bottom: 1.5rem;">
                    <h4 style="color: #ff6b6b; margin-bottom: 1rem;">⚠️ Processing Flags</h4>
                    <p style="color: #ff6b6b;">${book.flags.join(', ')}</p>
                </div>
                ` : ''}
                
                <div class="book-actions">
                    <button class="btn btn-primary" onclick="openBook('${book.filename}')">📖 Read Book</button>
                    <button class="btn btn-secondary" onclick="downloadBook('${book.filename}')">💾 Download</button>
                </div>
            `;
            
            modal.style.display = 'block';
        }

        function closeModal() {
            document.getElementById('bookModal').style.display = 'none';
        }

        function openBook(filename) {
            // This would integrate with PDF.js viewer
            alert(`Opening ${filename} in PDF viewer...\n\nThis would normally open the PDF in a reader interface.`);
            closeModal();
        }

        function downloadBook(filename) {
            // This would trigger a download from Google Drive
            alert(`Downloading ${filename}...\n\nThis would normally start a download from your Google Drive.`);
            closeModal();
        }

        function signOut() {
            if (confirm('Are you sure you want to sign out?')) {
                // Firebase sign out logic would go here
                alert('Signed out successfully');
                window.location.href = '/library/auth/login.html';
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('bookModal');
            if (event.target === modal) {
                closeModal();
            }
        }

        // Initialize user info (this would come from Firebase auth)
        document.addEventListener('DOMContentLoaded', function() {
            const userEmail = 'user@example.com'; // Get from Firebase auth
            const userAvatar = document.getElementById('userAvatar');
            
            document.getElementById('userEmail').textContent = userEmail;
            userAvatar.textContent = userEmail.charAt(0).toUpperCase();
        });
    </script>
</body>
</html>
================
File: Updates/..Old/local_server_setup.sh
================
# Local Development Server Setup
# Choose ONE of these methods to serve your files:

# METHOD 1: Python HTTP Server (Recommended)
cd /home/herb/Desktop/BowersWorld-com
python3 -m http.server 8080
# Then access: http://localhost:8080/Updates/firebase_auth_system.html

# METHOD 2: Node.js HTTP Server
# First install: npm install -g http-server
cd /home/herb/Desktop/BowersWorld-com
http-server -p 8080 -c-1
# Then access: http://localhost:8080/Updates/firebase_auth_system.html

# METHOD 3: PHP Server (if PHP installed)
cd /home/herb/Desktop/BowersWorld-com
php -S localhost:8080
# Then access: http://localhost:8080/Updates/firebase_auth_system.html

# METHOD 4: VS Code Live Server Extension
# 1. Install "Live Server" extension in VS Code
# 2. Right-click your HTML file → "Open with Live Server"

# WHY THIS IS NEEDED:
# - Google APIs require HTTP/HTTPS protocol
# - Firebase Auth needs proper origin headers
# - CORS policies block file:// protocol
# - Local server simulates production environment
================
File: Updates/..Old/quick_config_guide.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Firebase Config Helper</title>
    <style>
        body {
            font-family: 'Segoe UI', sans-serif;
            max-width: 800px;
            margin: 2rem auto;
            padding: 1rem;
            background: #f5f5f5;
        }
        .step {
            background: white;
            padding: 1.5rem;
            margin: 1rem 0;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .step h3 {
            color: #4285f4;
            margin-top: 0;
        }
        .code-block {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            padding: 1rem;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            overflow-x: auto;
        }
        .highlight {
            background: #fff3cd;
            padding: 0.5rem;
            border-left: 4px solid #ffc107;
            margin: 1rem 0;
        }
        .success {
            background: #d4edda;
            padding: 0.5rem;
            border-left: 4px solid #28a745;
            margin: 1rem 0;
        }
        .navigation {
            background: #e3f2fd;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 2rem;
        }
        .navigation strong {
            color: #1976d2;
        }
    </style>
</head>
<body>
    <div class="navigation">
        <strong>🎯 Current Status:</strong> You have Firebase project "BowersWorld-Digital-Alexandria" with Email/Password and Google auth enabled. Now you need the config values!
    </div>

    <div class="step">
        <h3>🔥 Step 1: Get Your Config from Firebase Console</h3>
        <p>In your current Firebase Console tab:</p>
        <ol>
            <li>Click the <strong>gear icon ⚙️</strong> next to "Project Overview" (top left)</li>
            <li>Select <strong>"Project settings"</strong></li>
            <li>Scroll down to <strong>"Your apps"</strong> section</li>
            <li>If you see a web app, click on it. If not, click <strong>"Add app"</strong> → <strong>Web</strong></li>
            <li>Copy the entire <code>firebaseConfig</code> object</li>
        </ol>
        
        <div class="highlight">
            <strong>⚠️ Important:</strong> Your project name suggests the config will look like this:
        </div>
        
        <div class="code-block">
const firebaseConfig = {
  apiKey: "AIzaSyC-your-long-api-key-here",
  authDomain: "bowersworld-digital-alexandria.firebaseapp.com",
  projectId: "bowersworld-digital-alexandria",
  storageBucket: "bowersworld-digital-alexandria.appspot.com",
  messagingSenderId: "your-sender-id",
  appId: "your-app-id"
};
        </div>
    </div>

    <div class="step">
        <h3>🌐 Step 2: Add Authorized Domains (Do This Now)</h3>
        <p>In your Firebase Console (stay in Authentication section):</p>
        <ol>
            <li>Click <strong>"Settings"</strong> tab (next to "Sign-in method")</li>
            <li>Scroll to <strong>"Authorized domains"</strong></li>
            <li>Click <strong>"Add domain"</strong> for each of these:</li>
        </ol>
        
        <div class="code-block">
localhost
127.0.0.1
bowersworld.com
www.bowersworld.com
        </div>
    </div>

    <div class="step">
        <h3>💻 Step 3: Update Your Local File</h3>
        <p>Replace the placeholder config in your HTML file with your actual values:</p>
        
        <div class="code-block">
// In your firebase_auth_system.html file, replace this section:
const firebaseConfig = {
    apiKey: "AIzaSyC-REPLACE-WITH-YOUR-ACTUAL-API-KEY",
    authDomain: "anderson-library-XXXXX.firebaseapp.com",
    projectId: "anderson-library-XXXXX",
    storageBucket: "anderson-library-XXXXX.appspot.com",
    messagingSenderId: "123456789012",
    appId: "1:123456789012:web:abcdef123456789"
};

// With your actual config values from Step 1
        </div>
    </div>

    <div class="step">
        <h3>🚀 Step 4: Test Locally</h3>
        <p>Start your local server and test:</p>
        
        <div class="code-block">
cd /home/herb/Desktop/BowersWorld-com
python3 -m http.server 8080
        </div>
        
        <p>Then visit: <strong>http://localhost:8080/Updates/firebase_auth_system.html</strong></p>
        
        <div class="success">
            <strong>✅ Success indicators:</strong>
            <ul>
                <li>Console shows "🔥 Firebase initialized successfully"</li>
                <li>No API key errors</li>
                <li>Registration form accepts input</li>
                <li>Status shows "🔥 Firebase Ready"</li>
            </ul>
        </div>
    </div>

    <div class="step">
        <h3>🐛 Common Issues & Solutions</h3>
        
        <h4>"API key not valid"</h4>
        <ul>
            <li>Double-check you copied the config correctly</li>
            <li>Make sure there are no extra spaces or quotes</li>
            <li>Verify the project ID matches exactly</li>
        </ul>
        
        <h4>"auth/unauthorized-domain"</h4>
        <ul>
            <li>Add authorized domains in Firebase Console</li>
            <li>Wait 5-10 minutes for changes to take effect</li>
            <li>Make sure you're using http://localhost:8080, not file://</li>
        </ul>
        
        <h4>CORS errors</h4>
        <ul>
            <li>Must use local server (python3 -m http.server 8080)</li>
            <li>Cannot use file:// protocol</li>
            <li>Check authorized domains are set up</li>
        </ul>
    </div>

    <div class="step">
        <h3>📋 Next Steps After Config Works</h3>
        <ol>
            <li><strong>Test user registration</strong> - Create a test account</li>
            <li><strong>Set up Google Sheets</strong> - For user management database</li>
            <li><strong>Upload book data</strong> - Your processed 1,219 books to Google Drive</li>
            <li><strong>Deploy to GitHub Pages</strong> - Make it live on bowersworld.com</li>
        </ol>
    </div>

    <script>
        console.log('🔧 Firebase Configuration Helper Loaded');
        console.log('📍 Follow the steps above to get your Firebase config working');
        
        // Helper function to validate config format
        function validateFirebaseConfig(config) {
            const required = ['apiKey', 'authDomain', 'projectId', 'storageBucket', 'messagingSenderId', 'appId'];
            const missing = required.filter(key => !config[key] || config[key].includes('REPLACE') || config[key].includes('XXXXX'));
            
            if (missing.length > 0) {
                console.warn('❌ Missing or placeholder values in Firebase config:', missing);
                return false;
            }
            
            console.log('✅ Firebase config appears valid');
            return true;
        }
        
        // Make validation function available globally
        window.validateFirebaseConfig = validateFirebaseConfig;
        
        console.log('💡 Tip: After updating your config, you can test it by running validateFirebaseConfig(firebaseConfig) in the console');
    </script>
</body>
</html>
================
File: Updates/CommunitySQLs/upgrade_ui_flow.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anderson's Library - Upgrade Flow Demo</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            line-height: 1.6;
        }
        
        .demo-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .scenario {
            background: white;
            border-radius: 15px;
            padding: 25px;
            margin: 20px 0;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            border-left: 5px solid #4285f4;
        }
        
        .scenario h2 {
            color: #2c3e50;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .limit-hit-modal {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            color: white;
            border-radius: 12px;
            padding: 25px;
            margin: 15px 0;
            position: relative;
            overflow: hidden;
        }
        
        .limit-hit-modal::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
            transform: rotate(45deg);
            animation: shine 3s infinite;
        }
        
        @keyframes shine {
            0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
            100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }
        
        .upgrade-card {
            background: linear-gradient(135deg, #4285f4, #34a853);
            color: white;
            border-radius: 12px;
            padding: 20px;
            margin: 15px 0;
            position: relative;
        }
        
        .tier-comparison {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .tier-card {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            position: relative;
            transition: transform 0.3s ease;
        }
        
        .tier-card:hover {
            transform: translateY(-5px);
        }
        
        .tier-card.current {
            background: linear-gradient(135deg, #ffeaa7, #fdcb6e);
            transform: scale(1.05);
        }
        
        .tier-card.recommended {
            background: linear-gradient(135deg, #00b894, #00cec9);
            color: white;
            transform: scale(1.08);
        }
        
        .tier-card.premium {
            background: linear-gradient(135deg, #6c5ce7, #a29bfe);
            color: white;
        }
        
        .tier-icon {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .tier-title {
            font-size: 1.4em;
            font-weight: bold;
            margin-bottom: 10px;
        }
        
        .benefit-list {
            list-style: none;
            margin: 15px 0;
        }
        
        .benefit-list li {
            padding: 5px 0;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .benefit-list li::before {
            content: '✅';
            font-size: 0.9em;
        }
        
        .upgrade-btn {
            background: linear-gradient(135deg, #00b894, #00cec9);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0,184,148,0.3);
        }
        
        .upgrade-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,184,148,0.4);
        }
        
        .notification-demo {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-radius: 12px;
            padding: 20px;
            margin: 15px 0;
        }
        
        .priority-badge {
            background: #e17055;
            color: white;
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 0.85em;
            font-weight: bold;
            display: inline-block;
            margin-left: 10px;
        }
        
        .progress-bar {
            background: #ecf0f1;
            border-radius: 10px;
            height: 8px;
            margin: 10px 0;
            overflow: hidden;
        }
        
        .progress-fill {
            background: linear-gradient(90deg, #00b894, #00cec9);
            height: 100%;
            border-radius: 10px;
            transition: width 0.3s ease;
        }
        
        .smart-alert {
            background: #74b9ff;
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .feature-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        
        .feature-card {
            background: #f1f2f6;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }
        
        .feature-card.locked {
            opacity: 0.6;
            filter: grayscale(50%);
        }
        
        .unlock-hint {
            background: #ffeaa7;
            padding: 10px;
            border-radius: 6px;
            margin-top: 10px;
            font-size: 0.9em;
            color: #2d3436;
        }
    </style>
</head>
<body>
    <div class="demo-container">
        <h1 style="text-align: center; color: white; margin-bottom: 30px; font-size: 2.5em;">
            📚 Anderson's Library - Smart Upgrade System
        </h1>
        
        <!-- Scenario 1: Download Limit Hit -->
        <div class="scenario">
            <h2>🚫 Scenario 1: Daily Download Limit Reached</h2>
            
            <div class="limit-hit-modal">
                <h3 style="font-size: 1.8em; margin-bottom: 15px;">⏰ Daily Download Limit Reached!</h3>
                <p style="font-size: 1.1em; margin-bottom: 15px;">
                    You've downloaded <strong>3 books</strong> today (your daily limit as a Basic user).
                </p>
                
                <div class="progress-bar">
                    <div class="progress-fill" style="width: 100%;"></div>
                </div>
                
                <div style="display: flex; gap: 15px; margin-top: 20px; flex-wrap: wrap;">
                    <button class="upgrade-btn" onclick="showUpgradeOptions()">
                        🚀 Upgrade for More Downloads
                    </button>
                    <div style="color: rgba(255,255,255,0.9);">
                        <strong>Or wait:</strong> Limit resets in 8 hours 23 minutes
                    </div>
                </div>
            </div>
            
            <div class="smart-alert">
                <div style="font-size: 2em;">💡</div>
                <div>
                    <strong>Smart Suggestion:</strong> Enable our newsletter and new book alerts to get 
                    <strong>5 downloads per day</strong> + personalized recommendations!
                </div>
            </div>
        </div>
        
        <!-- Scenario 2: Enhanced Incentives Display -->
        <div class="scenario">
            <h2>⭐ Enhanced Tier Benefits Comparison</h2>
            
            <div class="tier-comparison">
                <div class="tier-card current">
                    <div class="tier-icon">📚</div>
                    <div class="tier-title">Basic Access</div>
                    <div style="color: #e17055; font-weight: bold;">Your Current Tier</div>
                    <ul class="benefit-list">
                        <li>3 downloads per day</li>
                        <li>20 searches per day</li>
                        <li>Basic book previews</li>
                        <li>Community support</li>
                        <li>Standard database updates</li>
                    </ul>
                </div>
                
                <div class="tier-card recommended">
                    <div class="tier-icon">🔗</div>
                    <div class="tier-title">Connected Reader</div>
                    <div class="priority-badge">RECOMMENDED</div>
                    <ul class="benefit-list">
                        <li>5 downloads per day</li>
                        <li>30 searches per day</li>
                        <li>📧 Personalized book alerts</li>
                        <li>🎯 Interest-based notifications</li>
                        <li>⚡ Priority database updates</li>
                        <li>2x download speed</li>
                    </ul>
                    <div class="unlock-hint">
                        <strong>Unlock with:</strong> Newsletter + New book alerts
                    </div>
                </div>
                
                <div class="tier-card premium">
                    <div class="tier-icon">💎</div>
                    <div class="tier-title">VIP Experience</div>
                    <ul class="benefit-list">
                        <li>Unlimited downloads</li>
                        <li>Unlimited searches</li>
                        <li>🔔 Instant new book notifications</li>
                        <li>🏆 First access to rare books</li>
                        <li>⚡ Real-time database sync</li>
                        <li>🚀 Maximum download speeds</li>
                        <li>👑 Priority support</li>
                    </ul>
                    <div class="unlock-hint">
                        <strong>Unlock with:</strong> All marketing preferences
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Scenario 3: Smart Notifications Demo -->
        <div class="scenario">
            <h2>🔔 Smart Notification System</h2>
            
            <div class="notification-demo">
                <h3 style="margin-bottom: 15px;">📱 Personalized Alerts (Connected+ Users)</h3>
                
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; margin: 10px 0;">
                    <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                        <span style="font-size: 1.5em;">🐍</span>
                        <strong>New Python Book Alert!</strong>
                        <span class="priority-badge">PRIORITY</span>
                    </div>
                    <p>"Advanced Python Web Scraping" just added - matches your programming interests!</p>
                    <div style="margin-top: 10px; font-size: 0.9em; opacity: 0.8;">
                        Available for immediate download • Added 2 minutes ago
                    </div>
                </div>
                
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; margin: 10px 0;">
                    <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                        <span style="font-size: 1.5em;">🤖</span>
                        <strong>AI Recommendation</strong>
                    </div>
                    <p>Based on your recent downloads, you might love "Machine Learning Engineering"</p>
                    <div style="margin-top: 10px; font-size: 0.9em; opacity: 0.8;">
                        94% match confidence • Similar to 3 books you've downloaded
                    </div>
                </div>
            </div>
            
            <div class="feature-grid">
                <div class="feature-card">
                    <div style="font-size: 2em; margin-bottom: 10px;">⚡</div>
                    <h4>Instant Alerts</h4>
                    <p>Get notified within minutes of new books in your interests</p>
                </div>
                
                <div class="feature-card">
                    <div style="font-size: 2em; margin-bottom: 10px;">🎯</div>
                    <h4>Smart Targeting</h4>
                    <p>AI learns your preferences for perfect book matching</p>
                </div>
                
                <div class="feature-card locked">
                    <div style="font-size: 2em; margin-bottom: 10px;">👑</div>
                    <h4>VIP Early Access</h4>
                    <p>First dibs on rare and premium books</p>
                    <div class="unlock-hint">Upgrade to VIP</div>
                </div>
                
                <div class="feature-card locked">
                    <div style="font-size: 2em; margin-bottom: 10px;">📊</div>
                    <h4>Reading Analytics</h4>
                    <p>Personal insights into your reading patterns</p>
                    <div class="unlock-hint">Enable analytics permissions</div>
                </div>
            </div>
        </div>
        
        <!-- Scenario 4: Priority Database Updates -->
        <div class="scenario">
            <h2>⚡ Priority Database Update System</h2>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">
                <div style="background: #fd79a8; color: white; padding: 20px; border-radius: 12px;">
                    <h4 style="margin-bottom: 15px;">📡 Basic Updates</h4>
                    <ul style="list-style: none;">
                        <li style="padding: 5px 0;">📅 Weekly database sync</li>
                        <li style="padding: 5px 0;">🔄 Updates during off-peak hours</li>
                        <li style="padding: 5px 0;">📚 New books available next business day</li>
                        <li style="padding: 5px 0;">⏰ 24-48 hour delay for new content</li>
                    </ul>
                </div>
                
                <div style="background: #00b894; color: white; padding: 20px; border-radius: 12px;">
                    <h4 style="margin-bottom: 15px;">⚡ Priority Updates (Connected+)</h4>
                    <ul style="list-style: none;">
                        <li style="padding: 5px 0;">🚀 Real-time database sync</li>
                        <li style="padding: 5px 0;">⚡ Instant new book availability</li>
                        <li style="padding: 5px 0;">🎯 Personalized update notifications</li>
                        <li style="padding: 5px 0;">👑 VIP users get 2-hour early access</li>
                    </ul>
                </div>
            </div>
            
            <div class="upgrade-card">
                <h3 style="margin-bottom: 15px;">🔥 Live Update Example</h3>
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;">
                    <div style="display: flex; justify-content: between; align-items: center;">
                        <div>
                            <strong>Database Update in Progress...</strong>
                            <div style="font-size: 0.9em; opacity: 0.9; margin-top: 5px;">
                                Adding 12 new books • Priority users get immediate access
                            </div>
                        </div>
                        <div style="font-size: 1.5em;">⚡</div>
                    </div>
                    <div class="progress-bar" style="margin-top: 10px;">
                        <div class="progress-fill" style="width: 75%; animation: pulse 2s infinite;"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Scenario 5: Upgrade Flow -->
        <div class="scenario">
            <h2>🚀 Smart Upgrade Flow</h2>
            
            <div id="upgradeFlow" style="display: none;">
                <div style="background: linear-gradient(135deg, #00b894, #00cec9); color: white; padding: 25px; border-radius: 12px;">
                    <h3 style="margin-bottom: 20px;">🎯 Choose Your Upgrade Path</h3>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                        <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 8px;">
                            <h4>📧 Quick Boost (Connected)</h4>
                            <p style="margin: 10px 0;">Just enable newsletter + book alerts</p>
                            <ul style="list-style: none; font-size: 0.9em;">
                                <li>✅ 5 downloads per day</li>
                                <li>✅ 30 searches per day</li>
                                <li>✅ Smart book notifications</li>
                                <li>✅ Priority updates</li>
                            </ul>
                            <button class="upgrade-btn" style="margin-top: 15px;" onclick="upgradeToConnected()">
                                Enable Now (2 clicks!)
                            </button>
                        </div>
                        
                        <div style="background: rgba(255,255,255,0.15); padding: 20px; border-radius: 8px; border: 2px solid rgba(255,255,255,0.3);">
                            <h4>💎 Full VIP Experience</h4>
                            <p style="margin: 10px 0;">All permissions for maximum benefits</p>
                            <ul style="list-style: none; font-size: 0.9em;">
                                <li>✅ Unlimited everything</li>
                                <li>✅ Instant notifications</li>
                                <li>✅ Early access to new books</li>
                                <li>✅ Priority support</li>
                            </ul>
                            <button class="upgrade-btn" style="margin-top: 15px; background: linear-gradient(135deg, #6c5ce7, #a29bfe);" onclick="upgradeToVIP()">
                                Go VIP (5 permissions)
                            </button>
                        </div>
                    </div>
                    
                    <div style="text-align: center; margin-top: 20px; font-size: 0.9em; opacity: 0.9;">
                        💡 You can modify your preferences anytime in account settings
                    </div>
                </div>
            </div>
            
            <div style="text-align: center; margin: 20px 0;">
                <button class="upgrade-btn" id="showUpgradeBtn" onclick="showUpgradeOptions()">
                    See Upgrade Options
                </button>
            </div>
        </div>
    </div>
    
    <script>
        function showUpgradeOptions() {
            const upgradeFlow = document.getElementById('upgradeFlow');
            const btn = document.getElementById('showUpgradeBtn');
            
            if (upgradeFlow.style.display === 'none') {
                upgradeFlow.style.display = 'block';
                btn.textContent = 'Hide Upgrade Options';
                upgradeFlow.scrollIntoView({ behavior: 'smooth' });
            } else {
                upgradeFlow.style.display = 'none';
                btn.textContent = 'See Upgrade Options';
            }
        }
        
        function upgradeToConnected() {
            alert('🎉 Awesome! You would now see the permission selection form:\n\n✅ Newsletter (weekly library updates)\n✅ New book alerts (instant notifications)\n\nAfter enabling, you immediately get:\n• 5 downloads per day\n• 30 searches per day\n• Smart notifications\n• Priority updates');
        }
        
        function upgradeToVIP() {
            alert('👑 VIP Upgrade! You would see all available permissions:\n\n✅ Newsletter\n✅ New book alerts\n✅ Personalized recommendations\n✅ Premium offers\n✅ Surveys & feedback\n\nInstant VIP benefits:\n• Unlimited access\n• Real-time updates\n• Early book access\n• Priority support');
        }
        
        // Add some interactive animations
        document.addEventListener('DOMContentLoaded', function() {
            const progressBars = document.querySelectorAll('.progress-fill');
            progressBars.forEach(bar => {
                const width = bar.style.width;
                bar.style.width = '0%';
                setTimeout(() => {
                    bar.style.width = width;
                }, 500);
            });
        });
        
        // Simulate real-time notification
        setTimeout(() => {
            const alerts = document.querySelectorAll('.smart-alert');
            alerts.forEach(alert => {
                alert.style.animation = 'pulse 2s ease-in-out';
            });
        }, 2000);
    </script>
    
    <style>
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.02); }
            100% { transform: scale(1); }
        }
    </style>
</body>
</html>
================
File: Updates/csv_to_mysql_migration.py
================
#!/usr/bin/env python3
"""
File: migrate_csv_to_mysql.py
Path: BowersWorld-com/Scripts/Migration/migrate_csv_to_mysql.py
Standard: AIDEV-PascalCase-1.8
Created: 2025-07-03
Author: Herb Bowers - Project Himalaya
Description: Migrate AndersonLibrary_Himalaya_GPU.csv to MySQL Master Database

Purpose: Populates the MySQL master database from the enhanced Himalaya CSV
with proper normalization and error handling.
"""

import mysql.connector
import pandas as pd
import os
import hashlib
import re
from pathlib import Path
from datetime import datetime
import json
from typing import Dict, List, Optional, Tuple

class CSVToMySQLMigrator:
    """Migrates Anderson's Library CSV data to MySQL master database"""
    
    def __init__(self, csv_path: str, mysql_config: dict, books_directory: str):
        """Initialize migrator with paths and configuration"""
        self.csv_path = csv_path
        self.mysql_config = mysql_config
        self.books_directory = Path(books_directory)
        
        # Statistics tracking
        self.stats = {
            'total_records': 0,
            'books_migrated': 0,
            'authors_created': 0,
            'publishers_created': 0,
            'categories_created': 0,
            'errors_encountered': 0,
            'duplicates_skipped': 0
        }
        
        # Data caches to avoid duplicate database calls
        self.author_cache = {}
        self.publisher_cache = {}
        self.category_cache = {}
        
        print(f"🚀 Starting CSV to MySQL migration...")
        print(f"📁 CSV Path: {csv_path}")
        print(f"📚 Books Directory: {books_directory}")
    
    def connect_to_mysql(self) -> mysql.connector.MySQLConnection:
        """Create MySQL connection"""
        try:
            connection = mysql.connector.connect(**self.mysql_config)
            print(f"✅ Connected to MySQL database: {self.mysql_config['database']}")
            return connection
        except Exception as e:
            print(f"❌ Failed to connect to MySQL: {e}")
            raise
    
    def load_csv_data(self) -> pd.DataFrame:
        """Load and validate CSV data"""
        try:
            df = pd.read_csv(self.csv_path).fillna('')
            self.stats['total_records'] = len(df)
            print(f"✅ Loaded {len(df)} records from CSV")
            
            # Show column names for verification
            print("📋 Available columns:")
            for i, col in enumerate(df.columns, 1):
                print(f"   {i:2d}. {col}")
            
            return df
        except Exception as e:
            print(f"❌ Failed to load CSV: {e}")
            raise
    
    def normalize_text(self, text: str) -> str:
        """Normalize text for consistent comparison"""
        if not text or pd.isna(text):
            return ""
        return str(text).strip().replace('  ', ' ')
    
    def extract_year_from_text(self, text: str) -> Optional[int]:
        """Extract year from various text formats"""
        if not text:
            return None
        
        # Look for 4-digit years
        year_match = re.search(r'\b(19|20)\d{2}\b', str(text))
        if year_match:
            year = int(year_match.group())
            if 1800 <= year <= 2030:  # Reasonable range
                return year
        return None
    
    def calculate_file_hash(self, file_path: Path) -> Optional[str]:
        """Calculate SHA-256 hash of file if it exists"""
        if not file_path.exists():
            return None
        
        try:
            sha256_hash = hashlib.sha256()
            with open(file_path, "rb") as f:
                for byte_block in iter(lambda: f.read(4096), b""):
                    sha256_hash.update(byte_block)
            return sha256_hash.hexdigest()
        except Exception as e:
            print(f"⚠️ Could not hash file {file_path}: {e}")
            return None
    
    def get_or_create_author(self, connection: mysql.connector.MySQLConnection, 
                           author_name: str) -> Optional[int]:
        """Get existing author or create new one"""
        if not author_name:
            return None
        
        author_name = self.normalize_text(author_name)
        if not author_name:
            return None
        
        # Check cache first
        if author_name in self.author_cache:
            return self.author_cache[author_name]
        
        cursor = connection.cursor()
        try:
            # Try to find existing author
            cursor.callproc('AddOrFindAuthor', [author_name, 0])
            
            # Get the result
            for result in cursor.stored_results():
                author_id = result.fetchone()[0]
                break
            
            # Cache the result
            self.author_cache[author_name] = author_id
            
            if author_id and author_name not in [a for a in self.author_cache.values()]:
                self.stats['authors_created'] += 1
            
            return author_id
            
        except Exception as e:
            print(f"⚠️ Error handling author '{author_name}': {e}")
            return None
        finally:
            cursor.close()
    
    def get_or_create_publisher(self, connection: mysql.connector.MySQLConnection, 
                              publisher_name: str) -> Optional[int]:
        """Get existing publisher or create new one"""
        if not publisher_name:
            return None
        
        publisher_name = self.normalize_text(publisher_name)
        if not publisher_name:
            return None
        
        # Check cache first
        if publisher_name in self.publisher_cache:
            return self.publisher_cache[publisher_name]
        
        cursor = connection.cursor()
        try:
            # Try to find existing publisher
            cursor.callproc('AddOrFindPublisher', [publisher_name, 0])
            
            # Get the result
            for result in cursor.stored_results():
                publisher_id = result.fetchone()[0]
                break
            
            # Cache the result
            self.publisher_cache[publisher_name] = publisher_id
            
            if publisher_id and publisher_name not in [p for p in self.publisher_cache.values()]:
                self.stats['publishers_created'] += 1
            
            return publisher_id
            
        except Exception as e:
            print(f"⚠️ Error handling publisher '{publisher_name}': {e}")
            return None
        finally:
            cursor.close()
    
    def get_or_create_category(self, connection: mysql.connector.MySQLConnection, 
                             category_name: str) -> Optional[int]:
        """Get existing category or create new one"""
        if not category_name or category_name.lower() in ['unknown', 'not found', '']:
            return None
        
        category_name = self.normalize_text(category_name)
        if not category_name:
            return None
        
        # Check cache first
        if category_name in self.category_cache:
            return self.category_cache[category_name]
        
        cursor = connection.cursor()
        try:
            # Try to find existing category
            cursor.callproc('AddOrFindCategory', [category_name, 0])
            
            # Get the result
            for result in cursor.stored_results():
                category_id = result.fetchone()[0]
                break
            
            # Cache the result
            self.category_cache[category_name] = category_id
            
            if category_id and category_name not in [c for c in self.category_cache.values()]:
                self.stats['categories_created'] += 1
            
            return category_id
            
        except Exception as e:
            print(f"⚠️ Error handling category '{category_name}': {e}")
            return None
        finally:
            cursor.close()
    
    def check_assets_exist(self, filename: str) -> Dict[str, bool]:
        """Check if cover and thumbnail files exist"""
        base_name = Path(filename).stem
        
        # Check for cover
        cover_path = Path("Covers") / f"{base_name}.png"
        has_cover = cover_path.exists()
        
        # Check for thumbnail  
        thumb_path = Path("Thumbs") / f"{base_name}.png"
        has_thumbnail = thumb_path.exists()
        
        return {
            'has_cover': has_cover,
            'has_thumbnail': has_thumbnail
        }
    
    def migrate_book_record(self, connection: mysql.connector.MySQLConnection, 
                          row: pd.Series) -> bool:
        """Migrate a single book record"""
        try:
            # Get normalized data
            filename = self.normalize_text(row.get('filename', ''))
            if not filename:
                print("⚠️ Skipping record with no filename")
                return False
            
            # Check if book already exists
            cursor = connection.cursor()
            cursor.execute("SELECT BookID FROM Books WHERE FileName = %s", (filename,))
            if cursor.fetchone():
                self.stats['duplicates_skipped'] += 1
                cursor.close()
                return True  # Not an error, just already exists
            cursor.close()
            
            # Get file information
            book_file_path = self.books_directory / filename
            file_size = book_file_path.stat().st_size if book_file_path.exists() else None
            file_hash = self.calculate_file_hash(book_file_path)
            
            # Get normalized entities
            author_id = self.get_or_create_author(connection, row.get('pdf_author', ''))
            publisher_id = self.get_or_create_publisher(connection, row.get('pdf_producer', '') or row.get('extracted_publisher', ''))
            category_id = self.get_or_create_category(connection, row.get('database_category', ''))
            
            # Extract years
            copyright_year = self.extract_year_from_text(row.get('pdf_creation_date', ''))
            publication_year = int(row.get('extracted_year', 0)) if row.get('extracted_year') else copyright_year
            
            # Check for assets
            assets = self.check_assets_exist(filename)
            
            # Prepare book data
            book_data = {
                'FileName': filename,
                'FilePath': str(book_file_path) if book_file_path.exists() else None,
                'FileSize': file_size,
                'FileSizeMB': float(row.get('file_size_mb', 0)) if row.get('file_size_mb') else None,
                'PageCount': int(row.get('page_count', 0)) if row.get('page_count') else None,
                'FileHash': file_hash,
                
                # Bibliographic data
                'Title': self.normalize_text(row.get('pdf_title', '') or filename.replace('.pdf', '')),
                'Subtitle': None,  # Not in CSV
                'AuthorID': author_id,
                'PublisherID': publisher_id,
                'CopyrightYear': copyright_year,
                'PublicationYear': publication_year,
                'Edition': self.normalize_text(row.get('extracted_edition', '')),
                'Language': 'English',  # Default for now
                'CategoryID': category_id,
                
                # Identifiers
                'PrimaryISBN': self.normalize_text(row.get('extracted_isbn', '')),
                'ExtractedISBN': self.normalize_text(row.get('extracted_isbn', '')),
                'ExtractedLCCN': self.normalize_text(row.get('extracted_lccn', '')),
                'ExtractedISSN': self.normalize_text(row.get('extracted_issn', '')),
                'ExtractedOCLC': self.normalize_text(row.get('extracted_oclc', '')),
                'ExtractedDOI': self.normalize_text(row.get('extracted_doi', '')),
                'ExtractedPublisher': self.normalize_text(row.get('extracted_publisher', '')),
                'ExtractedYear': int(row.get('extracted_year', 0)) if row.get('extracted_year') else None,
                
                # Content
                'FirstPageText': str(row.get('first_page_text', ''))[:10000] if row.get('first_page_text') else None,
                'TitlePageText': str(row.get('title_page_text', ''))[:10000] if row.get('title_page_text') else None,
                'CopyrightPageText': str(row.get('copyright_page_text', ''))[:10000] if row.get('copyright_page_text') else None,
                'ExtractedKeywords': self.normalize_text(row.get('extracted_keywords', '')),
                
                # Processing info
                'ProcessingVersion': '1.0',
                'ExtractionMethod': 'himalaya_gpu',
                'QualityScore': 75.0,  # Default reasonable score
                
                # Assets
                'HasCover': assets['has_cover'],
                'HasThumbnail': assets['has_thumbnail'],
                
                # Access
                'AccessLevel': 'public'
            }
            
            # Build INSERT statement
            columns = []
            values = []
            placeholders = []
            
            for key, value in book_data.items():
                if value is not None and value != '':
                    columns.append(key)
                    values.append(value)
                    placeholders.append('%s')
            
            insert_sql = f"""
                INSERT INTO Books ({', '.join(columns)})
                VALUES ({', '.join(placeholders)})
            """
            
            # Execute insert
            cursor = connection.cursor()
            cursor.execute(insert_sql, values)
            book_id = cursor.lastrowid
            cursor.close()
            
            # Update search index
            cursor = connection.cursor()
            cursor.callproc('UpdateBookSearchIndex', [book_id])
            cursor.close()
            
            connection.commit()
            self.stats['books_migrated'] += 1
            
            return True
            
        except Exception as e:
            print(f"❌ Error migrating book '{filename}': {e}")
            self.stats['errors_encountered'] += 1
            connection.rollback()
            return False
    
    def execute_migration(self) -> bool:
        """Execute the complete migration process"""
        try:
            # Load CSV data
            df = self.load_csv_data()
            
            # Connect to MySQL
            connection = self.connect_to_mysql()
            
            print(f"\n🚀 Starting migration of {len(df)} books...")
            
            # Process each book record
            for index, row in df.iterrows():
                if index % 50 == 0:  # Progress report every 50 books
                    print(f"📊 Progress: {index}/{len(df)} ({(index/len(df)*100):.1f}%)")
                
                self.migrate_book_record(connection, row)
            
            # Final progress report
            print(f"📊 Progress: {len(df)}/{len(df)} (100.0%)")
            
            # Close connection
            connection.close()
            
            # Generate final report
            self.generate_migration_report()
            
            return True
            
        except Exception as e:
            print(f"❌ Migration failed: {e}")
            return False
    
    def generate_migration_report(self):
        """Generate comprehensive migration report"""
        print("\n" + "="*60)
        print("📊 MIGRATION REPORT")
        print("="*60)
        print(f"📁 Source CSV: {self.csv_path}")
        print(f"🗄️ Target Database: {self.mysql_config['database']}")
        print(f"📅 Migration Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        print("📈 STATISTICS:")
        print(f"   📚 Total records in CSV: {self.stats['total_records']}")
        print(f"   ✅ Books successfully migrated: {self.stats['books_migrated']}")
        print(f"   👥 Authors created: {self.stats['authors_created']}")
        print(f"   🏢 Publishers created: {self.stats['publishers_created']}")
        print(f"   📂 Categories created: {self.stats['categories_created']}")
        print(f"   🔄 Duplicates skipped: {self.stats['duplicates_skipped']}")
        print(f"   ❌ Errors encountered: {self.stats['errors_encountered']}")
        print()
        
        success_rate = (self.stats['books_migrated'] / self.stats['total_records']) * 100
        print(f"✅ Success Rate: {success_rate:.1f}%")
        
        if self.stats['errors_encountered'] == 0:
            print("\n🎉 MIGRATION COMPLETED SUCCESSFULLY!")
            print("🔍 All books have been indexed for full-text search")
            print("📊 Database is ready for SQLite generation")
        else:
            print(f"\n⚠️ Migration completed with {self.stats['errors_encountered']} errors")
            print("📝 Check the output above for error details")
        
        print("="*60)

def main():
    """Main execution function"""
    
    # Configuration
    CSV_PATH = "AndersonLibrary_Himalaya_GPU.csv"
    BOOKS_DIRECTORY = "Anderson eBooks"  # Adjust path as needed
    
    # MySQL configuration - update with your settings
    MYSQL_CONFIG = {
        'host': 'localhost',
        'user': 'your_username',      # Update this
        'password': 'your_password',  # Update this
        'database': 'MyLibrary_Master',
        'charset': 'utf8mb4',
        'autocommit': False
    }
    
    print("🏔️ HIMALAYA CSV TO MYSQL MIGRATION")
    print("Standard: AIDEV-PascalCase-1.8")
    print("Enhanced with full bibliographic data extraction")
    print("="*60)
    
    # Validate input files exist
    if not os.path.exists(CSV_PATH):
        print(f"❌ CSV file not found: {CSV_PATH}")
        print("📁 Please ensure the AndersonLibrary_Himalaya_GPU.csv file is in the current directory")
        return False
    
    if not os.path.exists(BOOKS_DIRECTORY):
        print(f"⚠️ Books directory not found: {BOOKS_DIRECTORY}")
        print("📁 Migration will continue but file paths may not be accurate")
    
    # Create migrator and execute
    migrator = CSVToMySQLMigrator(CSV_PATH, MYSQL_CONFIG, BOOKS_DIRECTORY)
    success = migrator.execute_migration()
    
    if success:
        print("\n🚀 NEXT STEPS:")
        print("1. Verify data in MySQL: SELECT COUNT(*) FROM Books;")
        print("2. Test search functionality: SELECT * FROM BookSearch LIMIT 5;")
        print("3. Generate SQLite databases for users")
        print("4. Set up web interface")
        
        return True
    else:
        print("\n❌ Migration failed - check error messages above")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)

================
File: Updates/sql/next_steps_plan.md
================
# Anderson's Library - Next Steps Priority Plan

## 🚨 Immediate Actions (Next 2 Weeks)

### 1. Complete Firebase Authentication Setup

- **Status**: Code exists, needs configuration completion
- **Action**: Update Firebase config in `firebase_auth_system.html` with actual credentials
- **Files**: `Updates/firebase_auth_system (2).html` has the working version
- **Test**: Local server setup with `python3 -m http.server 8080`

### 2. Establish Google Drive File Structure

- **Action**: Organize your 1,219 PDFs in Google Drive folders

- **Structure**:
  
  ```
  Anderson's Library/
  ├── Books/ (your 1,219 PDFs)
  ├── Covers/ (book cover images) 
  ├── Database/ (SQLite files)
  └── Users/ (Google Sheets for user management)
  ```

### 3. Deploy Working Demo

- **Action**: Get basic version live on GitHub Pages
- **Current**: You have `index.html` ready
- **Add**: Working library interface from `Updates/library_interface.html`

## 🎯 Phase 1: Core Functionality (Month 1)

### Week 1: Authentication & Access

- [ ] Complete Firebase auth integration
- [ ] Set up Google Sheets user management
- [ ] Test user registration/approval workflow
- [ ] Deploy to GitHub Pages

### Week 2: File Management

- [ ] Upload processed book collection to Google Drive
- [ ] Implement PDF streaming from Drive API
- [ ] Test download/viewing functionality
- [ ] Create book metadata API

### Week 3: Search & Browse

- [ ] Implement basic search functionality
- [ ] Add category/subject filtering
- [ ] Create responsive book grid interface
- [ ] Add pagination for large collections

### Week 4: Polish & Test

- [ ] User testing with beta group
- [ ] Performance optimization
- [ ] Mobile interface refinement
- [ ] Documentation completion

## 🚀 Phase 2: Enhanced Features (Month 2-3)

### Advanced Search

- Full-text search within PDFs
- Semantic similarity search
- AI-powered recommendations

### User Experience

- Reading progress tracking
- Personal collections/bookmarks
- Annotation system
- Offline reading capability

### AI Integration

- Book classification refinement
- Content analysis and tagging
- Knowledge graph construction
- Research assistant features

## 📊 Success Metrics

### Technical

- [ ] Sub-second search across all 1,219 books
- [ ] 99%+ uptime for web interface
- [ ] Mobile-responsive design
- [ ] Secure user authentication

### User Experience

- [ ] Intuitive navigation for all skill levels
- [ ] Fast PDF loading/streaming
- [ ] Effective search results
- [ ] Seamless multi-device access

## 🛠️ Development Environment

### Required Tools

- Local web server for testing
- Firebase project with auth enabled
- Google Cloud project with Drive/Sheets APIs
- GitHub repository for deployment

### Key Files to Focus On

1. `Updates/firebase_auth_system (2).html` - Authentication
2. `Updates/library_interface.html` - Main UI
3. `library/js/GoogleDriveAuth.js` - Drive integration
4. `Scripts/System/GitHubAutoUpdate.py` - Deployment

## 💡 Quick Wins Available Now

### 1. Demo Deployment (2 hours)

- Push current `index.html` to GitHub Pages
- Add library portal link to existing interface
- Show working authentication form

### 2. Book Collection Upload (4 hours)

- Organize 1,219 PDFs in Google Drive
- Create folder structure with proper permissions
- Test file access via Drive API

### 3. Basic Search (6 hours)

- Implement JavaScript search in library interface  
- Add category filtering from your existing data
- Create responsive book grid display

## 🎯 The Vision Realized

When complete, users will:

1. **Register** via Firebase auth with admin approval
2. **Browse** 1,219+ books in categorized interface
3. **Search** across titles, authors, content with AI assistance
4. **Read** PDFs streamed directly from Google Drive
5. **Collaborate** through annotations and shared collections

## Next Conversation Focus

Let's discuss:

1. Which phase should we tackle first?
2. What's your comfort level with Firebase/Google Cloud setup?
3. Do you want to start with a simple demo or go straight to full features?
4. Any specific technical roadblocks you're facing
================
File: requirements.txt
================


================================================================
List of Included Files
================================================================

Files included:
Andy.py
CreateThumbs/ConvertToThumbnails.py
CreateThumbs/ConvertToThumbnailsPart2.py
CustomWindow.py
HTML/GoogleAuthorzeTest.html
README.md
Schema.pdf
Scripts/System/BackupProject.py
Scripts/System/CodebaseSum.py
Scripts/System/GPU OCR Speed Test.py
Scripts/System/GitHubAutoUpdate.py
Scripts/System/GitHubUpdateSite.py
Scripts/System/ListFilesByDate.py
Scripts/System/MarkdownToText.py
Scripts/System/UpdatePopulate.py
Updates/..Old/firebase_auth_system (1).html
Updates/..Old/firebase_auth_system (2).html
Updates/..Old/firebase_auth_system.html
Updates/..Old/library_interface.html
Updates/..Old/local_server_setup.sh
Updates/..Old/quick_config_guide.html
Updates/CommunitySQLs/upgrade_ui_flow.html
Updates/csv_to_mysql_migration.py
Updates/sql/next_steps_plan.md
requirements.txt

There are 25 files included in the Files section of the CodebaseSummary document.
