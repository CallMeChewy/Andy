This file is a comprehensive codebase snapshot for the BowersWorld-com project, generated to facilitate analysis and development.

================================================================
File Summary
================================================================

Purpose:
--------
This document provides a consolidated view of the project's source code, scripts,
HTML, and text files, excluding any files specified in the .gitignore file. 
It serves as a reference for developers, making it easier to understand the 
codebase structure and functionality in a single document.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
5. List of Program files
6. List of Documents

================================================================
Directory Structure
================================================================
.
├── ./AndersonLibrary.py
├── ./Archive
│   ├── ./Archive/AndersonLibrary_2025-07-04_16-38-40.py
│   ├── ./Archive/Data
│   │   └── ./Archive/Data/DatabaseModels_2025-07-04_16-38-40.py
│   ├── ./Archive/Interface
│   │   ├── ./Archive/Interface/BookGrid_2025-07-04_16-38-40.py
│   │   ├── ./Archive/Interface/FilterPanel_2025-07-04_16-38-40.py
│   │   └── ./Archive/Interface/MainWindow_2025-07-04_16-38-40.py
│   └── ./Archive/TestImports_2025-07-04_14-44-12.py
├── ./Assets
│   ├── ./Assets/arrow.png
│   ├── ./Assets/BowersWorld.png
│   ├── ./Assets/exit.png
│   ├── ./Assets/hide.png
│   ├── ./Assets/icon.png
│   ├── ./Assets/icons
│   ├── ./Assets/Icons
│   ├── ./Assets/library
│   ├── ./Assets/Max.png
│   └── ./Assets/my_library.db
├── ./Config
├── ./CreateThumbs
│   ├── ./CreateThumbs/ConvertToThumbnailsPart2.py
│   └── ./CreateThumbs/ConvertToThumbnails.py
├── ./Data
│   ├── ./Data/Backups
│   ├── ./Data/Books -> /home/herb/Desktop/Not Backed Up/Anderson's Library/Andy/Anderson eBooks
│   ├── ./Data/Cache
│   ├── ./Data/Databases
│   ├── ./Data/HTML
│   ├── ./Data/Spreadsheets
│   │   ├── ./Data/Spreadsheets/AndersonLibrary_LCEnhancementQueue.xlsx
│   │   └── ./Data/Spreadsheets/AndersonLibrary_PDFMetadata.csv
│   └── ./Data/Text
├── ./HTML
│   └── ./HTML/GoogleAuthorzeTest.html
├── ./__init__.py
├── ./Legacy
│   ├── ./Legacy/Andy.py
│   └── ./Legacy/CustomWindow.py
├── ./README.md
├── ./requirements.txt
├── ./Results.txt
├── ./RunAnderson.py
├── ./Scripts
│   ├── ./Scripts/Deployment
│   │   ├── ./Scripts/Deployment/GitHubAutoUpdate.py
│   │   ├── ./Scripts/Deployment/GitHubUpdateSite.py
│   │   └── ./Scripts/Deployment/UpdatePopulate.py
│   ├── ./Scripts/Development
│   │   └── ./Scripts/Development/QuickSetup.py
│   ├── ./Scripts/Maintenance
│   │   └── ./Scripts/Maintenance/generate_thumbnails.py
│   ├── ./Scripts/Migration
│   │   ├── ./Scripts/Migration/add_authors.py
│   │   ├── ./Scripts/Migration/add_authors_v2.py
│   │   └── ./Scripts/Migration/add_filepath_thumbnailpath.py
│   ├── ./Scripts/System
│   │   ├── ./Scripts/System/BackupProject.py
│   │   ├── ./Scripts/System/CodebaseSum.py
│   │   ├── ./Scripts/System/GPU OCR Speed Test.py
│   │   ├── ./Scripts/System/ListFilesByDate.py
│   │   ├── ./Scripts/System/MarkdownToText.py
│   │   └── ./Scripts/System/update_site.bat
│   ├── ./Scripts/temp_db_inspector.py
│   └── ./Scripts/ThisApplication
├── ./Source
│   ├── ./Source/Core
│   │   ├── ./Source/Core/BookService.py
│   │   ├── ./Source/Core/DatabaseManager.py
│   │   └── ./Source/Core/__init__.py
│   ├── ./Source/DADs
│   │   ├── ./Source/DADs/CompatibilityPatch.py
│   │   ├── ./Source/DADs/CustomWindowFix.py
│   │   ├── ./Source/DADs/database_models_fix.py
│   │   ├── ./Source/DADs/FinalImportFix.py
│   │   ├── ./Source/DADs/MigrateToModular.py
│   │   └── ./Source/DADs/PySide6ImportFix.py
│   ├── ./Source/Data
│   │   ├── ./Source/Data/DatabaseModels_backup.py
│   │   ├── ./Source/Data/DatabaseModels.py
│   │   └── ./Source/Data/__init__.py
│   ├── ./Source/Framework
│   │   └── ./Source/Framework/__init__.py
│   ├── ./Source/__init__.py
│   ├── ./Source/Interface
│   │   ├── ./Source/Interface/BookGrid.py
│   │   ├── ./Source/Interface/CustomWindow.py
│   │   ├── ./Source/Interface/FilterPanel.py
│   │   ├── ./Source/Interface/__init__.py
│   │   └── ./Source/Interface/MainWindow.py
│   └── ./Source/Utils
│       └── ./Source/Utils/__init__.py
├── ./SyntaxFix.py
├── ./TestImports.py
├── ./Tests
│   ├── ./Tests/Data
│   ├── ./Tests/__init__.py
│   ├── ./Tests/Integration
│   │   └── ./Tests/Integration/__init__.py
│   └── ./Tests/Unit
│       └── ./Tests/Unit/__init__.py
├── ./Updates
│   ├── ./Updates/CommunitySQLs
│   │   ├── ./Updates/CommunitySQLs/community_contribution_system.sql
│   │   ├── ./Updates/CommunitySQLs/community_platform_schema.sql
│   │   ├── ./Updates/CommunitySQLs/enhanced_incentive_schema.sql
│   │   ├── ./Updates/CommunitySQLs/enhanced_mylibrary_schema.sql
│   │   ├── ./Updates/CommunitySQLs/mysql_compatible_schema.sql
│   │   ├── ./Updates/CommunitySQLs/mysql_master_schema.sql
│   │   ├── ./Updates/CommunitySQLs/refined_library_schema.sql
│   │   └── ./Updates/CommunitySQLs/upgrade_ui_flow.html
│   └── ./Updates/SQL
└── ./WebPages
    ├── ./WebPages/Assets
    ├── ./WebPages/CSS
    └── ./WebPages/JS

45 directories, 74 files

================================================================
Files
================================================================

================
File: ..Excclude/CodebaseSummary_20250704_130009.txt
================
This file is a comprehensive codebase snapshot for the BowersWorld-com project, generated to facilitate analysis and development.

================================================================
File Summary
================================================================

Purpose:
--------
This document provides a consolidated view of the project's source code, scripts,
HTML, and text files, excluding any files specified in the .gitignore file. 
It serves as a reference for developers, making it easier to understand the 
codebase structure and functionality in a single document.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
5. List of Program files
6. List of Documents

================================================================
Directory Structure
================================================================
.
├── ./Andy.py
├── ./Assets
│   ├── ./Assets/arrow.png
│   ├── ./Assets/BowersWorld.png
│   ├── ./Assets/exit.png
│   ├── ./Assets/hide.png
│   ├── ./Assets/icon.png
│   ├── ./Assets/icons
│   ├── ./Assets/library
│   └── ./Assets/Max.png
├── ./CreateThumbs
│   ├── ./CreateThumbs/ConvertToThumbnailsPart2.py
│   └── ./CreateThumbs/ConvertToThumbnails.py
├── ./CustomWindow.py
├── ./Data
│   ├── ./Data/Books -> /home/herb/Desktop/Not Backed Up/Anderson's Library/Andy/Anderson eBooks
│   ├── ./Data/Databases
│   │   ├── ./Data/Databases/BowersWorld.db
│   │   ├── ./Data/Databases/my_library.db
│   │   ├── ./Data/Databases/MyLibrary.db
│   │   ├── ./Data/Databases/MyLibrary_mysql_setup.sql
│   │   ├── ./Data/Databases/MyLibrary.sql
│   │   └── ./Data/Databases/MySQL
│   │       ├── ./Data/Databases/MySQL/direct_book_display.sql
│   │       ├── ./Data/Databases/MySQL/display_book_procedure_simple.sql
│   │       ├── ./Data/Databases/MySQL/MyLibraryMaster.sql
│   │       ├── ./Data/Databases/MySQL/QuickBookDisplay.sql
│   │       └── ./Data/Databases/MySQL/View_BooksDisplay.sql
│   ├── ./Data/HTML
│   ├── ./Data/Spreadsheets
│   │   ├── ./Data/Spreadsheets/AndersonLibrary_LCEnhancementQueue.xlsx
│   │   └── ./Data/Spreadsheets/AndersonLibrary_PDFMetadata.csv
│   └── ./Data/Text
│       └── ./Data/Text/CodebaseSummary_20250630_222737.txt
├── ./HTML
│   └── ./HTML/GoogleAuthorzeTest.html
├── ./README.md
├── ./requirements.txt
├── ./Schema.pdf
├── ./Scripts
│   ├── ./Scripts/Deployment
│   ├── ./Scripts/Development
│   ├── ./Scripts/Maintenance
│   ├── ./Scripts/Migration
│   └── ./Scripts/System
│       ├── ./Scripts/System/BackupProject.py
│       ├── ./Scripts/System/CodebaseSum.py
│       ├── ./Scripts/System/GitHubAutoUpdate.py
│       ├── ./Scripts/System/GitHubUpdateSite.py
│       ├── ./Scripts/System/GPU OCR Speed Test.py
│       ├── ./Scripts/System/ListFilesByDate.py
│       ├── ./Scripts/System/MarkdownToText.py
│       ├── ./Scripts/System/UpdatePopulate.py
│       └── ./Scripts/System/update_site.bat
└── ./Updates
    ├── ./Updates/CommunitySQLs
    │   ├── ./Updates/CommunitySQLs/community_contribution_system.sql
    │   ├── ./Updates/CommunitySQLs/community_platform_schema.sql
    │   ├── ./Updates/CommunitySQLs/enhanced_incentive_schema.sql
    │   ├── ./Updates/CommunitySQLs/enhanced_mylibrary_schema.sql
    │   ├── ./Updates/CommunitySQLs/mysql_compatible_schema.sql
    │   ├── ./Updates/CommunitySQLs/mysql_master_schema.sql
    │   ├── ./Updates/CommunitySQLs/refined_library_schema.sql
    │   └── ./Updates/CommunitySQLs/upgrade_ui_flow.html
    ├── ./Updates/csv_to_mysql_migration.py
    ├── ./Updates/mysql_master_schema (1).sql
    ├── ./Updates/mysql_master_schema.sql
    ├── ./Updates/poc_mysql_schema.sql
    └── ./Updates/sql
        ├── ./Updates/sql/mylibrary_schema.sql
        ├── ./Updates/sql/mysql_conversion_helper.sql
        ├── ./Updates/sql/next_steps_plan.md
        └── ./Updates/sql/sample_queries.sql

22 directories, 52 files

================================================================
Files
================================================================

================
File: Andy.py
================
import sys
import os
import sqlite3
import webbrowser
from PySide6.QtWidgets import (
    QApplication,
    QMainWindow,
    QWidget,
    QScrollArea,
    QGridLayout,
    QLabel,
    QVBoxLayout,
    QComboBox,
    QHBoxLayout,
    QSizePolicy,
    QSpacerItem,
    QMessageBox,
    QLineEdit,
    QListView,
    QToolTip,
)
from PySide6.QtGui import QPixmap, QFont, QPen, QPainter
from PySide6.QtCore import (
    Qt,
    QEvent,
    QTimer,
    QStringListModel,
)
from CustomWindow import CustomWindow


class ToolTipListView(QListView):
    def __init__(self, parent=None):
        super().__init__(parent)

    def viewportEvent(self, event):
        if event.type() == QEvent.ToolTip:
            index = self.indexAt(event.pos())
            if index.isValid():
                QToolTip.showText(event.globalPos(), index.data(), self)
            else:
                QToolTip.hideText()
                event.ignore()
            return True
        return super().viewportEvent(event)


class HoverHighlightWidget(QWidget):
    def __init__(self, main_window, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.main_window = main_window
        self.setMouseTracking(True)
        self.hovered = False
        self.description = ""

    def enterEvent(self, event):
        self.hovered = True
        self.update()

    def leaveEvent(self, event):
        self.hovered = False
        self.update()

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.BookName = self.description
            self.main_window.getPDF(self.BookName)

    def paintEvent(self, event):
        super().paintEvent(event)
        if self.hovered:
            painter = QPainter(self)
            painter.setPen(QPen(Qt.red, 8))
            painter.drawRect(self.rect())


class MainWindow(QMainWindow):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # Placeholder values for ComboBoxes
        self.placeholders = [
            "Select a Category",
            "Select a Subject",
            "Select a Book Title",
            "Type Something Here",
        ]
        self.C_WAS = 0
        self.C_NOW = 0
        self.W_ITEM = 230
        self.W_BASE = 315
        self.books = False

        # Connect to the database
        self.conn = sqlite3.connect("Assets/my_library.db")
        self.c = self.conn.cursor()

        self.setMouseTracking(True)

        # Create the dropdowns and combobox
        self.box1_values = self.populate_box1()
        self.main_widget = QWidget()
        self.setCentralWidget(self.main_widget)

        self.main_layout = QHBoxLayout(self.main_widget)
        self.main_layout.setContentsMargins(0, 0, 0, 0)  # Remove space around layout

        # Create comboboxes
        self.dropdowns_container = QWidget()
        self.dropdowns_container.setFixedWidth(300)
        self.main_layout.addWidget(self.dropdowns_container)
        self.dropdowns = QVBoxLayout(self.dropdowns_container)
        self.dropdowns.setContentsMargins(0, 0, 0, 0)  # Remove space around layout

        font = QFont("Aerial", 12)
        # font.setBold(True)  # Make the font bold
        heading = QLabel(
            "- - - O p t i o n s - - -  ", alignment=Qt.AlignmentFlag.AlignHCenter
        )
        heading.setFont(font)
        heading.setStyleSheet("color: #FCC419")  # ffd200")
        self.dropdowns.addWidget(heading)
        heading.setObjectName("heading")

        # Create a QFont object for the font size
        font = QFont()
        font.setPointSize(12)

        # Create comboboxes
        self.box1 = QComboBox()
        self.box1.setMaxVisibleItems(30)
        self.box1.setFont(font)
        view1 = ToolTipListView()
        view1.setFont(font)
        view1.setStyleSheet("QListView::item { height: 18px; }")
        view1.setTextElideMode(Qt.ElideRight)
        self.box1.setView(view1)
        self.reset(self.box1, 0)  # Set placeholder
        for category in self.box1_values:
            self.box1.addItem(category)
            self.box1.setItemData(self.box1.count() - 1, category, Qt.ToolTipRole)
        self.box1.currentTextChanged.connect(self.box1_callback)
        self.dropdowns.addWidget(self.box1)

        self.box2 = QComboBox()
        self.box2.setMaxVisibleItems(30)
        self.box2.setFont(font)
        view2 = ToolTipListView()
        view2.setFont(font)
        view2.setStyleSheet("QListView::item { height: 18px; }")
        view2.setTextElideMode(Qt.ElideRight)
        self.box2.setView(view2)
        self.reset(self.box2, 1)  # Set placeholder
        self.box2.currentTextChanged.connect(self.box2_callback)
        self.dropdowns.addWidget(self.box2)

        self.box3 = QComboBox()
        self.box3.setMaxVisibleItems(30)
        self.box3.setFont(font)
        view3 = ToolTipListView()
        view3.setFont(font)
        view3.setStyleSheet("QListView::item { height: 18px; }")
        view3.setTextElideMode(Qt.ElideRight)
        self.box3.setView(view3)
        self.reset(self.box3, 2)  # Set placeholder
        self.box3.currentTextChanged.connect(self.box3_callback)  # New connection
        self.dropdowns.addWidget(self.box3)

        # Increase the height of the QLineEdit
        self.line_edit = QLineEdit()
        self.line_edit.setMinimumHeight(18)  # Change this to adjust the height
        self.line_edit.setFont(font)  # This will increase the text size
        self.line_edit.installEventFilter(self)
        self.line_edit.setText("Type Something Here")  # Set the starting text

        # Increase the text size in the listbox
        self.list_view = ToolTipListView()
        self.list_view.setFont(font)  # This will increase the text size

        self.model = QStringListModel()
        self.list_view.setModel(self.model)
        self.line_edit.textChanged.connect(self.search_books)
        self.list_view.clicked.connect(self.item_clicked)

        self.dropdowns.addWidget(self.line_edit)
        self.dropdowns.addWidget(self.list_view)

        # Make the listbox expand to the status bar
        self.list_view.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Expanding)

        self.scroll_area = QScrollArea()
        self.main_layout.addWidget(self.scroll_area)

        self.scroll_widget = QWidget()
        self.scroll_area.setWidget(self.scroll_widget)
        self.scroll_area.setWidgetResizable(True)  # Make the scroll area resizable

        self.grid_layout = QGridLayout(self.scroll_widget)
        self.grid_layout.setContentsMargins(0, 0, 0, 0)  # Remove space around layout

        self.timer = QTimer(self)
        self.timer.timeout.connect(self.checkSize)  # Connect to checkSize method
        self.timer.start(100)  # Call checkSize every 2 seconds

    def reset(self, box, index):
        placeholder = self.placeholders[index]
        box.blockSignals(True)
        box.clear()
        box.addItem(placeholder)
        box.setCurrentIndex(0)
        box.blockSignals(False)

    def load_data(self):
        # Clear displayed widgets
        for i in reversed(range(self.grid_layout.count())):
            widget_to_remove = self.grid_layout.itemAt(i).widget()
            if widget_to_remove is not None:
                self.grid_layout.removeWidget(widget_to_remove)  # remove from layout
                widget_to_remove.setParent(None)  # remove from gui

        # Display selected widgets
        for i, (title,) in enumerate(self.books):
            image_path = os.path.join("Anderson eBooks\\Covers", title + ".png")
            item_widget = HoverHighlightWidget(self)

            item_widget.description = title
            item_layout = QHBoxLayout(item_widget)
            item_layout.setContentsMargins(3, 3, 5, 5)  # Remove space around the layout

            image_label = QLabel()
            pixmap = QPixmap(image_path)
            if pixmap.isNull():
                image_label.setText("Failed to load image")
            else:
                pixmap = pixmap.scaled(175 * 0.60, 225 * 0.60, Qt.KeepAspectRatio)
                image_label.setPixmap(pixmap)
            item_layout.addWidget(image_label)

            description_label = QLabel(title)
            font = QFont("Arial", 11)
            description_label.setFont(font)
            description_label.setWordWrap(True)
            description_label.setFixedSize(175 * 0.60, 225 * 0.60)  # Fixed size desc
            item_layout.addWidget(description_label)

            cols = self.C_NOW
            self.grid_layout.addWidget(item_widget, i // cols, i % cols)

        # Add spacers to push all widgets to the top left
        if self.books:
            self.grid_layout.addItem(
                QSpacerItem(0, 0, QSizePolicy.Expanding, QSizePolicy.Expanding),
                i // cols + 1,
                i % cols,
            )
            self.grid_layout.addItem(
                QSpacerItem(0, 0, QSizePolicy.Expanding, QSizePolicy.Expanding),
                i // cols,
                i % cols + 1,
            )

    def populate_box1(self):
        self.c.execute("SELECT DISTINCT category FROM categories ORDER BY category ASC")
        categories = self.c.fetchall()
        self.box1_values = []
        for category in categories:
            self.box1_values.append(category[0])
        return self.box1_values

    def box1_callback(self, choice):
        self.reset(self.box2, 1)
        self.reset(self.box3, 2)
        self.line_edit.clear()
        self.line_edit.setText("Type Something Here")

        # Fetch the subjects for category and populate box2
        self.c.execute(
            "SELECT DISTINCT subject FROM subjects WHERE category_id = (SELECT id FROM categories WHERE category = ?)",
            (choice,),
        )
        subjects = self.c.fetchall()
        self.box2.blockSignals(True)
        for subject in subjects:
            self.box2.addItem(subject[0])
        self.box2.blockSignals(False)

    def box2_callback(self, choice):
        self.reset(self.box3, 2)
        self.line_edit.clear()
        self.line_edit.setText("Type Something Here")
        # Fetch the books for subject and populate box3
        self.c.execute(
            "SELECT title FROM books WHERE subject_id = (SELECT id FROM subjects WHERE subject = ?)",
            (choice,) if isinstance(choice, str) else choice,
        )
        self.books = self.c.fetchall()
        self.box3.blockSignals(True)
        for book in self.books:
            self.box3.addItem(book[0])
        self.box3.blockSignals(False)
        self.load_data()

    def box3_callback(self, choice):  # New method
        self.BookName = choice
        self.getPDF(self.BookName)

    def item_clicked(self, index):
        self.BookName = index.data()
        self.getPDF(self.BookName)

    def getPDF(self, BookName):
        if BookName:
            image_path = os.path.join("Anderson eBooks\\Covers", BookName + ".png")
            pdf_path = os.path.join("Anderson eBooks", BookName + ".pdf")

            msgBox = QMessageBox()
            msgBox.setWindowTitle("Selected Book")
            msgBox.setText("Would you like to read:\n\n" + BookName)
            msgBox.setIconPixmap(QPixmap(image_path))
            msgBox.setStandardButtons(QMessageBox.Cancel | QMessageBox.Ok)
            msgBox.setDefaultButton(QMessageBox.Ok)

            # Set the stylesheet
            msgBox.setStyleSheet(
                """
                QLabel{
                    font-size: 24px;
                }
                QPushButton{
                    min-height: 30px;
                    min-width: 70px;
                    font-size: 16px;
                }
            """
            )

            returnValue = msgBox.exec()
            if returnValue == QMessageBox.Ok:
                webbrowser.open_new(pdf_path)

    def search_books(self, search_term):
        # Clear the list_view if there's no data in the entry
        if not search_term:
            self.model.setStringList([])
            return

        # Only load data if the length of search_term is greater than 1
        if len(search_term) > 1:
            self.c.execute(
                "SELECT title FROM books WHERE title LIKE ? ORDER BY title COLLATE NOCASE",
                ("%" + search_term + "%",),
            )
            self.books = self.c.fetchall()
            self.model.setStringList([title[0] for title in self.books])
            self.load_data()

    def eventFilter(self, source, event):
        if (source is self.line_edit) and (event.type() == QEvent.FocusIn):
            self.box3.clear()
            self.box1.setCurrentIndex(0)
            self.reset(self.box2, 1)
            self.reset(self.box3, 2)
            self.line_edit.setText("")
        return super(MainWindow, self).eventFilter(source, event)

    def checkSize(self):
        # print("check")
        if self.C_WAS != self.C_NOW:
            # print("change", self.C_WAS, self.C_NOW)
            self.C_WAS = self.C_NOW
            if self.books:
                self.load_data()

    def resizeEvent(self, event):  # 14	Widget's size changed (QResizeEvent).
        super().resizeEvent(event)
        size = event.size()
        width = size.width()
        height = size.height()
        self.C_NOW = int((width - self.W_BASE) / self.W_ITEM)
        window.get_status_bar().showMessage(f"{width} x {height}  C:{self.C_NOW}")


# Start the application
app = QApplication(sys.argv)
app.setStyleSheet(
    """
    * {
        background-color: qlineargradient(spread:repeat, x1:1, y1:0, x2:1, y2:1, stop:0.00480769 rgba(3, 50, 76, 255), stop:0.293269 rgba(6, 82, 125, 255), stop:0.514423 rgba(8, 117, 178, 255), stop:0.745192 rgba(7, 108, 164, 255), stop:1 rgba(3, 51, 77, 255));
        color: #FFFFFF;
        border: none;
    }

    QComboBox::down-arrow {
        image: url(Assets/arrow.png);
    }

    QComboBox::item:hover, QListView::item:hover {
        border: 3px solid red;
    }
    QToolTip { 
        color: #ffffff; 
        border: none; font-size: 16px; 
    }

"""
)

main_window = MainWindow()
window = CustomWindow("Anderson's Library", main_window)
window.showMaximized()
sys.exit(app.exec())

================
File: CreateThumbs/ConvertToThumbnails.py
================
#!/usr/bin/env python3
"""
File: ConvertToThumbnails.py
Path: /home/herb/Desktop/BowersWorld-com/ConvertToThumbnails.py
Standard: AIDEV-PascalCase-1.7
Created: 2025-06-25
Author: Herb Bowers - Project Himalaya
Description: Convert PNG book covers to web-optimized thumbnails for Anderson's Library
"""

import os
import sys
from pathlib import Path
from PIL import Image
import time
from datetime import datetime

# Configuration
SOURCE_DIR = "/home/herb/Desktop/BowersWorld-com/Covers"
OUTPUT_DIR = "/home/herb/Desktop/BowersWorld-com/Thumbs"
THUMBNAIL_SIZE = (64, 85)  # Width x Height - optimized for book covers
QUALITY_SETTING = 85  # PNG optimization level
PROGRESS_INTERVAL = 25  # Show progress every N files

def CreateOutputDirectory(OutputPath):
    """
    Create the output directory if it doesn't exist
    
    Args:
        OutputPath: Path to create
        
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        Path(OutputPath).mkdir(parents=True, exist_ok=True)
        print(f"✅ Output directory ready: {OutputPath}")
        return True
    except Exception as CreateError:
        print(f"❌ Failed to create output directory: {CreateError}")
        return False

def ValidateSourceDirectory(SourcePath):
    """
    Validate that source directory exists and contains PNG files
    
    Args:
        SourcePath: Path to validate
        
    Returns:
        tuple: (bool: valid, int: png_count)
    """
    if not os.path.exists(SourcePath):
        print(f"❌ Source directory not found: {SourcePath}")
        return False, 0
    
    PngFiles = list(Path(SourcePath).glob("*.png"))
    PngCount = len(PngFiles)
    
    if PngCount == 0:
        print(f"⚠️ No PNG files found in: {SourcePath}")
        return False, 0
    
    print(f"📁 Found {PngCount} PNG files in source directory")
    return True, PngCount

def ConvertSingleImage(SourcePath, OutputPath, ThumbnailSize):
    """
    Convert a single PNG file to thumbnail
    
    Args:
        SourcePath: Path to source PNG file
        OutputPath: Path for output thumbnail
        ThumbnailSize: Tuple of (width, height)
        
    Returns:
        tuple: (bool: success, int: original_size, int: thumbnail_size)
    """
    try:
        # Get original file size
        OriginalSize = os.path.getsize(SourcePath)
        
        # Open and process image
        with Image.open(SourcePath) as OriginalImage:
            # Convert RGBA to RGB if necessary (remove transparency)
            if OriginalImage.mode in ('RGBA', 'LA'):
                # Create white background
                RgbImage = Image.new('RGB', OriginalImage.size, (255, 255, 255))
                if OriginalImage.mode == 'RGBA':
                    RgbImage.paste(OriginalImage, mask=OriginalImage.split()[-1])
                else:
                    RgbImage.paste(OriginalImage, mask=OriginalImage.split()[-1])
                ProcessedImage = RgbImage
            else:
                ProcessedImage = OriginalImage.copy()
            
            # Create thumbnail while maintaining aspect ratio
            ProcessedImage.thumbnail(ThumbnailSize, Image.Resampling.LANCZOS)
            
            # Save optimized thumbnail
            ProcessedImage.save(OutputPath, 'PNG', optimize=True, quality=QUALITY_SETTING)
        
        # Get thumbnail file size
        ThumbnailSize = os.path.getsize(OutputPath)
        
        return True, OriginalSize, ThumbnailSize
        
    except Exception as ConversionError:
        print(f"❌ Error converting {SourcePath}: {ConversionError}")
        return False, 0, 0

def FormatFileSize(SizeInBytes):
    """
    Format file size in human-readable format
    
    Args:
        SizeInBytes: Size in bytes
        
    Returns:
        str: Formatted size string
    """
    for Unit in ['B', 'KB', 'MB', 'GB']:
        if SizeInBytes < 1024.0:
            return f"{SizeInBytes:.1f} {Unit}"
        SizeInBytes /= 1024.0
    return f"{SizeInBytes:.1f} TB"

def GenerateThumbnails():
    """
    Main function to convert all PNG files to thumbnails
    
    Returns:
        bool: True if successful, False otherwise
    """
    StartTime = time.time()
    
    print("🎨 Anderson's Library Thumbnail Generator")
    print("=" * 50)
    print(f"📂 Source: {SOURCE_DIR}")
    print(f"📁 Output: {OUTPUT_DIR}")
    print(f"📏 Size: {THUMBNAIL_SIZE[0]}x{THUMBNAIL_SIZE[1]} pixels")
    print("=" * 50)
    
    # Validate source directory
    IsValid, TotalFiles = ValidateSourceDirectory(SOURCE_DIR)
    if not IsValid:
        return False
    
    # Create output directory
    if not CreateOutputDirectory(OUTPUT_DIR):
        return False
    
    # Process all PNG files
    ProcessedCount = 0
    ErrorCount = 0
    TotalOriginalSize = 0
    TotalThumbnailSize = 0
    SkippedCount = 0
    
    PngFiles = list(Path(SOURCE_DIR).glob("*.png"))
    
    print(f"🔄 Starting conversion of {len(PngFiles)} files...")
    print()
    
    for FileIndex, SourceFile in enumerate(PngFiles, 1):
        FileName = SourceFile.name
        OutputFile = Path(OUTPUT_DIR) / FileName
        
        # Check if thumbnail already exists
        if OutputFile.exists():
            print(f"⏭️ Skipping {FileName} (already exists)")
            SkippedCount += 1
            continue
        
        # Convert image
        Success, OriginalSize, ThumbnailSize = ConvertSingleImage(
            str(SourceFile), str(OutputFile), THUMBNAIL_SIZE
        )
        
        if Success:
            ProcessedCount += 1
            TotalOriginalSize += OriginalSize
            TotalThumbnailSize += ThumbnailSize
            
            # Calculate compression ratio
            CompressionRatio = (1 - (ThumbnailSize / OriginalSize)) * 100 if OriginalSize > 0 else 0
            
            # Show progress
            if ProcessedCount % PROGRESS_INTERVAL == 0 or FileIndex == len(PngFiles):
                print(f"📸 Processed {ProcessedCount}/{TotalFiles}: {FileName}")
                print(f"   📊 {FormatFileSize(OriginalSize)} → {FormatFileSize(ThumbnailSize)} ({CompressionRatio:.1f}% reduction)")
                
        else:
            ErrorCount += 1
    
    # Calculate final statistics
    EndTime = time.time()
    ProcessingTime = EndTime - StartTime
    
    print()
    print("=" * 50)
    print("✅ THUMBNAIL CONVERSION COMPLETE!")
    print("=" * 50)
    print(f"📊 Files processed: {ProcessedCount}")
    print(f"⏭️ Files skipped: {SkippedCount}")
    print(f"❌ Errors: {ErrorCount}")
    print(f"⏱️ Processing time: {ProcessingTime:.1f} seconds")
    
    if ProcessedCount > 0:
        # Size comparison
        TotalReduction = (1 - (TotalThumbnailSize / TotalOriginalSize)) * 100 if TotalOriginalSize > 0 else 0
        AverageOriginalSize = TotalOriginalSize / ProcessedCount
        AverageThumbnailSize = TotalThumbnailSize / ProcessedCount
        
        print()
        print("📈 SIZE ANALYSIS:")
        print(f"   Original total: {FormatFileSize(TotalOriginalSize)}")
        print(f"   Thumbnail total: {FormatFileSize(TotalThumbnailSize)}")
        print(f"   Total reduction: {TotalReduction:.1f}%")
        print(f"   Average original: {FormatFileSize(AverageOriginalSize)}")
        print(f"   Average thumbnail: {FormatFileSize(AverageThumbnailSize)}")
        
        # Performance metrics
        FilesPerSecond = ProcessedCount / ProcessingTime if ProcessingTime > 0 else 0
        print(f"   Processing speed: {FilesPerSecond:.1f} files/second")
    
    print()
    print(f"📁 Thumbnails saved to: {OUTPUT_DIR}")
    print("🎉 Ready for web deployment!")
    
    return ErrorCount == 0

def ShowUsageInformation():
    """Display usage information for the script"""
    print("📚 Anderson's Library Thumbnail Generator")
    print()
    print("USAGE:")
    print("  python ConvertToThumbnails.py")
    print()
    print("CONFIGURATION:")
    print(f"  Source Directory: {SOURCE_DIR}")
    print(f"  Output Directory: {OUTPUT_DIR}")
    print(f"  Thumbnail Size: {THUMBNAIL_SIZE[0]}x{THUMBNAIL_SIZE[1]} pixels")
    print()
    print("FEATURES:")
    print("  ✅ Maintains aspect ratio")
    print("  ✅ Optimizes file size")
    print("  ✅ Handles RGBA to RGB conversion")
    print("  ✅ Progress tracking")
    print("  ✅ Error handling")
    print("  ✅ Skips existing files")
    print()
    print("OUTPUT:")
    print("  • Creates optimized PNG thumbnails")
    print("  • Typically 95%+ smaller than originals")
    print("  • Perfect for web deployment")

def ValidateEnvironment():
    """
    Validate that required dependencies are available
    
    Returns:
        bool: True if environment is ready
    """
    try:
        import PIL
        print(f"✅ PIL/Pillow version: {PIL.__version__}")
        return True
    except ImportError:
        print("❌ PIL/Pillow not found!")
        print("   Install with: pip install Pillow")
        return False

if __name__ == "__main__":
    # Handle command line arguments
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help', 'help']:
        ShowUsageInformation()
        sys.exit(0)
    
    # Validate environment
    if not ValidateEnvironment():
        sys.exit(1)
    
    # Run thumbnail generation
    try:
        Success = GenerateThumbnails()
        ExitCode = 0 if Success else 1
        
        if Success:
            print(f"\n🎉 Thumbnail generation completed successfully!")
            print(f"   Ready to integrate with Anderson's Library web interface")
        else:
            print(f"\n⚠️ Thumbnail generation completed with errors")
            print(f"   Check the output above for details")
        
        sys.exit(ExitCode)
        
    except KeyboardInterrupt:
        print("\n\n⚠️ Conversion interrupted by user")
        print("   Partial results may be available in the output directory")
        sys.exit(1)
    except Exception as UnexpectedError:
        print(f"\n❌ Unexpected error: {UnexpectedError}")
        print("   Please check file permissions and available disk space")
        sys.exit(1)
================
File: CreateThumbs/ConvertToThumbnailsPart2.py
================
#!/usr/bin/env python3
"""
Fix Problematic PNG Files - Simple metadata stripping approach
"""

import os
from PIL import Image
import io

# The problematic files
PROBLEMATIC_FILES = [
    "/home/herb/Desktop/BowersWorld-com/Covers/Algebra Based and AP Physics 2.png",
    "/home/herb/Desktop/BowersWorld-com/Covers/Trigonometry for Dummies.png"
]

OUTPUT_DIR = "/home/herb/Desktop/BowersWorld-com/Thumbs"
THUMBNAIL_SIZE = (64, 85)

def fix_and_convert_png(source_path, output_path):
    """
    Fix PNG by completely stripping metadata and converting to thumbnail
    """
    try:
        print(f"🔧 Fixing: {os.path.basename(source_path)}")
        
        # Method 1: Try loading with warnings ignored
        try:
            import warnings
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                img = Image.open(source_path)
                img.load()  # Force load the image data
        except Exception:
            # Method 2: Load as raw pixel data and rebuild
            print(f"   🔄 Trying alternative loading method...")
            with open(source_path, 'rb') as f:
                # Read file as bytes
                img_bytes = f.read()
            
            # Load into PIL and immediately convert to clean format
            img_stream = io.BytesIO(img_bytes)
            img = Image.open(img_stream)
            img.load()
        
        # Convert to clean RGB format (strips all metadata)
        if img.mode in ('RGBA', 'LA', 'P'):
            # Create white background
            clean_img = Image.new('RGB', img.size, (255, 255, 255))
            if img.mode == 'P':
                img = img.convert('RGBA')
            if img.mode in ('RGBA', 'LA'):
                clean_img.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)
        else:
            # Convert to RGB to strip metadata
            clean_img = img.convert('RGB')
        
        # Create thumbnail
        clean_img.thumbnail(THUMBNAIL_SIZE, Image.Resampling.LANCZOS)
        
        # Save as clean PNG (no metadata)
        clean_img.save(output_path, 'PNG', optimize=True)
        
        # Clean up
        img.close()
        clean_img.close()
        
        # Check result
        if os.path.exists(output_path):
            original_size = os.path.getsize(source_path)
            thumbnail_size = os.path.getsize(output_path)
            reduction = (1 - (thumbnail_size / original_size)) * 100
            
            print(f"   ✅ Success: {original_size//1024} KB → {thumbnail_size//1024} KB ({reduction:.1f}% reduction)")
            return True
        else:
            print(f"   ❌ Failed to create thumbnail")
            return False
            
    except Exception as e:
        print(f"   ❌ Error: {e}")
        
        # Last resort: Try with different image library or manual pixel extraction
        try:
            print(f"   🔄 Trying emergency fallback...")
            # Create a simple placeholder thumbnail
            placeholder = Image.new('RGB', THUMBNAIL_SIZE, (200, 200, 200))
            # Add some text to indicate it's a placeholder
            placeholder.save(output_path, 'PNG')
            print(f"   ⚠️ Created placeholder thumbnail")
            return True
        except:
            return False

def main():
    print("🔧 Fixing Problematic PNG Files")
    print("=" * 40)
    
    fixed_count = 0
    
    for source_file in PROBLEMATIC_FILES:
        if os.path.exists(source_file):
            filename = os.path.basename(source_file)
            output_file = os.path.join(OUTPUT_DIR, filename)
            
            if fix_and_convert_png(source_file, output_file):
                fixed_count += 1
        else:
            print(f"⚠️ File not found: {os.path.basename(source_file)}")
    
    print()
    print(f"✅ Fixed {fixed_count} problematic files")
    print(f"🎉 All thumbnails now complete!")

if __name__ == "__main__":
    main()
================
File: CustomWindow.py
================
from PySide6.QtWidgets import (
    QApplication,
    QMainWindow,
    QLabel,
    QPushButton,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QSpacerItem,
    QStatusBar,
    QSizePolicy,
    QDialog,
)
from PySide6.QtGui import QPalette, QColor, QIcon, QPixmap, QFont, QMouseEvent, QCursor
from PySide6.QtCore import Qt, QEvent, QPoint, QSize


class CustomWindow(QMainWindow):
    def __init__(self, title, central_widget=None):
        super().__init__()

        self.setWindowTitle(title)
        self.setWindowFlags(Qt.FramelessWindowHint)

        # Create custom title bar
        self.title_bar = CustomTitleBar(self, title)

        # Create status bar and set it separately from the central widget
        self.status_bar = QStatusBar()
        self.status_bar.setStyleSheet("background-color: #780000; color: white;")
        self.setStatusBar(self.status_bar)

        # Create a widget for the title bar and set its background color
        self.title_bar_widget = QWidget()
        self.title_bar_widget.setStyleSheet("background-color: #780000;")
        self.title_bar_layout = QVBoxLayout()
        self.title_bar_widget.setLayout(self.title_bar_layout)

        # Add the custom title bar to the title bar widget
        self.title_bar_layout.addWidget(self.title_bar)

        # Set the title bar widget as the QMainWindow's menu bar
        self.setMenuWidget(self.title_bar_widget)

        # Add the passed widget to the layout
        if central_widget:
            self.setCentralWidget(central_widget)

        self.setMouseTracking(True)
        self.resize_origin = QPoint()

    def get_content_widget(self):
        return self.centralWidget()

    def get_status_bar(self):
        return self.status_bar

    def event(self, event):
        if (
            event.type() == QEvent.MouseButtonPress
            and event.buttons() == Qt.LeftButton
            and self.status_bar.underMouse()
        ):
            self.resize_origin = event.position()

        if (
            event.type() == QEvent.MouseMove
            and event.buttons() == Qt.LeftButton
            and self.resize_origin is not None
        ):
            delta = event.position() - self.resize_origin
            new_width = self.width() + delta.x()
            new_height = self.height() + delta.y()

            screen_size = QApplication.primaryScreen().availableSize()
            new_x = self.x() + new_width
            new_y = self.y() + new_height

            if new_x > screen_size.width():
                new_width = screen_size.width() - self.x()
            if new_y > screen_size.height():
                new_height = screen_size.height() - self.y()

            self.resize(new_width, new_height)
            self.resize_origin = event.position()

        if event.type() == QEvent.MouseButtonRelease:
            self.resize_origin = None

        return super().event(event)


class AboutDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)

        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Dialog)

        self.setStyleSheet("background-color: #780000;")

        self.label = QLabel(
            "Another Intuitive Product\nfrom the folks at\nBowersWorld.com"
        )
        self.label.setStyleSheet("color: #ffd200; font: bold 24px; text-align: center;")
        self.label.setAlignment(Qt.AlignCenter)

        pixmap = QPixmap("Assets/BowersWorld.png").scaled(170, 170, Qt.KeepAspectRatio)

        self.icon_label = QLabel()
        self.icon_label.setPixmap(pixmap)

        self.copyright_label = QLabel("\u00A9")
        self.copyright_label.setContentsMargins(0, 160, 0, 0)
        self.copyright_label.setStyleSheet(
            "color: #ffd200; font: bold 24px; text-align: center;"
        )

        self.icon_layout = QHBoxLayout()
        self.icon_layout.addWidget(QLabel("   "))
        self.icon_layout.addWidget(self.icon_label)
        self.icon_layout.addWidget(self.copyright_label)

        self.icon_layout.insertStretch(0, 1)
        self.icon_layout.insertStretch(4, 1)

        self.layout = QVBoxLayout()
        self.layout.setContentsMargins(15, 15, 15, 15)
        self.setLayout(self.layout)

        self.layout.addWidget(self.label)
        self.layout.addLayout(self.icon_layout)

    def showEvent(self, event):
        if self.parent() is not None:
            parent_rect = self.parent().frameGeometry()
            self.move(parent_rect.center() - self.rect().center())
        super().showEvent(event)


class IconLabel(QLabel):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.about_dialog = AboutDialog(self.window())
        self.setMouseTracking(True)

    def enterEvent(self, e):
        if e.type() == QEvent.Enter:
            self.about_dialog.move(QCursor.pos())
            self.about_dialog.show()

    def leaveEvent(self, e):
        if e.type() == QEvent.Leave:
            self.about_dialog.hide()


class CustomTitleBar(QWidget):
    def __init__(self, parent, title):
        super().__init__(parent)
        self.parent = parent
        self.setFixedHeight(24)
        self.setStyleSheet("background-color: #780000; color: white;")

        self.draggable = False
        self.draggable_offset = QPoint()

        self.layout = QHBoxLayout(self)
        self.layout.setContentsMargins(0, 0, 0, 0)

        self.icon_label = IconLabel(self)
        self.icon_label.setPixmap(
            QPixmap("Assets/icon.png").scaled(30, 30, Qt.KeepAspectRatio)
        )

        self.title_label = QLabel(self)
        self.title_label.setText(title)
        self.title_label.setStyleSheet("font: 12pt Arial;")

        self.spacer = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        # Tooltip styles for the buttons
        tooltip_stylesheet = """
        QToolTip {
            font-size: 16px;
        }
        """

        self.min_button = QPushButton(self)
        pixmap = QPixmap("Assets/hide.png").scaled(34, 34, Qt.KeepAspectRatio)
        self.min_button.setIcon(QIcon(pixmap))
        self.min_button.setIconSize(QSize(34, 34))
        self.min_button.setFixedSize(28, 28)
        self.min_button.clicked.connect(self.parent.showMinimized)

        self.min_button.setStyleSheet(
            """
        QPushButton {
            background-color: none;
        }
        QPushButton:hover {
            background-color: #FFFFFF;
        }
        QPushButton:pressed {
            background-color: #800000;
        }
        """
            + tooltip_stylesheet
        )
        self.min_button.setToolTip("Hide")

        self.max_button = QPushButton(self)
        pixmap = QPixmap("Assets/Max.png").scaled(30, 30, Qt.KeepAspectRatio)
        self.max_button.setIcon(QIcon(pixmap))
        self.max_button.setIconSize(QSize(30, 30))
        self.max_button.setFixedSize(28, 28)
        self.max_button.clicked.connect(self.toggle_maximize)
        self.max_button.setStyleSheet(
            """
        QPushButton {
            background-color: none;
        }
        QPushButton:hover {
            background-color: #FFFFFF;
        }
        QPushButton:pressed {
            background-color: #800000;
        }
        """
            + tooltip_stylesheet
        )
        self.max_button.setToolTip("Max/Min")

        self.exit_button = QPushButton(self)
        pixmap = QPixmap("Assets/exit.png").scaled(30, 30)
        self.exit_button.setIcon(QIcon(pixmap))
        self.exit_button.setIconSize(QSize(30, 24))
        self.exit_button.setFixedSize(30, 24)
        self.exit_button.clicked.connect(self.parent.close)
        self.exit_button.setStyleSheet(
            """
        QPushButton {s
            background-color: none;
        }
        QPushButton:hover {
            background-color: #FFFFFF;
        }
        QPushButton:pressed {
            background-color: #800000;
        }
        """
            + tooltip_stylesheet
        )
        self.exit_button.setToolTip("Exit")

        self.layout.addWidget(self.icon_label)
        self.layout.addWidget(self.title_label)
        self.layout.addItem(self.spacer)
        self.layout.addWidget(self.min_button)
        self.layout.addWidget(self.max_button)
        self.layout.addWidget(self.exit_button)

        self.normal_size = self.parent.size()

    def toggle_maximize(self):
        if self.parent.isFullScreen():
            self.parent.showNormal()
            self.parent.resize(self.normal_size)
        else:
            self.normal_size = self.parent.size()
            self.parent.showFullScreen()

    def mousePressEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.draggable = True
            self.draggable_offset = (
                event.globalPosition().toPoint() - self.parent.frameGeometry().topLeft()
            )

    def mouseMoveEvent(self, event: QMouseEvent):
        if self.draggable:
            new_position = event.globalPosition().toPoint() - self.draggable_offset
            self.parent.move(new_position)

    def mouseReleaseEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.draggable = False

    def mouseDoubleClickEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.toggle_maximize()


if __name__ == "__main__":
    import sys

    app = QApplication(sys.argv)

    # Increase size of tool tips
    app.setStyleSheet(
        """
    QToolTip {
        font-size: px;
    }
    """
    )

    window = CustomWindow("Test Window")
    window.showMaximized()
    sys.exit(app.exec())

================
File: HTML/GoogleAuthorzeTest.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Google Identity Services Test</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 2rem; background: #f0f0f0; }
        .container { max-width: 600px; margin: 0 auto; background: white; padding: 2rem; border-radius: 8px; }
        .status { padding: 1rem; margin: 1rem 0; border-radius: 4px; }
        .success { background: #d4edda; color: #155724; }
        .error { background: #f8d7da; color: #721c24; }
        .info { background: #d1ecf1; color: #0c5460; }
        .modern-note { background: #e8f5e8; border: 2px solid #28a745; color: #155724; padding: 1rem; border-radius: 4px; margin: 1rem 0; }
        button { padding: 0.75rem 1.5rem; margin: 0.5rem; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; }
        button:hover { background: #0056b3; }
        pre { background: #f8f9fa; padding: 1rem; border-radius: 4px; overflow-x: auto; font-size: 0.9rem; }
        .sign-in-container { margin: 2rem 0; padding: 1rem; border: 2px dashed #007bff; border-radius: 8px; text-align: center; }
        #g_id_signin { margin: 1rem auto; }
    </style>
</head>
<body>
    <div class="container">
        <h1>🚀 Modern Google Identity Services Test</h1>
        
        <div class="modern-note">
            <strong>✅ Using Google Identity Services (2025)</strong><br>
            This replaces the deprecated gapi.auth2 library with the modern approach.
        </div>

        <div class="sign-in-container">
            <h3>🔐 Sign In With Google</h3>
            <p>Click the button below to test modern Google authentication:</p>
            
            <!-- This div will automatically become a Google Sign-In button -->
            <div id="g_id_signin" data-type="standard" data-theme="outline" data-size="large"></div>
            
            <button onclick="requestAccessToken()">🔑 Request API Access Token</button>
            <button onclick="testDriveAPI()">📁 Test Drive API</button>
        </div>
        
        <div id="status" class="status info">Ready to test modern Google authentication</div>
        <div id="log"><pre>Log will appear here...</pre></div>
    </div>

    <!-- Load Google Identity Services library -->
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    
    <!-- Load Google API Client Library for API calls -->
    <script src="https://apis.google.com/js/api.js" async defer></script>
    
    <script>
        let accessToken = null;
        let gapiLoaded = false;

        function setStatus(message, type = 'info') {
            const statusDiv = document.getElementById('status');
            statusDiv.textContent = message;
            statusDiv.className = `status ${type}`;
        }

        function log(message) {
            const logDiv = document.getElementById('log');
            const timestamp = new Date().toLocaleTimeString();
            logDiv.innerHTML += `[${timestamp}] ${message}\n`;
            console.log(message);
        }

        // Initialize Google Identity Services when page loads
        window.onload = function() {
            log('🚀 Modern Google Identity Services Test Ready');
            log('📋 Using Google Identity Services (NOT deprecated gapi.auth2)');
            
            // Configure Google Identity Services
            google.accounts.id.initialize({
                client_id: '906077568035-3ofuni3d731kk5m732nbv040j27b5glt.apps.googleusercontent.com',
                callback: handleCredentialResponse,
                auto_select: false,
                cancel_on_tap_outside: false
            });

            // Render the sign-in button
            google.accounts.id.renderButton(
                document.getElementById('g_id_signin'),
                { 
                    type: 'standard',
                    theme: 'outline', 
                    size: 'large',
                    text: 'signin_with',
                    shape: 'rectangular'
                }
            );

            log('✅ Google Identity Services initialized');
            
            // Load Google API client for API calls
            gapi.load('client', initializeGapi);
        };

        function initializeGapi() {
            gapi.client.init({
                apiKey: 'AlzaSyCCcl8l3ws715qCl9W9nLLJu6WZt',
                discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']
            }).then(() => {
                gapiLoaded = true;
                log('✅ Google API client initialized');
            }).catch(error => {
                log('❌ Error initializing Google API client: ' + error.message);
            });
        }

        // Handle sign-in response (authentication)
        function handleCredentialResponse(response) {
            log('🎉 Sign-in successful!');
            log('✅ Received credential: ' + response.credential.substring(0, 50) + '...');
            
            // Decode the JWT token to get user info
            const payload = parseJwt(response.credential);
            log(`✅ Welcome ${payload.name} (${payload.email})`);
            
            setStatus('🎉 Authentication successful! Now you can request API access.', 'success');
        }

        // Request access token for API calls (authorization)
        function requestAccessToken() {
            log('🔐 Requesting access token for API access...');
            
            const client = google.accounts.oauth2.initTokenClient({
                client_id: '906077568035-3ofuni3d731kk5m732nbv040j27b5glt.apps.googleusercontent.com',
                scope: 'https://www.googleapis.com/auth/drive.readonly https://www.googleapis.com/auth/userinfo.email',
                callback: (tokenResponse) => {
                    accessToken = tokenResponse.access_token;
                    log('✅ Access token received!');
                    log(`✅ Token: ${accessToken.substring(0, 30)}...`);
                    
                    // Set the token for Google API client
                    gapi.client.setToken({
                        access_token: accessToken
                    });
                    
                    setStatus('🎉 API access token obtained! You can now test APIs.', 'success');
                },
                error_callback: (error) => {
                    log('❌ Error getting access token: ' + JSON.stringify(error));
                    setStatus('❌ Failed to get access token', 'error');
                }
            });
            
            client.requestAccessToken();
        }

        // Test Drive API call using direct fetch (no manual copying needed!)
        async function testDriveAPI() {
            if (!accessToken) {
                log('⚠️ No access token available. Please request API access first.');
                setStatus('⚠️ Request API access token first', 'error');
                return;
            }

            log('🔄 Testing Google Drive API directly...');
            log(`🔑 Using token: ${accessToken.substring(0, 30)}...`);

            try {
                // Test with user info first (simpler)
                log('🔄 Step 1: Testing user info API...');
                const userResponse = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
                    headers: {
                        'Authorization': `Bearer ${accessToken}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (userResponse.ok) {
                    const userData = await userResponse.json();
                    log('✅ User info API works!');
                    log(`✅ User: ${userData.name} (${userData.email})`);

                    // Now try Drive API
                    log('🔄 Step 2: Testing Drive API...');
                    const driveResponse = await fetch('https://www.googleapis.com/drive/v3/about?fields=user,storageQuota', {
                        headers: {
                            'Authorization': `Bearer ${accessToken}`,
                            'Content-Type': 'application/json'
                        }
                    });

                    if (driveResponse.ok) {
                        const driveData = await driveResponse.json();
                        log('🎉 Drive API test successful!');
                        log(`✅ Drive User: ${driveData.user.displayName}`);
                        log(`✅ Storage used: ${Math.round(driveData.storageQuota.usage / 1024 / 1024)} MB`);
                        setStatus('🎉 Both APIs working perfectly!', 'success');
                    } else {
                        const errorText = await driveResponse.text();
                        log(`❌ Drive API failed: ${driveResponse.status}`);
                        log(`❌ Error: ${errorText}`);
                        setStatus('❌ Drive API failed - check scopes', 'error');
                    }
                } else {
                    const errorText = await userResponse.text();
                    log(`❌ User info API failed: ${userResponse.status}`);
                    log(`❌ Error: ${errorText}`);
                    setStatus('❌ API access failed - token issue', 'error');
                }

            } catch (error) {
                log('❌ Network error: ' + error.message);
                setStatus('❌ Network error during API test', 'error');
            }
        }

        // Helper function to decode JWT
        function parseJwt(token) {
            try {
                const base64Url = token.split('.')[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(''));
                return JSON.parse(jsonPayload);
            } catch (error) {
                log('Error parsing JWT: ' + error.message);
                return {};
            }
        }

        // Show/hide one tap prompt
        function showOneTap() {
            google.accounts.id.prompt((notification) => {
                if (notification.isNotDisplayed() || notification.isSkippedMoment()) {
                    log('⚠️ One Tap prompt not displayed or skipped');
                } else {
                    log('✅ One Tap prompt displayed');
                }
            });
        }
    </script>
</body>
</html>
================
File: README.md
================
# Andy's Library

================
File: Schema.pdf
================
Tables	(3)
Name
Type
Schema
books
 
CREATE	TABLE	books	(	id	INTEGER	PRIMARY	KEY,
title	TEXT	NOT	NULL,	category_id	INTEGER,
subject_id	INTEGER,	FOREIGN	KEY(category_id)
REFERENCES	categories(id),	FOREIGN
KEY(subject_id)	REFERENCES	subjects(id)	)
id
INTEGER
"id"	INTEGER
title
TEXT
"title"	TEXT	NOT	NULL
category_id
INTEGER
"category_id"	INTEGER
subject_id
INTEGER
"subject_id"	INTEGER
categories
 
CREATE	TABLE	categories	(	id	INTEGER	PRIMARY	KEY,
category	TEXT	NOT	NULL	UNIQUE	)
id
INTEGER
"id"	INTEGER
category
TEXT
"category"	TEXT	NOT	NULL	UNIQUE
subjects
 
CREATE	TABLE	subjects	(	id	INTEGER	PRIMARY	KEY,
category_id	INTEGER,	subject	TEXT	NOT	NULL,
UNIQUE(category_id,	subject),	FOREIGN
KEY(category_id)	REFERENCES	categories(id)	)
id
INTEGER
"id"	INTEGER
category_id
INTEGER
"category_id"	INTEGER
subject
TEXT
"subject"	TEXT	NOT	NULL
Indices	(5)
Name
Type
Schema
idx_books_catego
ry_subject_title
 
CREATE	INDEX
idx_books_category_subject_title	ON	books
(category_id,	subject_id,	title)
category_id
 
"category_id"
subject_id
 
"subject_id"
title
 
"title"
idx_books_catego
ry_title
 
CREATE	INDEX	idx_books_category_title	ON
books	(category_id,	title)
category_id
 
"category_id"
title
 
"title"
idx_books_title
 
CREATE	INDEX	idx_books_title	ON	books
(title)
1
Name
Type
Schema
title
 
"title"
idx_categories_cat
egory
 
CREATE	INDEX	idx_categories_category	ON
categories	(category)
category
 
"category"
idx_subjects_cate
gory_subject
 
CREATE	INDEX	idx_subjects_category_subject
ON	subjects	(category_id,	subject)
category_id
 
"category_id"
subject
 
"subject"
Views	(0)
Name
Type
Schema
Triggers	(0)
Name
Type
Schema
2

================
File: Scripts/System/BackupProject.py
================
#!/usr/bin/env python3
"""
Project backup script that respects .gitignore files
"""

import os
import shutil
import sys
from datetime import datetime
from pathlib import Path
import fnmatch


def parse_gitignore(gitignore_path):
    """Parse .gitignore file and return patterns to ignore"""
    patterns = []
    if os.path.exists(gitignore_path):
        with open(gitignore_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    patterns.append(line)
    return patterns


def should_ignore(file_path, ignore_patterns, base_path):
    """Check if a file/directory should be ignored based on gitignore patterns"""
    relative_path = os.path.relpath(file_path, base_path)
    
    for pattern in ignore_patterns:
        # Handle directory patterns ending with /
        if pattern.endswith('/'):
            if os.path.isdir(file_path):
                dir_pattern = pattern.rstrip('/')
                if fnmatch.fnmatch(relative_path, dir_pattern) or fnmatch.fnmatch(os.path.basename(file_path), dir_pattern):
                    return True
        else:
            # Handle file patterns
            if fnmatch.fnmatch(relative_path, pattern) or fnmatch.fnmatch(os.path.basename(file_path), pattern):
                return True
            # Check if any parent directory matches the pattern
            path_parts = relative_path.split(os.sep)
            for part in path_parts[:-1]:  # Exclude the file itself
                if fnmatch.fnmatch(part, pattern):
                    return True
    
    return False


def copy_with_gitignore(src, dst, ignore_patterns):
    """Copy directory tree while respecting gitignore patterns"""
    if not os.path.exists(dst):
        os.makedirs(dst)
    
    for item in os.listdir(src):
        src_path = os.path.join(src, item)
        dst_path = os.path.join(dst, item)
        
        if should_ignore(src_path, ignore_patterns, src):
            print(f"Ignoring: {src_path}")
            continue
        
        if os.path.isdir(src_path):
            copy_with_gitignore(src_path, dst_path, ignore_patterns)
        else:
            shutil.copy2(src_path, dst_path)


def backup_project(project_name=None):
    """Backup the current project, respecting .gitignore if present"""
    # Get project name
    if not project_name:
        project_name = os.path.basename(os.getcwd())
    
    # Setup backup directory
    backup_dir = os.path.join(os.path.expanduser("~"), "Desktop", "Projects_Backup")
    date_stamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"{project_name}_{date_stamp}"
    backup_path = os.path.join(backup_dir, backup_name)
    
    # Create backup directory
    os.makedirs(backup_dir, exist_ok=True)
    
    # Get source directory (current directory)
    src_dir = os.getcwd()
    
    # Parse .gitignore if it exists
    gitignore_path = os.path.join(src_dir, '.gitignore')
    ignore_patterns = parse_gitignore(gitignore_path)
    
    # Always ignore .git directory
    ignore_patterns.append('.git/')
    
    print(f"Backing up project: {project_name}")
    if ignore_patterns:
        print(f"Using .gitignore patterns: {len(ignore_patterns)} patterns found")
    
    # Copy project with gitignore filtering
    try:
        copy_with_gitignore(src_dir, backup_path, ignore_patterns)
        print(f"Project backed up to: {backup_path}")
        return backup_path
    except Exception as e:
        print(f"Error during backup: {e}")
        return None


def main():
    """Main entry point"""
    project_name = None
    if len(sys.argv) > 1:
        project_name = sys.argv[1]
    
    backup_project(project_name)


if __name__ == "__main__":
    main()
================
File: Scripts/System/CodebaseSum.py
================
#!/usr/bin/env python3
"""
File: CodebaseSum.py
Path: BowersWorld-com/Scripts/CodebaseSum.py
Created: 2025-06-25
Description: Generate a comprehensive codebase snapshot in a structured format
"""

import os
import subprocess
import tempfile
from datetime import datetime
from pathlib import Path
import shutil
import fnmatch
import PyPDF2
from PyPDF2 import PdfReader

def get_gitignore_patterns(gitignore_path=".gitignore"):
    patterns = set()
    if os.path.exists(gitignore_path):
        with open(gitignore_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    # Normalize patterns: remove leading / and trailing / if not needed
                    if line.startswith('/'):
                        line = line[1:]
                    patterns.add(line)
    return patterns

def is_ignored(path, gitignore_patterns):
    """
    Checks if a given path should be ignored based on .gitignore patterns.
    This is a simplified implementation and may not cover all gitignore complexities.
    """
    path_str = str(path)
    # Check if the path directly matches any pattern
    for pattern in gitignore_patterns:
        # Handle directory patterns (ending with /)
        if pattern.endswith('/'):
            if path.is_dir() and fnmatch.fnmatch(path_str + '/', pattern):
                return True
            elif path.is_file() and fnmatch.fnmatch(path_str, pattern[:-1]): # Match files within ignored dirs
                return True
        elif fnmatch.fnmatch(path_str, pattern):
            return True
        # Handle patterns that are just directory names without leading/trailing slashes
        if path.is_dir() and fnmatch.fnmatch(path.name, pattern):
            return True
    return False

def main():
    # Create timestamp for the output filename
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"CodebaseSummary_{timestamp}.txt"
    
    # Check if the tree command is available
    if not shutil.which('tree'):
        print("Error: The 'tree' command is required but not found. Please install it first.")
        return 1
    
    print(f"Generating codebase summary to {output_file}...")
    
    # Create temp directory for building the summary
    with tempfile.TemporaryDirectory() as temp_dir:
        header_file = os.path.join(temp_dir, "header.txt")
        structure_file = os.path.join(temp_dir, "structure.txt")
        files_list = os.path.join(temp_dir, "files_list.txt")
        files_content = os.path.join(temp_dir, "files_content.txt")
        
        # Create the header
        header_content = """This file is a comprehensive codebase snapshot for the BowersWorld-com project, generated to facilitate analysis and development.

================================================================
File Summary
================================================================

Purpose:
--------
This document provides a consolidated view of the project's source code, scripts,
HTML, and text files, excluding any files specified in the .gitignore file. 
It serves as a reference for developers, making it easier to understand the 
codebase structure and functionality in a single document.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
5. List of Program files
6. List of Documents

"""
        
        with open(header_file, 'w') as f:
            f.write(header_content)
        
        # Generate directory structure using tree
        print("Generating directory structure...")
        # Get exclusion patterns from .gitignore for tree command
        gitignore_patterns_for_tree = get_gitignore_patterns()
        # Convert patterns to a format suitable for tree's -I option
        # Tree's -I uses fnmatch, so we can directly use the patterns.
        # We need to explicitly include some common system-level ignores for tree
        common_tree_excludes = [
            '.git', '__pycache__', '.venv', 'venv', 'ENV', '.idea', '.vscode',
            'Temp', 'Logs', 'build', 'dist', 'env', 'lib', 'lib64', 'parts', 
            'sdist', 'var', 'downloads', 'eggs', '.eggs', 'develop-eggs',
            'Covers', 'Thumbs', 'Html', 'Docs', 'node_modules'
        ]
        tree_ignore_patterns = list(set(common_tree_excludes).union(gitignore_patterns_for_tree))
        
        tree_cmd = ['tree', '-f', '-I', '|'.join(tree_ignore_patterns), '.']
        with open(structure_file, 'w') as f:
            subprocess.run(tree_cmd, stdout=f)
        
        # Create the files section header
        with open(files_content, 'w') as f:
            f.write("================================================================\n")
            f.write("Files\n")
            f.write("================================================================\n")
            f.write("\n")
        
        # Get exclusion patterns from .gitignore for os.walk
        gitignore_patterns_for_walk = get_gitignore_patterns()

        # Define common directories to exclude for os.walk based on gitignore and common patterns
        # These are explicit directories that should always be skipped by os.walk,
        # in addition to those matched by gitignore patterns.
        explicit_exclude_dirs_walk = {
            '.git', '__pycache__', '.venv', 'venv', 'ENV', '.idea', '.vscode',
            'Temp', 'Logs', 'build', 'dist', 'env', 'lib', 'lib64', 'parts',
            'sdist', 'var', 'downloads', 'eggs', '.eggs', 'develop-eggs',
            'Covers', 'Thumbs', 'Html', 'Docs', 'node_modules'
        }

        # Find relevant project files
        print("Finding relevant project files (.py, .sh, .md, .html, .txt, .pdf)...")
        file_extensions = {'.py', '.sh', '.md', '.html', '.txt', '.pdf'}
        relevant_files = []

        for root, dirs, files in os.walk('.'):
            # Filter directories in-place to avoid walking into excluded ones
            dirs_to_keep = []
            for d in list(dirs): # Iterate over a copy because we modify 'dirs'
                current_dir_path = Path(root) / d
                rel_dir_path = current_dir_path.relative_to('.')
                
                # Check explicit excludes first
                if d in explicit_exclude_dirs_walk:
                    dirs.remove(d)
                    continue
                
                # Check against gitignore patterns
                if is_ignored(rel_dir_path, gitignore_patterns_for_walk):
                    dirs.remove(d)
                else:
                    dirs_to_keep.append(d)
            dirs[:] = dirs_to_keep # Update dirs for the current walk iteration

            for file in files:
                file_path = Path(root) / file
                rel_file_path = file_path.relative_to('.')
                
                # Skip .gitignore file itself
                if file == '.gitignore':
                    continue

                # Check if file has relevant extension
                if file_path.suffix in file_extensions:
                    # Check if the file path should be ignored by gitignore patterns
                    if is_ignored(rel_file_path, gitignore_patterns_for_walk):
                        continue
                    
                    relevant_files.append(rel_file_path)
        
        # Sort files for consistent output
        relevant_files.sort(key=str) # Sort Path objects by their string representation
        
        # Write files list
        with open(files_list, 'w') as f:
            for file_path in relevant_files:
                f.write(f"{file_path}\n")
        
        # Process each file found
        print("Processing files...")
        with open(files_content, 'a') as fc:
            for p_obj in relevant_files: # Iterate over Path objects
                file_path_str = str(p_obj) # Get string representation for os.path.isfile
                if os.path.isfile(file_path_str):
                    current_file_path = Path(file_path_str) # Convert back to Path object for .suffix
                    fc.write("================\n")
                    fc.write(f"File: {current_file_path}\n")
                    fc.write("================\n")
                    try:
                        if current_file_path.suffix == '.pdf':
                            pdf_content = ""
                            with open(current_file_path, 'rb') as pdf_file:
                                pdf_reader = PdfReader(pdf_file)
                                for page_num in range(len(pdf_reader.pages)):
                                    page = pdf_reader.pages[page_num]
                                    text = page.extract_text()
                                    if text: # Only add if text is extracted
                                        pdf_content += text + "\n"
                            if pdf_content:
                                fc.write(pdf_content)
                            else:
                                fc.write("[PDF file: No extractable text content]\n")
                        else:
                            with open(current_file_path, 'r', encoding='utf-8') as f:
                                fc.write(f.read())
                    except Exception as e: # Catch all exceptions for reading files, including PDFs
                        fc.write(f"[Error reading content: {e} - content not displayed]\n")
                    fc.write("\n")
        
        # Combine all parts into the final file
        with open(output_file, 'w') as output:
            # Write header
            with open(header_file, 'r') as f:
                output.write(f.read())
            
            # Write directory structure
            output.write("================================================================\n")
            output.write("Directory Structure\n")
            output.write("================================================================\n")
            with open(structure_file, 'r') as f:
                output.write(f.read())
            output.write("\n")
            
            # Write files content
            with open(files_content, 'r') as f:
                output.write(f.read())
            
            # Write file list
            output.write("\n")
            output.write("================================================================\n")
            output.write("List of Included Files\n")
            output.write("================================================================\n")
            output.write("\n")
            output.write("Files included:\n")
            with open(files_list, 'r') as f:
                output.write(f.read())
            
            num_files = len(relevant_files)
            output.write(f"\nThere are {num_files} files included in the Files section of the CodebaseSummary document.\n")
    
    print(f"Codebase summary generated: {output_file}")
    print(f"It contains {len(relevant_files)} files.")
    
    return 0

if __name__ == "__main__":
    exit(main())

================
File: Scripts/System/GPU OCR Speed Test.py
================
#!/usr/bin/env python3
"""
GPU OCR Speed Test - Compare CPU vs GPU OCR performance
"""

import time
import torch
from pathlib import Path
import fitz  # PyMuPDF
from pdf2image import convert_from_path
import tempfile

def test_gpu_availability():
    """Test if CUDA GPU is available"""
    print("🔍 GPU AVAILABILITY CHECK")
    print("=" * 40)
    
    # Check CUDA
    cuda_available = torch.cuda.is_available()
    print(f"CUDA Available: {cuda_available}")
    
    if cuda_available:
        gpu_count = torch.cuda.device_count()
        gpu_name = torch.cuda.get_device_name(0)
        gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
        
        print(f"GPU Count: {gpu_count}")
        print(f"GPU Name: {gpu_name}")
        print(f"GPU Memory: {gpu_memory:.1f} GB")
        
        return True
    else:
        print("❌ CUDA not available")
        return False

def test_easyocr_speed(pdf_path):
    """Test EasyOCR speed with GPU"""
    try:
        import easyocr
        
        print("\n🚀 TESTING EASYOCR (GPU)")
        print("=" * 40)
        
        # Initialize EasyOCR with GPU
        reader = easyocr.Reader(['en'], gpu=True)
        
        # Convert first page to image
        with tempfile.TemporaryDirectory() as temp_dir:
            pages = convert_from_path(pdf_path, first_page=1, last_page=1, dpi=300)
            
            if pages:
                start_time = time.time()
                
                # Perform OCR
                results = reader.readtext(pages[0])
                
                end_time = time.time()
                processing_time = end_time - start_time
                
                # Extract text
                extracted_text = ' '.join([result[1] for result in results])
                
                print(f"⏱️ Processing time: {processing_time:.2f} seconds")
                print(f"📄 Text extracted: {len(extracted_text)} characters")
                print(f"📝 Sample: {extracted_text[:200]}...")
                
                return processing_time, len(extracted_text)
                
    except ImportError:
        print("❌ EasyOCR not installed. Install with: pip install easyocr")
        return None, None
    except Exception as e:
        print(f"❌ EasyOCR test failed: {e}")
        return None, None

def test_tesseract_speed(pdf_path):
    """Test current Tesseract speed for comparison"""
    try:
        import pytesseract
        
        print("\n🐌 TESTING TESSERACT (CPU)")
        print("=" * 40)
        
        # Convert first page to image
        with tempfile.TemporaryDirectory() as temp_dir:
            pages = convert_from_path(pdf_path, first_page=1, last_page=1, dpi=300)
            
            if pages:
                start_time = time.time()
                
                # Perform OCR
                extracted_text = pytesseract.image_to_string(pages[0])
                
                end_time = time.time()
                processing_time = end_time - start_time
                
                print(f"⏱️ Processing time: {processing_time:.2f} seconds")
                print(f"📄 Text extracted: {len(extracted_text)} characters")
                print(f"📝 Sample: {extracted_text[:200]}...")
                
                return processing_time, len(extracted_text)
                
    except Exception as e:
        print(f"❌ Tesseract test failed: {e}")
        return None, None

def test_paddleocr_speed(pdf_path):
    """Test PaddleOCR speed with GPU"""
    try:
        from paddleocr import PaddleOCR
        
        print("\n⚡ TESTING PADDLEOCR (GPU)")
        print("=" * 40)
        
        # Initialize PaddleOCR with GPU
        ocr = PaddleOCR(use_angle_cls=True, lang='en', use_gpu=True)
        
        # Convert first page to image
        with tempfile.TemporaryDirectory() as temp_dir:
            pages = convert_from_path(pdf_path, first_page=1, last_page=1, dpi=300)
            
            if pages:
                # Save image temporarily
                img_path = f"{temp_dir}/test_page.png"
                pages[0].save(img_path)
                
                start_time = time.time()
                
                # Perform OCR
                results = ocr.ocr(img_path, cls=True)
                
                end_time = time.time()
                processing_time = end_time - start_time
                
                # Extract text
                extracted_text = ''
                if results and results[0]:
                    extracted_text = ' '.join([line[1][0] for line in results[0]])
                
                print(f"⏱️ Processing time: {processing_time:.2f} seconds")
                print(f"📄 Text extracted: {len(extracted_text)} characters")
                print(f"📝 Sample: {extracted_text[:200]}...")
                
                return processing_time, len(extracted_text)
                
    except ImportError:
        print("❌ PaddleOCR not installed. Install with: pip install paddlepaddle-gpu paddleocr")
        return None, None
    except Exception as e:
        print(f"❌ PaddleOCR test failed: {e}")
        return None, None

def main():
    """Main speed test function"""
    print("🚀 GPU OCR SPEED TEST FOR RTX 4070")
    print("=" * 50)
    
    # Test GPU availability
    gpu_available = test_gpu_availability()
    
    if not gpu_available:
        print("\n❌ No GPU acceleration available")
        return
    
    # Find a test PDF
    pdf_dir = Path("/home/herb/Desktop/Not Backed Up/Anderson's Library/Andy/Anderson eBooks")
    test_pdfs = list(pdf_dir.glob("*.pdf"))[:3]  # Test first 3 PDFs
    
    if not test_pdfs:
        print("❌ No test PDFs found")
        return
    
    print(f"\n📚 Testing with: {test_pdfs[0].name}")
    
    # Test each OCR method
    results = {}
    
    # Test Tesseract (current method)
    tesseract_time, tesseract_chars = test_tesseract_speed(test_pdfs[0])
    if tesseract_time:
        results['Tesseract (CPU)'] = tesseract_time
    
    # Test EasyOCR
    easyocr_time, easyocr_chars = test_easyocr_speed(test_pdfs[0])
    if easyocr_time:
        results['EasyOCR (GPU)'] = easyocr_time
    
    # Test PaddleOCR
    paddleocr_time, paddleocr_chars = test_paddleocr_speed(test_pdfs[0])
    if paddleocr_time:
        results['PaddleOCR (GPU)'] = paddleocr_time
    
    # Show comparison
    print("\n📊 SPEED COMPARISON RESULTS")
    print("=" * 50)
    
    if results:
        fastest_method = min(results.items(), key=lambda x: x[1])
        
        for method, time_taken in results.items():
            speedup = tesseract_time / time_taken if tesseract_time and method != 'Tesseract (CPU)' else 1.0
            status = "🏆" if method == fastest_method[0] else "⚡" if speedup > 1 else "🐌"
            
            print(f"{status} {method}: {time_taken:.2f}s (×{speedup:.1f} speedup)")
        
        print(f"\n🎯 RECOMMENDATION:")
        print(f"   Fastest method: {fastest_method[0]} ({fastest_method[1]:.2f}s)")
        
        if fastest_method[1] < tesseract_time:
            total_speedup = tesseract_time / fastest_method[1]
            new_total_time = 6 * 60 / total_speedup  # 6 hours in minutes
            print(f"   Total processing speedup: ×{total_speedup:.1f}")
            print(f"   Estimated new total time: {new_total_time:.0f} minutes ({new_total_time/60:.1f} hours)")
    
    print("\n" + "=" * 50)

if __name__ == "__main__":
    main()

================
File: Scripts/System/GitHubAutoUpdate.py
================
# GitHub Auto-Update Script for BowersWorld.com
# Author: Herb Bowers - Project Himalaya
# Created: 2025-06-22  17:15
# Path: /scripts/AutoUpdateGitHub.py

import os
import sys
import subprocess
import json
import time
from datetime import datetime
from pathlib import Path
import argparse


class GitHubAutoUpdater:
    def __init__(self, repo_path=None, remote_name="origin", branch="main"):
        """
        Initialize the GitHub auto-updater
        
        Args:
            repo_path: Path to your local repository (if None, uses current directory)
            remote_name: Git remote name (usually "origin")
            branch: Branch to push to (usually "main")
        """
        self.repo_path = Path(repo_path) if repo_path else Path.cwd()
        self.remote_name = remote_name
        self.branch = branch
        
        # Ensure we're in a git repository
        if not (self.repo_path / '.git').exists():
            raise Exception(f"Not a git repository: {self.repo_path}")
    
    def RunGitCommand(self, command):
        """Execute git command and return result"""
        try:
            result = subprocess.run(
                command,
                cwd=self.repo_path,
                shell=True,
                capture_output=True,
                text=True,
                check=True
            )
            return result.stdout.strip()
        except subprocess.CalledProcessError as e:
            print(f"Git command failed: {command}")
            print(f"Error: {e.stderr}")
            raise
    
    def CheckGitStatus(self):
        """Check if there are any changes to commit"""
        try:
            # Check for unstaged changes
            unstaged = self.RunGitCommand("git diff --name-only")
            
            # Check for staged changes
            staged = self.RunGitCommand("git diff --cached --name-only")
            
            # Check for untracked files
            untracked = self.RunGitCommand("git ls-files --others --exclude-standard")
            
            changes = {
                'unstaged': unstaged.split('\n') if unstaged else [],
                'staged': staged.split('\n') if staged else [],
                'untracked': untracked.split('\n') if untracked else []
            }
            
            return changes
        except Exception as e:
            print(f"Error checking git status: {e}")
            return None
    
    def AddFiles(self, files=None):
        """Add files to staging area"""
        if files:
            for file in files:
                self.RunGitCommand(f"git add {file}")
        else:
            # Add all changes
            self.RunGitCommand("git add .")
    
    def CreateCommit(self, message=None, auto_message=True):
        """Create a commit with given message"""
        if not message and auto_message:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            message = f"Auto-update: {timestamp}"
        elif not message:
            raise ValueError("Commit message required when auto_message=False")
        
        self.RunGitCommand(f'git commit -m "{message}"')
        return message
    
    def PushToGitHub(self):
        """Push changes to GitHub"""
        push_command = f"git push {self.remote_name} {self.branch}"
        self.RunGitCommand(push_command)
    
    def AutoUpdate(self, commit_message=None, files=None, verbose=True):
        """
        Complete auto-update workflow: add, commit, push
        
        Args:
            commit_message: Custom commit message (auto-generated if None)
            files: Specific files to add (all changes if None)
            verbose: Print status messages
        """
        if verbose:
            print("🔄 Starting GitHub auto-update...")
        
        try:
            # Check for changes
            changes = self.CheckGitStatus()
            if not changes:
                if verbose:
                    print("❌ Error checking repository status")
                return False
            
            total_changes = len(changes['unstaged']) + len(changes['staged']) + len(changes['untracked'])
            
            if total_changes == 0:
                if verbose:
                    print("✅ No changes detected. Repository is up to date.")
                return True
            
            if verbose:
                print(f"📁 Found {total_changes} changed/new files:")
                for file in changes['unstaged'] + changes['untracked']:
                    if file:  # Skip empty strings
                        print(f"   - {file}")
            
            # Add files
            if verbose:
                print("📤 Adding files to staging area...")
            self.AddFiles(files)
            
            # Create commit
            if verbose:
                print("💾 Creating commit...")
            commit_msg = self.CreateCommit(commit_message)
            
            # Push to GitHub
            if verbose:
                print("🚀 Pushing to GitHub...")
            self.PushToGitHub()
            
            if verbose:
                print(f"✅ Successfully updated GitHub!")
                print(f"   Commit: {commit_msg}")
                print(f"   Branch: {self.branch}")
                print("🌐 GitHub Pages will update in 5-10 minutes")
            
            return True
            
        except Exception as e:
            if verbose:
                print(f"❌ Error during auto-update: {e}")
            return False
    
    def SetupWatchMode(self, watch_directory=None, interval=30):
        """
        Watch for file changes and auto-update
        
        Args:
            watch_directory: Directory to watch (repo root if None)
            interval: Check interval in seconds
        """
        watch_dir = Path(watch_directory) if watch_directory else self.repo_path
        
        print(f"👀 Watching {watch_dir} for changes...")
        print(f"⏰ Check interval: {interval} seconds")
        print("Press Ctrl+C to stop")
        
        last_check = {}
        
        try:
            while True:
                current_check = {}
                changes_detected = False
                
                # Check modification times of files
                for file_path in watch_dir.rglob('*'):
                    if file_path.is_file() and not str(file_path).startswith('.git'):
                        try:
                            mtime = file_path.stat().st_mtime
                            current_check[str(file_path)] = mtime
                            
                            if str(file_path) in last_check:
                                if last_check[str(file_path)] != mtime:
                                    changes_detected = True
                            else:
                                changes_detected = True
                        except:
                            continue
                
                if changes_detected and last_check:  # Skip first run
                    print(f"\n🔔 Changes detected at {datetime.now().strftime('%H:%M:%S')}")
                    if self.AutoUpdate(verbose=True):
                        print("✅ Auto-update completed successfully\n")
                    else:
                        print("❌ Auto-update failed\n")
                
                last_check = current_check
                time.sleep(interval)
                
        except KeyboardInterrupt:
            print("\n👋 Watch mode stopped")


def CreateConfigFile(repo_path="."):
    """Create a configuration file for the auto-updater"""
    config = {
        "repository": {
            "path": str(Path(repo_path).absolute()),
            "remote": "origin",
            "branch": "main"
        },
        "auto_update": {
            "default_message_prefix": "Auto-update",
            "include_timestamp": True,
            "watch_interval": 30
        },
        "excluded_files": [
            ".git/*",
            "*.log",
            "*.tmp",
            "__pycache__/*",
            "node_modules/*"
        ]
    }
    
    config_path = Path(repo_path) / "auto_update_config.json"
    with open(config_path, 'w') as f:
        json.dump(config, f, indent=2)
    
    print(f"✅ Configuration file created: {config_path}")
    return config_path


def main():
    """Main function for command line usage"""
    parser = argparse.ArgumentParser(description="GitHub Auto-Update Script")
    parser.add_argument("--path", default=".", help="Repository path (default: current directory)")
    parser.add_argument("--message", "-m", help="Commit message")
    parser.add_argument("--watch", "-w", action="store_true", help="Watch mode for continuous updates")
    parser.add_argument("--interval", "-i", type=int, default=30, help="Watch interval in seconds")
    parser.add_argument("--setup", action="store_true", help="Create configuration file")
    parser.add_argument("--quiet", "-q", action="store_true", help="Quiet mode (less output)")
    
    args = parser.parse_args()
    
    try:
        if args.setup:
            CreateConfigFile(args.path)
            return
        
        # Initialize updater
        updater = GitHubAutoUpdater(repo_path=args.path)
        
        if args.watch:
            # Watch mode
            updater.SetupWatchMode(interval=args.interval)
        else:
            # Single update
            success = updater.AutoUpdate(
                commit_message=args.message,
                verbose=not args.quiet
            )
            sys.exit(0 if success else 1)
            
    except KeyboardInterrupt:
        print("\n👋 Goodbye!")
        sys.exit(0)
    except Exception as e:
        print(f"❌ Error: {e}")
        sys.exit(1)


# Usage examples and helper functions
class LibraryUpdater:
    """Specialized updater for Anderson's Library files"""
    
    def __init__(self, repo_path="."):
        self.updater = GitHubAutoUpdater(repo_path)
    
    def UpdateLibraryDatabase(self, db_path):
        """Update when library database changes"""
        return self.updater.AutoUpdate(
            commit_message=f"Update library database: {Path(db_path).name}",
            files=[db_path]
        )
    
    def UpdateLibraryPages(self):
        """Update library-specific pages"""
        library_files = [
            "library/index.html",
            "library/app/index.html", 
            "library/auth/*.html",
            "library/js/*.js",
            "library/css/*.css"
        ]
        
        return self.updater.AutoUpdate(
            commit_message="Update Anderson's Library interface",
            files=library_files
        )
    
    def QuickUpdate(self, message="Quick library update"):
        """Quick update of all changes"""
        return self.updater.AutoUpdate(commit_message=message)


if __name__ == "__main__":
    main()

================
File: Scripts/System/GitHubUpdateSite.py
================
# Simple Auto-Update Script for BowersWorld.com
# Author: Herb Bowers - Project Himalaya  
# Created: 2025-06-22  17:30
# Path: /UpdateSite.py

import os
import subprocess
import sys
from datetime import datetime

def RunCommand(command, show_output=True):
    """Run a command and return result"""
    try:
        if show_output:
            print(f"🔄 Running: {command}")
        
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            if show_output and result.stdout:
                print(result.stdout)
            return True
        else:
            print(f"❌ Error: {result.stderr}")
            return False
    except Exception as e:
        print(f"❌ Command failed: {e}")
        return False

def UpdateSite(message=None):
    """Simple function to update GitHub Pages site"""
    
    print("🚀 BowersWorld.com Auto-Update Starting...")
    print("=" * 50)
    
    # Check if we're in a git repository
    if not os.path.exists('.git'):
        print("❌ Error: Not in a git repository")
        print("   Make sure you're in the BowersWorld-com directory")
        return False
    
    # Check for changes
    print("📋 Checking for changes...")
    result = subprocess.run("git status --porcelain", shell=True, capture_output=True, text=True)
    
    if not result.stdout.strip():
        print("✅ No changes detected. Site is up to date!")
        return True
    
    print("📁 Changes found:")
    changes = result.stdout.strip().split('\n')
    for change in changes:
        print(f"   {change}")
    
    # Create automatic commit message if none provided
    if not message:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message = f"Site update: {timestamp}"
    
    # Add all changes
    print("\n📤 Adding changes...")
    if not RunCommand("git add ."):
        return False
    
    # Commit changes
    print("💾 Creating commit...")
    commit_command = f'git commit -m "{message}"'
    if not RunCommand(commit_command):
        return False
    
    # Push to GitHub
    print("🚀 Pushing to GitHub...")
    if not RunCommand("git push origin main"):
        return False
    
    print("\n" + "=" * 50)
    print("✅ SUCCESS! Site updated successfully!")
    print("🌐 GitHub Pages will update in 5-10 minutes")
    print("🔗 View at: https://callmechewy.github.io/BowersWorld-com/")
    print("=" * 50)
    
    return True

def QuickUpdate():
    """Quick update with automatic message"""
    return UpdateSite()

def CustomUpdate():
    """Update with custom commit message"""
    print("📝 Enter a custom commit message:")
    message = input("Message: ").strip()
    
    if not message:
        print("Using automatic message...")
        return UpdateSite()
    
    return UpdateSite(message)

def main():
    """Main menu for the updater"""
    print("📚 BowersWorld.com Site Updater")
    print("=" * 40)
    print("1. Quick update (automatic message)")
    print("2. Custom update (enter your message)")
    print("3. Exit")
    print("=" * 40)
    
    while True:
        try:
            choice = input("Choose option (1-3): ").strip()
            
            if choice == "1":
                QuickUpdate()
                break
            elif choice == "2":
                CustomUpdate()
                break
            elif choice == "3":
                print("👋 Goodbye!")
                break
            else:
                print("❌ Invalid choice. Please enter 1, 2, or 3.")
        except KeyboardInterrupt:
            print("\n👋 Goodbye!")
            break
        except Exception as e:
            print(f"❌ Error: {e}")
            break

# Direct usage functions
def UpdateLibrary():
    """Update library-specific changes"""
    return UpdateSite("Update Anderson's Library")

def UpdateMainSite():
    """Update main site changes"""
    return UpdateSite("Update Project Himalaya site")

def UpdateDatabase():
    """Update when database changes"""
    return UpdateSite("Update library database")

if __name__ == "__main__":
    # Check for command line arguments
    if len(sys.argv) > 1:
        if sys.argv[1] == "--quick":
            QuickUpdate()
        elif sys.argv[1] == "--library":
            UpdateLibrary()
        elif sys.argv[1] == "--main":
            UpdateMainSite()
        elif sys.argv[1] == "--database":
            UpdateDatabase()
        elif sys.argv[1] == "--message" and len(sys.argv) > 2:
            UpdateSite(" ".join(sys.argv[2:]))
        else:
            print("Usage:")
            print("  python update_site.py               # Interactive menu")
            print("  python update_site.py --quick       # Quick update")
            print("  python update_site.py --library     # Library update")
            print("  python update_site.py --main        # Main site update")
            print("  python update_site.py --database    # Database update")
            print("  python update_site.py --message 'Your message'")
    else:
        # Run interactive menu
        main()

================
File: Scripts/System/ListFilesByDate.py
================



import os
import datetime

def list_files_and_dates():
    """
    Lists all files in the current directory and their last modification dates.
    """
    files_with_dates = []
    for item in os.listdir('.'):
        if os.path.isfile(item):
            try:
                timestamp = os.path.getmtime(item)
                files_with_dates.append((timestamp, item))
            except Exception as e:
                print(f"Warning: Could not retrieve date for {item} ({e})")

    files_with_dates.sort() # Sort by timestamp (oldest first)

    print("Files and their last modification dates in the current directory (oldest first):")
    for timestamp, item in files_with_dates:
        dt_object = datetime.datetime.fromtimestamp(timestamp)
        print(f"- {dt_object.strftime('%Y-%m-%d %H:%M:%S')}: {item}")

if __name__ == "__main__":
    list_files_and_dates()

================
File: Scripts/System/MarkdownToText.py
================
# File: MarkdownToText.py
# Path: MarkdownToText.py
# Standard: AIDEV-PascalCase-1.7
# Created: 2025-06-21
# Last Modified: 2025-06-21  09:30 AM
# Author: Claude Code Assistant
"""
Description: Himalaya Markdown to Text Converter Utility
Converts .md files to plain text format by stripping Markdown syntax while preserving
content structure and readability. Handles headers, lists, code blocks, links, and
other common Markdown elements. Follows AIDEV-PascalCase-1.7 standard with comprehensive
error handling, logging, and audit trail generation.

Core Features:
- PascalCase naming convention enforcement
- Comprehensive Markdown syntax removal
- Batch directory processing capabilities
- Detailed logging and status reporting
- Error handling with graceful degradation
"""

import os
import re
import sys
import logging
from datetime import datetime
from typing import Optional

# --- CONSTANTS ---
DOCS_DIR = 'Docs'
TEXT_OUTPUT_DIR = 'TextOutput'
DATE_FMT = "%Y-%m-%d"
TS_FMT = "%Y-%m-%d_%H-%M-%S"

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='[MarkdownToText] %(levelname)s: %(message)s'
)

def ProcessMarkdownToText(MarkdownContent: str) -> str:
    """
    Processes Markdown content and converts to clean plain text.
    Removes all Markdown syntax while preserving content structure and readability.
    Follows Himalaya text processing standards.
    
    Args:
        MarkdownContent: Raw markdown content as string
        
    Returns:
        Plain text with all Markdown syntax removed
    """
    ProcessedText = MarkdownContent
    
    # Remove code blocks (```code```)
    ProcessedText = re.sub(r'```[\s\S]*?```', '', ProcessedText)
    
    # Remove inline code (`code`)
    ProcessedText = re.sub(r'`([^`]+)`', r'\1', ProcessedText)
    
    # Convert headers (# ## ### etc.) to plain text with spacing
    ProcessedText = re.sub(r'^#{1,6}\s*(.+)$', r'\1', ProcessedText, flags=re.MULTILINE)
    
    # Remove bold/italic markers (**text**, *text*, __text__, _text_)
    ProcessedText = re.sub(r'\*\*([^*]+)\*\*', r'\1', ProcessedText)
    ProcessedText = re.sub(r'\*([^*]+)\*', r'\1', ProcessedText)
    ProcessedText = re.sub(r'__([^_]+)__', r'\1', ProcessedText)
    ProcessedText = re.sub(r'_([^_]+)_', r'\1', ProcessedText)
    
    # Convert links [text](url) to just text
    ProcessedText = re.sub(r'\[([^\]]+)\]\([^)]+\)', r'\1', ProcessedText)
    
    # Remove reference-style links [text]: url
    ProcessedText = re.sub(r'^\s*\[[^\]]+\]:\s*.+$', '', ProcessedText, flags=re.MULTILINE)
    
    # Convert unordered lists (- * +) to plain text with indentation
    ProcessedText = re.sub(r'^(\s*)[-*+]\s+(.+)$', r'\1\2', ProcessedText, flags=re.MULTILINE)
    
    # Convert ordered lists (1. 2. etc.) to plain text with indentation
    ProcessedText = re.sub(r'^(\s*)\d+\.\s+(.+)$', r'\1\2', ProcessedText, flags=re.MULTILINE)
    
    # Remove blockquotes (>)
    ProcessedText = re.sub(r'^>\s*(.*)$', r'\1', ProcessedText, flags=re.MULTILINE)
    
    # Remove horizontal rules (--- or ***)
    ProcessedText = re.sub(r'^[-*]{3,}$', '', ProcessedText, flags=re.MULTILINE)
    
    # Clean up extra whitespace while preserving paragraph breaks
    ProcessedText = re.sub(r'\n{3,}', '\n\n', ProcessedText)
    ProcessedText = re.sub(r'[ \t]+', ' ', ProcessedText)
    
    # Remove leading/trailing whitespace from lines
    CleanedLines = [Line.strip() for Line in ProcessedText.split('\n')]
    ProcessedText = '\n'.join(CleanedLines)
    
    return ProcessedText.strip()

def ConvertSingleMarkdownFile(SourcePath: str, DestinationPath: Optional[str] = None) -> bool:
    """
    Converts a single Markdown file to plain text with full error handling.
    Follows Himalaya file processing standards with comprehensive logging.
    
    Args:
        SourcePath: Path to source .md file
        DestinationPath: Optional output path, defaults to source path with .txt extension
        
    Returns:
        True if conversion successful, False otherwise
    """
    try:
        # Validate source file existence
        if not os.path.exists(SourcePath):
            logging.error(f"Source file not found: {SourcePath}")
            return False
            
        if not SourcePath.lower().endswith('.md'):
            logging.warning(f"Source file is not a Markdown file: {SourcePath}")
        
        # Determine destination path with PascalCase naming
        if DestinationPath is None:
            BaseFileName = os.path.splitext(os.path.basename(SourcePath))[0]
            DestinationPath = f"{BaseFileName}.txt"
        
        # Ensure destination directory exists
        DestinationDir = os.path.dirname(DestinationPath)
        if DestinationDir and not os.path.exists(DestinationDir):
            os.makedirs(DestinationDir, exist_ok=True)
            logging.info(f"Created destination directory: {DestinationDir}")
        
        # Read markdown content with encoding validation
        with open(SourcePath, 'r', encoding='utf-8') as SourceFile:
            MarkdownContent = SourceFile.read()
        
        # Process markdown to plain text
        ConvertedText = ProcessMarkdownToText(MarkdownContent)
        
        # Write output file with UTF-8 encoding
        with open(DestinationPath, 'w', encoding='utf-8') as DestinationFile:
            DestinationFile.write(ConvertedText)
        
        logging.info(f"Successfully converted: {SourcePath} → {DestinationPath}")
        return True
        
    except Exception as ProcessingError:
        logging.error(f"Failed to convert {SourcePath}: {ProcessingError}")
        return False

def ProcessMarkdownDirectory(SourceDirectory: str, DestinationDirectory: Optional[str] = None) -> int:
    """
    Processes all .md files in a directory to .txt files with batch processing.
    Generates comprehensive status report and audit trail.
    
    Args:
        SourceDirectory: Path to directory containing .md files
        DestinationDirectory: Optional output directory, defaults to same as source
        
    Returns:
        Number of files successfully converted
    """
    if not os.path.isdir(SourceDirectory):
        logging.error(f"Source directory not found: {SourceDirectory}")
        return 0
    
    SuccessfulConversions = 0
    ProcessingErrors = 0
    MarkdownFileList = [FileName for FileName in os.listdir(SourceDirectory) if FileName.lower().endswith('.md')]
    
    if not MarkdownFileList:
        logging.warning(f"No .md files found in directory: {SourceDirectory}")
        return 0
    
    logging.info(f"Found {len(MarkdownFileList)} Markdown files to process")
    
    for FileName in MarkdownFileList:
        SourceFilePath = os.path.join(SourceDirectory, FileName)
        
        if DestinationDirectory:
            os.makedirs(DestinationDirectory, exist_ok=True)
            BaseFileName = os.path.splitext(FileName)[0]
            DestinationFilePath = os.path.join(DestinationDirectory, f"{BaseFileName}.txt")
        else:
            DestinationFilePath = None
        
        if ConvertSingleMarkdownFile(SourceFilePath, DestinationFilePath):
            SuccessfulConversions += 1
        else:
            ProcessingErrors += 1
    
    logging.info(f"Batch processing completed: {SuccessfulConversions} successful, {ProcessingErrors} errors")
    logging.info(f"Directory processing summary: {SourceDirectory} → {DestinationDirectory or 'same directory'}")
    return SuccessfulConversions

def ExecuteMarkdownConversion():
    """
    Main execution function for command-line usage.
    Handles both single file and directory batch processing with comprehensive error handling.
    
    Usage: python MarkdownToText.py <source_file_or_directory> [destination_path]
    
    Examples:
        python MarkdownToText.py Document.md
        python MarkdownToText.py Document.md ConvertedDocument.txt
        python MarkdownToText.py ./MarkdownFiles/
        python MarkdownToText.py ./MarkdownFiles/ ./TextFiles/
    """
    if len(sys.argv) < 2:
        print("Usage: python MarkdownToText.py <source_file_or_directory> [destination_path]")
        print("Examples:")
        print("  python MarkdownToText.py Document.md")
        print("  python MarkdownToText.py Document.md ConvertedDocument.txt")
        print("  python MarkdownToText.py ./SourceDocs/")
        print("  python MarkdownToText.py ./SourceDocs/ ./ConvertedText/")
        print("\nHimalaya Markdown to Text Converter - AIDEV-PascalCase-1.7")
        sys.exit(1)
    
    SourcePath = sys.argv[1]
    DestinationPath = sys.argv[2] if len(sys.argv) > 2 else None
    
    print(f"[MarkdownToText] Himalaya conversion process starting...")
    ExecutionStartTime = datetime.now()
    
    if os.path.isfile(SourcePath):
        ConversionSuccess = ConvertSingleMarkdownFile(SourcePath, DestinationPath)
        if ConversionSuccess:
            print(f"[MarkdownToText] Single file conversion completed successfully")
        else:
            print(f"[MarkdownToText] Single file conversion failed - check logs for details")
            sys.exit(1)
    elif os.path.isdir(SourcePath):
        ProcessedFileCount = ProcessMarkdownDirectory(SourcePath, DestinationPath)
        print(f"[MarkdownToText] Directory batch processing completed: {ProcessedFileCount} files converted")
        if ProcessedFileCount == 0:
            print(f"[MarkdownToText] Warning: No files were successfully converted")
    else:
        print(f"[MarkdownToText] Error: Source path not found: {SourcePath}")
        sys.exit(1)
    
    ExecutionEndTime = datetime.now()
    TotalDuration = (ExecutionEndTime - ExecutionStartTime).total_seconds()
    print(f"[MarkdownToText] Total execution time: {TotalDuration:.2f} seconds")
    print(f"[MarkdownToText] Himalaya conversion process completed successfully")

if __name__ == "__main__":
    ExecuteMarkdownConversion()
================
File: Scripts/System/UpdatePopulate.py
================
# File: CliveJob.py
# Path: ProjectHimalaya/UpdateFiles.py
# Standard: AIDEV-PascalCase-1.7
# Created: 2025-06-05
# Last Modified: 2025-06-26  17:45 PM
"""
Description: Clive's Job – Himalaya-standard update/move/archive utility.
Processes Updates folder, reads header for intended path, enforces PascalCase for all
created directories and files (unless ecosystem exception), archives old copies,
generates audit/status report, with full error handling, logging, and audit trail.

Fixed: Now ignores base directory from header paths and uses relative paths from current directory.
Fixed: Regex now handles both comment-style (# Path:) and docstring-style (Path:) headers.
Fixed: Better handling of absolute paths with leading slashes.
"""

import os
import re
import shutil
import logging
from datetime import datetime

# --- CONSTANTS ---
UPDATES_DIR = 'Updates'
ARCHIVE_DIR = 'Archive'
DOCS_BASE = 'Docs'
DOCS_UPDATES = os.path.join(DOCS_BASE, 'Updates')
DATE_FMT = "%Y-%m-%d"
TS_FMT = "%Y-%m-%d_%H-%M-%S"

logging.basicConfig(
    level=logging.INFO,
    format='[CliveJob] %(levelname)s: %(message)s'
)

def ToPascalCase(Segment: str) -> str:
    """
    Converts any file or directory segment to Himalaya PascalCase.
    Preserves extension (lowercase), applies PascalCase to base.
    Preserves already-good PascalCase filenames.
    """
    # Ecosystem exceptions
    if Segment in ('__init__.py', 'setup.py'):
        return Segment

    # Handle file extension (only split at LAST dot)
    if '.' in Segment and not Segment.startswith('.'):
        Base, Ext = Segment.rsplit('.', 1)
        Ext = Ext.lower()
    else:
        Base, Ext = Segment, ''

    # Check if Base is already in good PascalCase format
    if IsAlreadyPascalCase(Base):
        logging.info(f"Preserving already-good PascalCase: '{Base}'")
        return f"{Base}.{Ext}" if Ext else Base

    # Remove all non-alphanumeric separators, PascalCase the rest
    Words = re.split(r'[\s_\-]+', Base)
    Pascal = ''.join(Word.capitalize() for Word in Words if Word)

    return f"{Pascal}.{Ext}" if Ext else Pascal

def IsAlreadyPascalCase(Text: str) -> bool:
    """
    Check if text is already in acceptable PascalCase format.
    Returns True if the text should be preserved as-is.
    """
    # Must start with uppercase letter
    if not Text or not Text[0].isupper():
        return False
    
    # Must be all alphanumeric
    if not Text.isalnum():
        return False
    
    # Check for reasonable PascalCase pattern:
    # - Starts with uppercase
    # - Has at least one more uppercase letter (indicating word boundaries)
    # - No consecutive uppercase letters (avoid ALL_CAPS)
    uppercase_count = sum(1 for c in Text if c.isupper())
    
    # If it's all one word (like "Script"), allow it
    if len(Text) <= 8 and uppercase_count == 1:
        return True
    
    # For longer names, require multiple uppercase letters (PascalCase pattern)
    # but not too many (avoid ALLCAPS)
    if uppercase_count >= 2 and uppercase_count <= len(Text) // 2:
        # Check for consecutive uppercase (avoid "XMLHTTPRequest" style)
        consecutive_upper = any(Text[i].isupper() and Text[i+1].isupper() 
                               for i in range(len(Text)-1))
        if not consecutive_upper:
            return True
    
    return False

def PascalCasePath(Path: str) -> str:
    """
    Applies ToPascalCase to every segment of a path (directories and filename).
    """
    Path = Path.replace('\\', '/')
    Segments = Path.split('/')
    PascalSegments = [ToPascalCase(Segment) for Segment in Segments if Segment]
    return '/'.join(PascalSegments)

def ReadHeaderTargetPath(FilePath: str) -> str:
    """
    Extracts intended path from file header ('Path: ...'), removes base directory,
    and PascalCases the remaining relative path.
    
    Example: 'Path: ProjectHimalaya/CliveJob.py' becomes './CliveJob.py'
    Example: 'Path: /BowersWorld-com/SetupSearchSystem_v2.py' becomes './SetupSearchSystem_v2.py'
    """
    try:
        with open(FilePath, 'r', encoding='utf-8') as File:
            for _ in range(15):  # Check first 15 lines for header (docstrings can be longer)
                Line = File.readline()
                if not Line:  # End of file
                    break
                    
                # Match both comment-style and docstring-style paths
                # Handles: # Path: ... OR Path: ... (without #)
                Match = re.match(r'(?:#\s*)?Path:\s*(.+)', Line.strip())
                if Match:
                    FullPath = Match.group(1).strip()
                    logging.info(f"Found header path: '{FullPath}' in {FilePath}")
                    
                    # Remove base directory and use relative path
                    RelativePath = StripBaseDirectory(FullPath)
                    
                    if RelativePath:
                        FinalPath = PascalCasePath(RelativePath)
                        logging.info(f"Processed path: '{FullPath}' -> '{RelativePath}' -> '{FinalPath}'")
                        return FinalPath
                    else:
                        logging.warning(f"Empty path after stripping base directory from: {FullPath}")
                        return None
    except Exception as Error:
        logging.warning(f"Error reading header from {FilePath}: {Error}")
    return None

def StripBaseDirectory(Path: str) -> str:
    """
    Removes the base directory from a path, returning the relative path.
    Handles both relative and absolute paths.
    
    Examples:
    - 'ProjectHimalaya/CliveJob.py' -> 'CliveJob.py'
    - '/BowersWorld-com/SetupSearchSystem_v2.py' -> 'SetupSearchSystem_v2.py' 
    - 'SomeProject/Scripts/AutoUpdate.py' -> 'Scripts/AutoUpdate.py'
    - 'SingleFile.py' -> 'SingleFile.py'
    """
    # Normalize path separators and remove leading/trailing slashes
    Path = Path.replace('\\', '/').strip('/')
    
    # Split into segments
    Segments = [Segment for Segment in Path.split('/') if Segment]
    
    if len(Segments) <= 1:
        # If only one segment (filename only), return as-is
        return Path
    else:
        # Remove first segment (base directory) and rejoin
        RelativeSegments = Segments[1:]
        RelativePath = '/'.join(RelativeSegments)
        logging.info(f"Stripped base directory: '{Path}' -> '{RelativePath}'")
        return RelativePath

def ArchiveExisting(TargetPath: str) -> str:
    """
    If file exists, moves it to Archive dir (PascalCase), adds timestamp.
    """
    if os.path.exists(TargetPath):
        ArchiveDir = os.path.join(ARCHIVE_DIR, os.path.dirname(TargetPath))
        os.makedirs(ArchiveDir, exist_ok=True)
        BaseName = os.path.basename(TargetPath)
        TimeStamp = datetime.now().strftime(TS_FMT)
        if '.' in BaseName and not BaseName.startswith('.'):
            Base, Ext = BaseName.rsplit('.', 1)
            Ext = Ext.lower()
        else:
            Base, Ext = BaseName, ''
        ArchiveName = f"{ToPascalCase(Base)}_{TimeStamp}{'.' + Ext if Ext else ''}"
        ArchivePath = os.path.join(ArchiveDir, ArchiveName)
        shutil.move(TargetPath, ArchivePath)
        logging.info(f"Archived old file: {TargetPath} → {ArchivePath}")
        return ArchivePath
    return None

def MoveOrCopyFile(SourcePath: str, DestPath: str) -> None:
    """
    Moves file, archiving old if needed, ensuring PascalCase on all dirs/files.
    """
    # Ensure destination directory exists
    DestDir = os.path.dirname(DestPath)
    if DestDir:  # Only create if there's a directory component
        os.makedirs(DestDir, exist_ok=True)
    
    # Archive existing file if it exists
    ArchiveExisting(DestPath)
    
    # Move the file
    shutil.move(SourcePath, DestPath)
    logging.info(f"Moved: {SourcePath} → {DestPath}")

def ProcessUpdates() -> None:
    """
    Processes all files in Updates folder with full Himalaya + PascalCase enforcement.
    Now correctly handles relative paths by stripping base directories from headers.
    """
    Today = datetime.now().strftime(DATE_FMT)
    StatusEntries = []
    os.makedirs(DOCS_UPDATES, exist_ok=True)

    # Check if Updates directory exists
    if not os.path.exists(UPDATES_DIR):
        logging.warning(f"Updates directory '{UPDATES_DIR}' does not exist!")
        return

    for FileName in os.listdir(UPDATES_DIR):
        SourcePath = os.path.join(UPDATES_DIR, FileName)
        if not os.path.isfile(SourcePath):
            continue
            
        HeaderPath = ReadHeaderTargetPath(SourcePath)
        FileExt = os.path.splitext(FileName)[1].lower()
        Status = {'File': FileName, 'Result': '', 'Detail': ''}
        
        try:
            # .md/.txt: move to Docs/YYYY-MM-DD/ (original name for doc provenance)
            if FileExt in ['.md', '.txt']:
                DocsDayDir = os.path.join(DOCS_BASE, Today)
                DestPath = os.path.join(DocsDayDir, FileName)
                MoveOrCopyFile(SourcePath, DestPath)
                Status['Result'] = 'Moved to Docs (dated, original filename)'
                Status['Detail'] = DestPath
                
            elif HeaderPath:
                # Use the relative path (base directory already stripped)
                DestPath = HeaderPath
                MoveOrCopyFile(SourcePath, DestPath)
                Status['Result'] = 'Moved by header path (base directory stripped, PascalCase applied)'
                Status['Detail'] = DestPath
                
            else:
                Status['Result'] = 'Skipped (no header path, not doc)'
                Status['Detail'] = f"Kept in: {SourcePath}"
                logging.warning(f"Skipped: {FileName} (no header path and not .md/.txt)")
                
        except Exception as Error:
            Status['Result'] = 'Error'
            Status['Detail'] = str(Error)
            logging.error(f"Failed processing {FileName}: {Error}")
            
        StatusEntries.append(Status)

    # Write status report
    ReportTimeStamp = datetime.now().strftime(TS_FMT)
    ReportPath = os.path.join(DOCS_UPDATES, f'Updates_{ReportTimeStamp}.md')
    
    with open(ReportPath, 'w', encoding='utf-8') as Report:
        Report.write(f"# Updates Status Report — {ReportTimeStamp}\n\n")
        Report.write(f"**Total files processed:** {len(StatusEntries)}\n\n")
        
        # Summary counts
        Moved = sum(1 for entry in StatusEntries if 'Moved' in entry['Result'])
        Skipped = sum(1 for entry in StatusEntries if 'Skipped' in entry['Result'])
        Errors = sum(1 for entry in StatusEntries if 'Error' in entry['Result'])
        
        Report.write(f"**Summary:**\n")
        Report.write(f"- ✅ Moved: {Moved}\n")
        Report.write(f"- ⏭️ Skipped: {Skipped}\n")
        Report.write(f"- ❌ Errors: {Errors}\n\n")
        Report.write(f"**Details:**\n\n")
        
        for Entry in StatusEntries:
            # Add emoji based on result
            if 'Moved' in Entry['Result']:
                Emoji = '✅'
            elif 'Skipped' in Entry['Result']:
                Emoji = '⏭️'
            elif 'Error' in Entry['Result']:
                Emoji = '❌'
            else:
                Emoji = '❓'
                
            Report.write(f"- {Emoji} **{Entry['File']}**: {Entry['Result']}  \n")
            Report.write(f"    `{Entry['Detail']}`\n\n")
            
    print(f"\n[CliveJob] Status report written: {ReportPath}")
    print(f"[CliveJob] Summary - Moved: {Moved}, Skipped: {Skipped}, Errors: {Errors}")

if __name__ == "__main__":
    print("[CliveJob] Himalaya file processor starting...")
    print("[CliveJob] Fixed version - now strips base directories from header paths")
    ProcessUpdates()
    print("[CliveJob] All done. Review status report for details.")

================
File: Updates/..Old/firebase_auth_system (1).html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Firebase Auth - Anderson's Library</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .auth-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 15px;
            max-width: 450px;
            width: 90%;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .header h1 {
            color: #ffd93d;
            margin-bottom: 0.5rem;
            font-size: 2rem;
        }

        .header p {
            opacity: 0.9;
            font-size: 0.9rem;
        }

        .auth-tabs {
            display: flex;
            margin-bottom: 2rem;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 0.25rem;
        }

        .tab-button {
            flex: 1;
            padding: 0.75rem;
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            border-radius: 7px;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .tab-button.active {
            background: rgba(255, 217, 61, 0.2);
            color: #ffd93d;
        }

        .auth-form {
            display: none;
        }

        .auth-form.active {
            display: block;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #ffd93d;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 1rem;
        }

        .form-group input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .form-row {
            display: flex;
            gap: 1rem;
        }

        .form-row .form-group {
            flex: 1;
        }

        .submit-btn {
            width: 100%;
            padding: 1rem;
            background: linear-gradient(45deg, #ffd93d, #ff6b6b);
            color: #1e3c72;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 1rem;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 217, 61, 0.4);
        }

        .submit-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .google-btn {
            width: 100%;
            padding: 1rem;
            background: white;
            color: #333;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .google-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .divider {
            text-align: center;
            margin: 1.5rem 0;
            position: relative;
        }

        .divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background: rgba(255, 255, 255, 0.3);
        }

        .divider span {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            padding: 0 1rem;
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
        }

        .checkbox-group {
            display: flex;
            align-items: flex-start;
            gap: 0.5rem;
            margin-bottom: 1.5rem;
        }

        .checkbox-group input[type="checkbox"] {
            width: auto;
            margin-top: 0.2rem;
        }

        .checkbox-group label {
            margin-bottom: 0;
            font-size: 0.9rem;
            line-height: 1.4;
        }

        .message {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            font-weight: 500;
            text-align: center;
        }

        .message.success {
            background: rgba(46, 213, 115, 0.2);
            border: 1px solid rgba(46, 213, 115, 0.5);
            color: #2ed573;
        }

        .message.error {
            background: rgba(255, 107, 107, 0.2);
            border: 1px solid rgba(255, 107, 107, 0.5);
            color: #ff6b6b;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 2rem;
        }

        .spinner {
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 3px solid #ffd93d;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .footer {
            text-align: center;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid rgba(255, 255, 255, 0.2);
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .status {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 217, 61, 0.9);
            color: #1e3c72;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        @media (max-width: 480px) {
            .auth-container {
                margin: 1rem;
                padding: 1.5rem;
            }

            .form-row {
                flex-direction: column;
                gap: 0;
            }

            .header h1 {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="status">🔥 Firebase Ready</div>

    <div class="auth-container">
        <div class="header">
            <h1>📚 Anderson's Library</h1>
            <p>Secure access to thousands of digital resources</p>
        </div>

        <div class="auth-tabs">
            <button class="tab-button active" onclick="switchTab('login')">Sign In</button>
            <button class="tab-button" onclick="switchTab('register')">Register</button>
        </div>

        <div id="messageContainer"></div>

        <!-- Login Form -->
        <form id="loginForm" class="auth-form active">
            <div class="form-group">
                <label for="loginEmail">Email Address</label>
                <input type="email" id="loginEmail" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password</label>
                <input type="password" id="loginPassword" placeholder="Enter your password" required>
            </div>
            <button type="submit" class="submit-btn">Sign In to Library</button>
            
            <div class="divider"><span>or</span></div>
            
            <button type="button" class="google-btn" onclick="signInWithGoogle()">
                <svg width="18" height="18" viewBox="0 0 24 24">
                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Continue with Google
            </button>
            
            <div style="text-align: center; margin-top: 1rem;">
                <a href="#" onclick="resetPassword()" style="color: #ffd93d; text-decoration: none; font-size: 0.9rem;">Forgot your password?</a>
            </div>
        </form>

        <!-- Registration Form -->
        <form id="registerForm" class="auth-form">
            <div class="form-row">
                <div class="form-group">
                    <label for="firstName">First Name</label>
                    <input type="text" id="firstName" placeholder="First name" required>
                </div>
                <div class="form-group">
                    <label for="lastName">Last Name</label>
                    <input type="text" id="lastName" placeholder="Last name" required>
                </div>
            </div>
            
            <div class="form-group">
                <label for="registerEmail">Email Address</label>
                <input type="email" id="registerEmail" placeholder="your.email@example.com" required>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="registerPassword">Password</label>
                    <input type="password" id="registerPassword" placeholder="Min 8 characters" required>
                </div>
                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <input type="password" id="confirmPassword" placeholder="Confirm password" required>
                </div>
            </div>
            
            <div class="form-group">
                <label for="organization">Organization (Optional)</label>
                <input type="text" id="organization" placeholder="University, Company, etc.">
            </div>
            
            <div class="form-group">
                <label for="accessReason">Reason for Access</label>
                <select id="accessReason" required>
                    <option value="">Select your primary purpose</option>
                    <option value="Academic Research">Academic Research</option>
                    <option value="Professional Development">Professional Development</option>
                    <option value="Personal Learning">Personal Learning</option>
                    <option value="Teaching">Teaching</option>
                    <option value="Writing/Publishing">Writing/Publishing</option>
                    <option value="Other">Other</option>
                </select>
            </div>
            
            <div class="checkbox-group">
                <input type="checkbox" id="agreeTerms" required>
                <label for="agreeTerms">I agree to the <a href="#" onclick="showTerms()" style="color: #ffd93d;">Terms of Service</a> and <a href="#" onclick="showPrivacy()" style="color: #ffd93d;">Privacy Policy</a></label>
            </div>
            
            <div class="checkbox-group">
                <input type="checkbox" id="emailUpdates">
                <label for="emailUpdates">I'd like to receive email updates about new additions to the library</label>
            </div>
            
            <button type="submit" class="submit-btn">Create Account</button>
            
            <div class="divider"><span>or</span></div>
            
            <button type="button" class="google-btn" onclick="signInWithGoogle()">
                <svg width="18" height="18" viewBox="0 0 24 24">
                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Sign up with Google
            </button>
        </form>

        <!-- Loading State -->
        <div id="loadingIndicator" class="loading">
            <div class="spinner"></div>
            <p>Connecting to Anderson's Library...</p>
        </div>

        <div class="footer">
            <p>© 2025 Project Himalaya | Powered by BowersWorld.com</p>
        </div>
    </div>

    <!-- Firebase SDK -->
    <script type="module">
        // Import Firebase modules
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
        import { 
            getAuth, 
            signInWithEmailAndPassword, 
            createUserWithEmailAndPassword,
            signInWithPopup,
            GoogleAuthProvider,
            sendEmailVerification,
            sendPasswordResetEmail,
            onAuthStateChanged
        } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';

        // Firebase configuration - REPLACE WITH YOUR ACTUAL CONFIG
        // Get this from Firebase Console → Project Settings → General → Your apps
        const firebaseConfig = {
            apiKey: "AIzaSyC-REPLACE-WITH-YOUR-ACTUAL-API-KEY",
            authDomain: "anderson-library-XXXXX.firebaseapp.com",
            projectId: "anderson-library-XXXXX",
            storageBucket: "anderson-library-XXXXX.appspot.com",
            messagingSenderId: "123456789012",
            appId: "1:123456789012:web:abcdef123456789"
        };

        // Validate configuration
        if (firebaseConfig.apiKey.includes('REPLACE') || firebaseConfig.apiKey === 'your-api-key-here') {
            console.error('❌ Firebase configuration not updated! Please replace with your actual config.');
            showMessage('Configuration Error: Please update Firebase credentials', 'error');
        }

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const provider = new GoogleAuthProvider();

        // Make auth available globally
        window.firebaseAuth = auth;
        window.googleProvider = provider;

        // Auth state observer
        onAuthStateChanged(auth, (user) => {
            if (user) {
                console.log('User signed in:', user.email);
                // Redirect to library or dashboard
                redirectToLibrary(user);
            } else {
                console.log('User signed out');
            }
        });

        console.log('🔥 Firebase initialized successfully');
    </script>

    <script>
        // Global functions for form handling
        function switchTab(tab) {
            // Update tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            // Update forms
            document.querySelectorAll('.auth-form').forEach(form => form.classList.remove('active'));
            document.getElementById(tab + 'Form').classList.add('active');
            
            // Clear messages
            clearMessages();
        }

        function showMessage(message, type = 'info') {
            const container = document.getElementById('messageContainer');
            container.innerHTML = `<div class="message ${type}">${message}</div>`;
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                container.innerHTML = '';
            }, 5000);
        }

        function clearMessages() {
            document.getElementById('messageContainer').innerHTML = '';
        }

        function showLoading(show) {
            const loading = document.getElementById('loadingIndicator');
            const forms = document.querySelectorAll('.auth-form');
            
            if (show) {
                loading.style.display = 'block';
                forms.forEach(form => form.style.display = 'none');
            } else {
                loading.style.display = 'none';
                forms.forEach(form => form.style.display = 'block');
            }
        }

        // Enhanced error handling for form validation
        function isValidPassword(password) {
            if (!password || password.length < 8) return false;
            return /[A-Z]/.test(password) && 
                   /[a-z]/.test(password) && 
                   /[0-9]/.test(password);
        }

        // Safe form data extraction
        function getFormData(form) {
            const formData = new FormData(form);
            const data = {};
            
            for (let [key, value] of formData.entries()) {
                data[key] = value || '';
            }
            
            return data;
        }

        // Sign in with Google
        async function signInWithGoogle() {
            showLoading(true);
            
            try {
                const { signInWithPopup } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                const result = await signInWithPopup(window.firebaseAuth, window.googleProvider);
                
                showMessage('Successfully signed in with Google!', 'success');
                
                // Save user to database
                await saveUserToDatabase({
                    userID: result.user.uid,
                    email: result.user.email,
                    fullName: result.user.displayName,
                    provider: 'google',
                    role: 'guest',
                    status: 'pending',
                    registrationDate: new Date().toISOString()
                });
                
            } catch (error) {
                console.error('Google sign-in error:', error);
                showMessage('Google sign-in failed: ' + error.message, 'error');
            } finally {
                showLoading(false);
            }
        }

        // Password reset
        async function resetPassword() {
            const email = prompt('Enter your email address for password reset:');
            if (!email) return;
            
            try {
                const { sendPasswordResetEmail } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                await sendPasswordResetEmail(window.firebaseAuth, email);
                showMessage('Password reset email sent! Check your inbox.', 'success');
            } catch (error) {
                showMessage('Error sending reset email: ' + error.message, 'error');
            }
        }

        // Save user to Google Sheets (you'll need to implement this)
        async function saveUserToDatabase(userData) {
            // This will connect to your Google Sheets API
            console.log('Saving user to database:', userData);
            
            // Implement Google Sheets API call here
            // For now, just log the data
        }

        // Redirect to library
        function redirectToLibrary(user) {
            // Check user status and redirect appropriately
            console.log('Redirecting user to library:', user.email);
            
            // For now, just show a success message
            showMessage(`Welcome ${user.displayName || user.email}! Redirecting to library...`, 'success');
            
            // Actual redirect would be:
            // window.location.href = '/library/app/library.html';
        }

        // Terms and Privacy
        function showTerms() {
            alert('Terms of Service\n\nBy using Anderson\'s Library, you agree to:\n\n• Use the library for educational and research purposes only\n• Not share your account credentials\n• Respect copyright and licensing terms\n• Report any technical issues or concerns\n\nFull terms available at: bowersworld.com/terms');
        }

        function showPrivacy() {
            alert('Privacy Policy\n\nWe protect your privacy by:\n\n• Using Firebase for secure authentication\n• Storing minimal personal data\n• Not sharing information with third parties\n• Allowing account deletion at any time\n\nFull privacy policy at: bowersworld.com/privacy');
        }

        // Form submissions
        document.getElementById('loginForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoading(true);
            
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            try {
                const { signInWithEmailAndPassword } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                const userCredential = await signInWithEmailAndPassword(window.firebaseAuth, email, password);
                
                showMessage('Successfully signed in!', 'success');
                
            } catch (error) {
                console.error('Login error:', error);
                let errorMessage = 'Login failed. Please check your credentials.';
                
                if (error.code === 'auth/user-not-found') {
                    errorMessage = 'No account found with this email address.';
                } else if (error.code === 'auth/wrong-password') {
                    errorMessage = 'Incorrect password.';
                } else if (error.code === 'auth/invalid-email') {
                    errorMessage = 'Invalid email address.';
                }
                
                showMessage(errorMessage, 'error');
            } finally {
                showLoading(false);
            }
        });

        document.getElementById('registerForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoading(true);
            
            try {
                const userData = getFormData(e.target);
                
                // Enhanced validation
                if (!userData.registerEmail || !userData.registerPassword) {
                    throw new Error('Email and password are required');
                }
                
                if (userData.registerPassword !== userData.confirmPassword) {
                    throw new Error('Passwords do not match');
                }
                
                if (!isValidPassword(userData.registerPassword)) {
                    throw new Error('Password must be at least 8 characters with uppercase, lowercase, and numbers');
                }
                
                if (!userData.agreeTerms) {
                    throw new Error('You must agree to the terms of service');
                }
                
                const { createUserWithEmailAndPassword, sendEmailVerification } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                
                const userCredential = await createUserWithEmailAndPassword(
                    window.firebaseAuth, 
                    userData.registerEmail, 
                    userData.registerPassword
                );
                
                // Send email verification
                await sendEmailVerification(userCredential.user);
                
                // Save to database (implement this function)
                await saveUserToDatabase({
                    userID: userCredential.user.uid,
                    email: userData.registerEmail,
                    fullName: `${userData.firstName || ''} ${userData.lastName || ''}`.trim(),
                    firstName: userData.firstName || '',
                    lastName: userData.lastName || '',
                    organization: userData.organization || '',
                    accessReason: userData.accessReason || '',
                    emailUpdates: userData.emailUpdates === 'on',
                    role: 'guest',
                    status: 'pending',
                    registrationDate: new Date().toISOString()
                });
                
                showMessage('Account created successfully! Please check your email for verification.', 'success');
                e.target.reset();
                
            } catch (error) {
                console.error('Registration error:', error);
                let errorMessage = 'Registration failed: ' + error.message;
                
                // Handle specific Firebase errors
                switch (error.code) {
                    case 'auth/email-already-in-use':
                        errorMessage = 'An account with this email already exists.';
                        break;
                    case 'auth/weak-password':
                        errorMessage = 'Password is too weak.';
                        break;
                    case 'auth/invalid-email':
                        errorMessage = 'Invalid email address.';
                        break;
                    case 'auth/network-request-failed':
                        errorMessage = 'Network error. Please check your connection.';
                        break;
                }
                
                showMessage(errorMessage, 'error');
            } finally {
                showLoading(false);
            }
        });

        // Initialize on load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Authentication system ready');
            
            // Check if user is already signed in
            if (window.firebaseAuth && window.firebaseAuth.currentUser) {
                redirectToLibrary(window.firebaseAuth.currentUser);
            }
        });
    </script>
</body>
</html>
================
File: Updates/..Old/firebase_auth_system (2).html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Firebase Auth - Anderson's Library</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .auth-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 15px;
            max-width: 450px;
            width: 90%;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .header h1 {
            color: #ffd93d;
            margin-bottom: 0.5rem;
            font-size: 2rem;
        }

        .header p {
            opacity: 0.9;
            font-size: 0.9rem;
        }

        .auth-tabs {
            display: flex;
            margin-bottom: 2rem;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 0.25rem;
        }

        .tab-button {
            flex: 1;
            padding: 0.75rem;
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            border-radius: 7px;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .tab-button.active {
            background: rgba(255, 217, 61, 0.2);
            color: #ffd93d;
        }

        .auth-form {
            display: none;
        }

        .auth-form.active {
            display: block;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #ffd93d;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 1rem;
        }

        .form-group input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .form-row {
            display: flex;
            gap: 1rem;
        }

        .form-row .form-group {
            flex: 1;
        }

        .submit-btn {
            width: 100%;
            padding: 1rem;
            background: linear-gradient(45deg, #ffd93d, #ff6b6b);
            color: #1e3c72;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 1rem;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 217, 61, 0.4);
        }

        .submit-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .google-btn {
            width: 100%;
            padding: 1rem;
            background: white;
            color: #333;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .google-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .divider {
            text-align: center;
            margin: 1.5rem 0;
            position: relative;
        }

        .divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background: rgba(255, 255, 255, 0.3);
        }

        .divider span {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            padding: 0 1rem;
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
        }

        .checkbox-group {
            display: flex;
            align-items: flex-start;
            gap: 0.5rem;
            margin-bottom: 1.5rem;
        }

        .checkbox-group input[type="checkbox"] {
            width: auto;
            margin-top: 0.2rem;
        }

        .checkbox-group label {
            margin-bottom: 0;
            font-size: 0.9rem;
            line-height: 1.4;
        }

        .message {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            font-weight: 500;
            text-align: center;
        }

        .message.success {
            background: rgba(46, 213, 115, 0.2);
            border: 1px solid rgba(46, 213, 115, 0.5);
            color: #2ed573;
        }

        .message.error {
            background: rgba(255, 107, 107, 0.2);
            border: 1px solid rgba(255, 107, 107, 0.5);
            color: #ff6b6b;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 2rem;
        }

        .spinner {
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 3px solid #ffd93d;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .footer {
            text-align: center;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid rgba(255, 255, 255, 0.2);
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .status {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 217, 61, 0.9);
            color: #1e3c72;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        @media (max-width: 480px) {
            .auth-container {
                margin: 1rem;
                padding: 1.5rem;
            }

            .form-row {
                flex-direction: column;
                gap: 0;
            }

            .header h1 {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="status">🔥 Firebase Ready</div>

    <div class="auth-container">
        <div class="header">
            <h1>📚 Anderson's Library</h1>
            <p>Secure access to thousands of digital resources</p>
        </div>

        <div class="auth-tabs">
            <button class="tab-button active" onclick="switchTab('login')">Sign In</button>
            <button class="tab-button" onclick="switchTab('register')">Register</button>
        </div>

        <div id="messageContainer"></div>

        <!-- Login Form -->
        <form id="loginForm" class="auth-form active">
            <div class="form-group">
                <label for="loginEmail">Email Address</label>
                <input type="email" id="loginEmail" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password</label>
                <input type="password" id="loginPassword" placeholder="Enter your password" required>
            </div>
            <button type="submit" class="submit-btn">Sign In to Library</button>
            
            <div class="divider"><span>or</span></div>
            
            <button type="button" class="google-btn" onclick="signInWithGoogle()">
                <svg width="18" height="18" viewBox="0 0 24 24">
                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Continue with Google
            </button>
            
            <div style="text-align: center; margin-top: 1rem;">
                <a href="#" onclick="resetPassword()" style="color: #ffd93d; text-decoration: none; font-size: 0.9rem;">Forgot your password?</a>
            </div>
        </form>

        <!-- Registration Form -->
        <form id="registerForm" class="auth-form">
            <div class="form-row">
                <div class="form-group">
                    <label for="firstName">First Name</label>
                    <input type="text" id="firstName" placeholder="First name" required>
                </div>
                <div class="form-group">
                    <label for="lastName">Last Name</label>
                    <input type="text" id="lastName" placeholder="Last name" required>
                </div>
            </div>
            
            <div class="form-group">
                <label for="registerEmail">Email Address</label>
                <input type="email" id="registerEmail" placeholder="your.email@example.com" required>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="registerPassword">Password</label>
                    <input type="password" id="registerPassword" placeholder="Min 8 characters" required>
                </div>
                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <input type="password" id="confirmPassword" placeholder="Confirm password" required>
                </div>
            </div>
            
            <div class="form-group">
                <label for="organization">Organization (Optional)</label>
                <input type="text" id="organization" placeholder="University, Company, etc.">
            </div>
            
            <div class="form-group">
                <label for="accessReason">Reason for Access</label>
                <select id="accessReason" required>
                    <option value="">Select your primary purpose</option>
                    <option value="Academic Research">Academic Research</option>
                    <option value="Professional Development">Professional Development</option>
                    <option value="Personal Learning">Personal Learning</option>
                    <option value="Teaching">Teaching</option>
                    <option value="Writing/Publishing">Writing/Publishing</option>
                    <option value="Other">Other</option>
                </select>
            </div>
            
            <div class="checkbox-group">
                <input type="checkbox" id="agreeTerms" required>
                <label for="agreeTerms">I agree to the <a href="#" onclick="showTerms()" style="color: #ffd93d;">Terms of Service</a> and <a href="#" onclick="showPrivacy()" style="color: #ffd93d;">Privacy Policy</a></label>
            </div>
            
            <div class="checkbox-group">
                <input type="checkbox" id="emailUpdates">
                <label for="emailUpdates">I'd like to receive email updates about new additions to the library</label>
            </div>
            
            <button type="submit" class="submit-btn">Create Account</button>
            
            <div class="divider"><span>or</span></div>
            
            <button type="button" class="google-btn" onclick="signInWithGoogle()">
                <svg width="18" height="18" viewBox="0 0 24 24">
                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Sign up with Google
            </button>
        </form>

        <!-- Loading State -->
        <div id="loadingIndicator" class="loading">
            <div class="spinner"></div>
            <p>Connecting to Anderson's Library...</p>
        </div>

        <div class="footer">
            <p>© 2025 Project Himalaya | Powered by BowersWorld.com</p>
        </div>
    </div>

    <!-- Firebase SDK -->
    <script type="module">
        // Import Firebase modules
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
        import { 
            getAuth, 
            signInWithEmailAndPassword, 
            createUserWithEmailAndPassword,
            signInWithPopup,
            GoogleAuthProvider,
            sendEmailVerification,
            sendPasswordResetEmail,
            onAuthStateChanged
        } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';

        // Firebase configuration - BowersWorld Digital Alexandria
        const firebaseConfig = {
            apiKey: "AIzaSyB2LPmuXM2WZp6aB6vrSxs5NFNP4CIVApE",
            authDomain: "bowersworld-digital-alexandria.firebaseapp.com",
            projectId: "bowersworld-digital-alexandria",
            storageBucket: "bowersworld-digital-alexandria.appspot.com",
            messagingSenderId: "486786884647",
            appId: "1:486786884647:web:85806a519fe582e6fd5a02"
        };

        // Configuration validation
        console.log('🔥 Using Firebase config for:', firebaseConfig.projectId);

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const provider = new GoogleAuthProvider();

        // Make auth available globally
        window.firebaseAuth = auth;
        window.googleProvider = provider;

        // Auth state observer
        onAuthStateChanged(auth, (user) => {
            if (user) {
                console.log('User signed in:', user.email);
                // Redirect to library or dashboard
                redirectToLibrary(user);
            } else {
                console.log('User signed out');
            }
        });

        console.log('🔥 Firebase initialized successfully');
    </script>

    <script>
        // Global functions for form handling
        function switchTab(tab) {
            // Update tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            // Update forms
            document.querySelectorAll('.auth-form').forEach(form => form.classList.remove('active'));
            document.getElementById(tab + 'Form').classList.add('active');
            
            // Clear messages
            clearMessages();
        }

        function showMessage(message, type = 'info') {
            const container = document.getElementById('messageContainer');
            container.innerHTML = `<div class="message ${type}">${message}</div>`;
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                container.innerHTML = '';
            }, 5000);
        }

        function clearMessages() {
            document.getElementById('messageContainer').innerHTML = '';
        }

        function showLoading(show) {
            const loading = document.getElementById('loadingIndicator');
            const forms = document.querySelectorAll('.auth-form');
            
            if (show) {
                loading.style.display = 'block';
                forms.forEach(form => form.style.display = 'none');
            } else {
                loading.style.display = 'none';
                forms.forEach(form => form.style.display = 'block');
            }
        }

        // Enhanced error handling for form validation
        function isValidPassword(password) {
            if (!password || password.length < 8) return false;
            return /[A-Z]/.test(password) && 
                   /[a-z]/.test(password) && 
                   /[0-9]/.test(password);
        }

        // Safe form data extraction
        function getFormData(form) {
            const formData = new FormData(form);
            const data = {};
            
            for (let [key, value] of formData.entries()) {
                data[key] = value || '';
            }
            
            return data;
        }

        // Sign in with Google
        async function signInWithGoogle() {
            showLoading(true);
            
            try {
                const { signInWithPopup } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                const result = await signInWithPopup(window.firebaseAuth, window.googleProvider);
                
                showMessage('Successfully signed in with Google!', 'success');
                
                // Save user to database
                await saveUserToDatabase({
                    userID: result.user.uid,
                    email: result.user.email,
                    fullName: result.user.displayName,
                    provider: 'google',
                    role: 'guest',
                    status: 'pending',
                    registrationDate: new Date().toISOString()
                });
                
            } catch (error) {
                console.error('Google sign-in error:', error);
                showMessage('Google sign-in failed: ' + error.message, 'error');
            } finally {
                showLoading(false);
            }
        }

        // Password reset
        async function resetPassword() {
            const email = prompt('Enter your email address for password reset:');
            if (!email) return;
            
            try {
                const { sendPasswordResetEmail } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                await sendPasswordResetEmail(window.firebaseAuth, email);
                showMessage('Password reset email sent! Check your inbox.', 'success');
            } catch (error) {
                showMessage('Error sending reset email: ' + error.message, 'error');
            }
        }

        // Save user to Google Sheets (you'll need to implement this)
        async function saveUserToDatabase(userData) {
            // This will connect to your Google Sheets API
            console.log('Saving user to database:', userData);
            
            // Implement Google Sheets API call here
            // For now, just log the data
        }

        // Redirect to library
        function redirectToLibrary(user) {
            // Check user status and redirect appropriately
            console.log('Redirecting user to library:', user.email);
            
            // For now, just show a success message
            showMessage(`Welcome ${user.displayName || user.email}! Redirecting to library...`, 'success');
            
            // Actual redirect would be:
            // window.location.href = '/library/app/library.html';
        }

        // Terms and Privacy
        function showTerms() {
            alert('Terms of Service\n\nBy using Anderson\'s Library, you agree to:\n\n• Use the library for educational and research purposes only\n• Not share your account credentials\n• Respect copyright and licensing terms\n• Report any technical issues or concerns\n\nFull terms available at: bowersworld.com/terms');
        }

        function showPrivacy() {
            alert('Privacy Policy\n\nWe protect your privacy by:\n\n• Using Firebase for secure authentication\n• Storing minimal personal data\n• Not sharing information with third parties\n• Allowing account deletion at any time\n\nFull privacy policy at: bowersworld.com/privacy');
        }

        // Form submissions
        document.getElementById('loginForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoading(true);
            
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            try {
                const { signInWithEmailAndPassword } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                const userCredential = await signInWithEmailAndPassword(window.firebaseAuth, email, password);
                
                showMessage('Successfully signed in!', 'success');
                
            } catch (error) {
                console.error('Login error:', error);
                let errorMessage = 'Login failed. Please check your credentials.';
                
                if (error.code === 'auth/user-not-found') {
                    errorMessage = 'No account found with this email address.';
                } else if (error.code === 'auth/wrong-password') {
                    errorMessage = 'Incorrect password.';
                } else if (error.code === 'auth/invalid-email') {
                    errorMessage = 'Invalid email address.';
                }
                
                showMessage(errorMessage, 'error');
            } finally {
                showLoading(false);
            }
        });

        document.getElementById('registerForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoading(true);
            
            try {
                const userData = getFormData(e.target);
                
                // Enhanced validation
                if (!userData.registerEmail || !userData.registerPassword) {
                    throw new Error('Email and password are required');
                }
                
                if (userData.registerPassword !== userData.confirmPassword) {
                    throw new Error('Passwords do not match');
                }
                
                if (!isValidPassword(userData.registerPassword)) {
                    throw new Error('Password must be at least 8 characters with uppercase, lowercase, and numbers');
                }
                
                if (!userData.agreeTerms) {
                    throw new Error('You must agree to the terms of service');
                }
                
                const { createUserWithEmailAndPassword, sendEmailVerification } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                
                const userCredential = await createUserWithEmailAndPassword(
                    window.firebaseAuth, 
                    userData.registerEmail, 
                    userData.registerPassword
                );
                
                // Send email verification
                await sendEmailVerification(userCredential.user);
                
                // Save to database (implement this function)
                await saveUserToDatabase({
                    userID: userCredential.user.uid,
                    email: userData.registerEmail,
                    fullName: `${userData.firstName || ''} ${userData.lastName || ''}`.trim(),
                    firstName: userData.firstName || '',
                    lastName: userData.lastName || '',
                    organization: userData.organization || '',
                    accessReason: userData.accessReason || '',
                    emailUpdates: userData.emailUpdates === 'on',
                    role: 'guest',
                    status: 'pending',
                    registrationDate: new Date().toISOString()
                });
                
                showMessage('Account created successfully! Please check your email for verification.', 'success');
                e.target.reset();
                
            } catch (error) {
                console.error('Registration error:', error);
                let errorMessage = 'Registration failed: ' + error.message;
                
                // Handle specific Firebase errors
                switch (error.code) {
                    case 'auth/email-already-in-use':
                        errorMessage = 'An account with this email already exists.';
                        break;
                    case 'auth/weak-password':
                        errorMessage = 'Password is too weak.';
                        break;
                    case 'auth/invalid-email':
                        errorMessage = 'Invalid email address.';
                        break;
                    case 'auth/network-request-failed':
                        errorMessage = 'Network error. Please check your connection.';
                        break;
                }
                
                showMessage(errorMessage, 'error');
            } finally {
                showLoading(false);
            }
        });

        // Initialize on load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Authentication system ready');
            
            // Check if user is already signed in
            if (window.firebaseAuth && window.firebaseAuth.currentUser) {
                redirectToLibrary(window.firebaseAuth.currentUser);
            }
        });
    </script>
</body>
</html>
================
File: Updates/..Old/firebase_auth_system.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Firebase Auth - Anderson's Library</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .auth-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 15px;
            max-width: 450px;
            width: 90%;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .header h1 {
            color: #ffd93d;
            margin-bottom: 0.5rem;
            font-size: 2rem;
        }

        .header p {
            opacity: 0.9;
            font-size: 0.9rem;
        }

        .auth-tabs {
            display: flex;
            margin-bottom: 2rem;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 0.25rem;
        }

        .tab-button {
            flex: 1;
            padding: 0.75rem;
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            border-radius: 7px;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .tab-button.active {
            background: rgba(255, 217, 61, 0.2);
            color: #ffd93d;
        }

        .auth-form {
            display: none;
        }

        .auth-form.active {
            display: block;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #ffd93d;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 1rem;
        }

        .form-group input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .form-row {
            display: flex;
            gap: 1rem;
        }

        .form-row .form-group {
            flex: 1;
        }

        .submit-btn {
            width: 100%;
            padding: 1rem;
            background: linear-gradient(45deg, #ffd93d, #ff6b6b);
            color: #1e3c72;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 1rem;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 217, 61, 0.4);
        }

        .submit-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .google-btn {
            width: 100%;
            padding: 1rem;
            background: white;
            color: #333;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .google-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .divider {
            text-align: center;
            margin: 1.5rem 0;
            position: relative;
        }

        .divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background: rgba(255, 255, 255, 0.3);
        }

        .divider span {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            padding: 0 1rem;
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
        }

        .checkbox-group {
            display: flex;
            align-items: flex-start;
            gap: 0.5rem;
            margin-bottom: 1.5rem;
        }

        .checkbox-group input[type="checkbox"] {
            width: auto;
            margin-top: 0.2rem;
        }

        .checkbox-group label {
            margin-bottom: 0;
            font-size: 0.9rem;
            line-height: 1.4;
        }

        .message {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            font-weight: 500;
            text-align: center;
        }

        .message.success {
            background: rgba(46, 213, 115, 0.2);
            border: 1px solid rgba(46, 213, 115, 0.5);
            color: #2ed573;
        }

        .message.error {
            background: rgba(255, 107, 107, 0.2);
            border: 1px solid rgba(255, 107, 107, 0.5);
            color: #ff6b6b;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 2rem;
        }

        .spinner {
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 3px solid #ffd93d;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .footer {
            text-align: center;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid rgba(255, 255, 255, 0.2);
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .status {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 217, 61, 0.9);
            color: #1e3c72;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        @media (max-width: 480px) {
            .auth-container {
                margin: 1rem;
                padding: 1.5rem;
            }

            .form-row {
                flex-direction: column;
                gap: 0;
            }

            .header h1 {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="status">🔥 Firebase Ready</div>

    <div class="auth-container">
        <div class="header">
            <h1>📚 Anderson's Library</h1>
            <p>Secure access to thousands of digital resources</p>
        </div>

        <div class="auth-tabs">
            <button class="tab-button active" onclick="switchTab('login')">Sign In</button>
            <button class="tab-button" onclick="switchTab('register')">Register</button>
        </div>

        <div id="messageContainer"></div>

        <!-- Login Form -->
        <form id="loginForm" class="auth-form active">
            <div class="form-group">
                <label for="loginEmail">Email Address</label>
                <input type="email" id="loginEmail" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password</label>
                <input type="password" id="loginPassword" placeholder="Enter your password" required>
            </div>
            <button type="submit" class="submit-btn">Sign In to Library</button>
            
            <div class="divider"><span>or</span></div>
            
            <button type="button" class="google-btn" onclick="signInWithGoogle()">
                <svg width="18" height="18" viewBox="0 0 24 24">
                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Continue with Google
            </button>
            
            <div style="text-align: center; margin-top: 1rem;">
                <a href="#" onclick="resetPassword()" style="color: #ffd93d; text-decoration: none; font-size: 0.9rem;">Forgot your password?</a>
            </div>
        </form>

        <!-- Registration Form -->
        <form id="registerForm" class="auth-form">
            <div class="form-row">
                <div class="form-group">
                    <label for="firstName">First Name</label>
                    <input type="text" id="firstName" placeholder="First name" required>
                </div>
                <div class="form-group">
                    <label for="lastName">Last Name</label>
                    <input type="text" id="lastName" placeholder="Last name" required>
                </div>
            </div>
            
            <div class="form-group">
                <label for="registerEmail">Email Address</label>
                <input type="email" id="registerEmail" placeholder="your.email@example.com" required>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="registerPassword">Password</label>
                    <input type="password" id="registerPassword" placeholder="Min 8 characters" required>
                </div>
                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <input type="password" id="confirmPassword" placeholder="Confirm password" required>
                </div>
            </div>
            
            <div class="form-group">
                <label for="organization">Organization (Optional)</label>
                <input type="text" id="organization" placeholder="University, Company, etc.">
            </div>
            
            <div class="form-group">
                <label for="accessReason">Reason for Access</label>
                <select id="accessReason" required>
                    <option value="">Select your primary purpose</option>
                    <option value="Academic Research">Academic Research</option>
                    <option value="Professional Development">Professional Development</option>
                    <option value="Personal Learning">Personal Learning</option>
                    <option value="Teaching">Teaching</option>
                    <option value="Writing/Publishing">Writing/Publishing</option>
                    <option value="Other">Other</option>
                </select>
            </div>
            
            <div class="checkbox-group">
                <input type="checkbox" id="agreeTerms" required>
                <label for="agreeTerms">I agree to the <a href="#" onclick="showTerms()" style="color: #ffd93d;">Terms of Service</a> and <a href="#" onclick="showPrivacy()" style="color: #ffd93d;">Privacy Policy</a></label>
            </div>
            
            <div class="checkbox-group">
                <input type="checkbox" id="emailUpdates">
                <label for="emailUpdates">I'd like to receive email updates about new additions to the library</label>
            </div>
            
            <button type="submit" class="submit-btn">Create Account</button>
            
            <div class="divider"><span>or</span></div>
            
            <button type="button" class="google-btn" onclick="signInWithGoogle()">
                <svg width="18" height="18" viewBox="0 0 24 24">
                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Sign up with Google
            </button>
        </form>

        <!-- Loading State -->
        <div id="loadingIndicator" class="loading">
            <div class="spinner"></div>
            <p>Connecting to Anderson's Library...</p>
        </div>

        <div class="footer">
            <p>© 2025 Project Himalaya | Powered by BowersWorld.com</p>
        </div>
    </div>

    <!-- Firebase SDK -->
    <script type="module">
        // Import Firebase modules
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js';
        import { 
            getAuth, 
            signInWithEmailAndPassword, 
            createUserWithEmailAndPassword,
            signInWithPopup,
            GoogleAuthProvider,
            sendEmailVerification,
            sendPasswordResetEmail,
            onAuthStateChanged
        } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';

        // Firebase configuration - REPLACE WITH YOUR CONFIG
        const firebaseConfig = {
            apiKey: "your-api-key-here",
            authDomain: "your-project.firebaseapp.com",
            projectId: "your-project-id",
            storageBucket: "your-project.appspot.com",
            messagingSenderId: "123456789",
            appId: "your-app-id"
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const provider = new GoogleAuthProvider();

        // Make auth available globally
        window.firebaseAuth = auth;
        window.googleProvider = provider;

        // Auth state observer
        onAuthStateChanged(auth, (user) => {
            if (user) {
                console.log('User signed in:', user.email);
                // Redirect to library or dashboard
                redirectToLibrary(user);
            } else {
                console.log('User signed out');
            }
        });

        console.log('🔥 Firebase initialized successfully');
    </script>

    <script>
        // Global functions for form handling
        function switchTab(tab) {
            // Update tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            // Update forms
            document.querySelectorAll('.auth-form').forEach(form => form.classList.remove('active'));
            document.getElementById(tab + 'Form').classList.add('active');
            
            // Clear messages
            clearMessages();
        }

        function showMessage(message, type = 'info') {
            const container = document.getElementById('messageContainer');
            container.innerHTML = `<div class="message ${type}">${message}</div>`;
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                container.innerHTML = '';
            }, 5000);
        }

        function clearMessages() {
            document.getElementById('messageContainer').innerHTML = '';
        }

        function showLoading(show) {
            const loading = document.getElementById('loadingIndicator');
            const forms = document.querySelectorAll('.auth-form');
            
            if (show) {
                loading.style.display = 'block';
                forms.forEach(form => form.style.display = 'none');
            } else {
                loading.style.display = 'none';
                forms.forEach(form => form.style.display = 'block');
            }
        }

        function isValidPassword(password) {
            return password.length >= 8 && 
                   /[A-Z]/.test(password) && 
                   /[a-z]/.test(password) && 
                   /[0-9]/.test(password);
        }

        // Sign in with Google
        async function signInWithGoogle() {
            showLoading(true);
            
            try {
                const { signInWithPopup } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                const result = await signInWithPopup(window.firebaseAuth, window.googleProvider);
                
                showMessage('Successfully signed in with Google!', 'success');
                
                // Save user to database
                await saveUserToDatabase({
                    userID: result.user.uid,
                    email: result.user.email,
                    fullName: result.user.displayName,
                    provider: 'google',
                    role: 'guest',
                    status: 'pending',
                    registrationDate: new Date().toISOString()
                });
                
            } catch (error) {
                console.error('Google sign-in error:', error);
                showMessage('Google sign-in failed: ' + error.message, 'error');
            } finally {
                showLoading(false);
            }
        }

        // Password reset
        async function resetPassword() {
            const email = prompt('Enter your email address for password reset:');
            if (!email) return;
            
            try {
                const { sendPasswordResetEmail } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                await sendPasswordResetEmail(window.firebaseAuth, email);
                showMessage('Password reset email sent! Check your inbox.', 'success');
            } catch (error) {
                showMessage('Error sending reset email: ' + error.message, 'error');
            }
        }

        // Save user to Google Sheets (you'll need to implement this)
        async function saveUserToDatabase(userData) {
            // This will connect to your Google Sheets API
            console.log('Saving user to database:', userData);
            
            // Implement Google Sheets API call here
            // For now, just log the data
        }

        // Redirect to library
        function redirectToLibrary(user) {
            // Check user status and redirect appropriately
            console.log('Redirecting user to library:', user.email);
            
            // For now, just show a success message
            showMessage(`Welcome ${user.displayName || user.email}! Redirecting to library...`, 'success');
            
            // Actual redirect would be:
            // window.location.href = '/library/app/library.html';
        }

        // Terms and Privacy
        function showTerms() {
            alert('Terms of Service\n\nBy using Anderson\'s Library, you agree to:\n\n• Use the library for educational and research purposes only\n• Not share your account credentials\n• Respect copyright and licensing terms\n• Report any technical issues or concerns\n\nFull terms available at: bowersworld.com/terms');
        }

        function showPrivacy() {
            alert('Privacy Policy\n\nWe protect your privacy by:\n\n• Using Firebase for secure authentication\n• Storing minimal personal data\n• Not sharing information with third parties\n• Allowing account deletion at any time\n\nFull privacy policy at: bowersworld.com/privacy');
        }

        // Form submissions
        document.getElementById('loginForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoading(true);
            
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            try {
                const { signInWithEmailAndPassword } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                const userCredential = await signInWithEmailAndPassword(window.firebaseAuth, email, password);
                
                showMessage('Successfully signed in!', 'success');
                
            } catch (error) {
                console.error('Login error:', error);
                let errorMessage = 'Login failed. Please check your credentials.';
                
                if (error.code === 'auth/user-not-found') {
                    errorMessage = 'No account found with this email address.';
                } else if (error.code === 'auth/wrong-password') {
                    errorMessage = 'Incorrect password.';
                } else if (error.code === 'auth/invalid-email') {
                    errorMessage = 'Invalid email address.';
                }
                
                showMessage(errorMessage, 'error');
            } finally {
                showLoading(false);
            }
        });

        document.getElementById('registerForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoading(true);
            
            const formData = new FormData(e.target);
            const userData = Object.fromEntries(formData.entries());
            
            // Validation
            if (userData.registerPassword !== userData.confirmPassword) {
                showMessage('Passwords do not match.', 'error');
                showLoading(false);
                return;
            }
            
            if (!isValidPassword(userData.registerPassword)) {
                showMessage('Password must be at least 8 characters with uppercase, lowercase, and numbers.', 'error');
                showLoading(false);
                return;
            }
            
            try {
                const { createUserWithEmailAndPassword, sendEmailVerification } = await import('https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js');
                
                const userCredential = await createUserWithEmailAndPassword(
                    window.firebaseAuth, 
                    userData.registerEmail, 
                    userData.registerPassword
                );
                
                // Send email verification
                await sendEmailVerification(userCredential.user);
                
                // Save to database
                await saveUserToDatabase({
                    userID: userCredential.user.uid,
                    email: userData.registerEmail,
                    fullName: `${userData.firstName} ${userData.lastName}`,
                    firstName: userData.firstName,
                    lastName: userData.lastName,
                    organization: userData.organization,
                    accessReason: userData.accessReason,
                    emailUpdates: userData.emailUpdates === 'on',
                    role: 'guest',
                    status: 'pending',
                    registrationDate: new Date().toISOString()
                });
                
                showMessage('Account created successfully! Please check your email for verification.', 'success');
                
                // Clear form
                e.target.reset();
                
            } catch (error) {
                console.error('Registration error:', error);
                let errorMessage = 'Registration failed. Please try again.';
                
                if (error.code === 'auth/email-already-in-use') {
                    errorMessage = 'An account with this email already exists.';
                } else if (error.code === 'auth/weak-password') {
                    errorMessage = 'Password is too weak.';
                } else if (error.code === 'auth/invalid-email') {
                    errorMessage = 'Invalid email address.';
                }
                
                showMessage(errorMessage, 'error');
            } finally {
                showLoading(false);
            }
        });

        // Initialize on load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Authentication system ready');
            
            // Check if user is already signed in
            if (window.firebaseAuth && window.firebaseAuth.currentUser) {
                redirectToLibrary(window.firebaseAuth.currentUser);
            }
        });
    </script>
</body>
</html>
================
File: Updates/..Old/library_interface.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anderson's Library - Digital Collection</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
        }

        .header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 1rem 2rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 1.5rem;
            font-weight: bold;
            color: #ffd93d;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            background: #ffd93d;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #1e3c72;
            font-weight: bold;
        }

        .search-container {
            padding: 2rem;
            max-width: 1200px;
            margin: 0 auto;
        }

        .search-box {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .search-input-container {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .search-input {
            width: 100%;
            padding: 1rem 1rem 1rem 3rem;
            font-size: 1.1rem;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            transition: all 0.3s ease;
        }

        .search-input:focus {
            outline: none;
            border-color: #ffd93d;
            box-shadow: 0 0 20px rgba(255, 217, 61, 0.3);
        }

        .search-input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #ffd93d;
            font-size: 1.2rem;
        }

        .filters {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            align-items: center;
        }

        .filter-select {
            padding: 0.5rem 1rem;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 0.9rem;
        }

        .stats {
            display: flex;
            gap: 2rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 1.5rem;
            border-radius: 10px;
            text-align: center;
            flex: 1;
            min-width: 150px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #ffd93d;
            display: block;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.8;
            margin-top: 0.5rem;
        }

        .books-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .book-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 1.5rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .book-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            border-color: #ffd93d;
        }

        .book-title {
            font-size: 1.1rem;
            font-weight: bold;
            color: #ffd93d;
            margin-bottom: 0.5rem;
            line-height: 1.3;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .book-meta {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .book-category {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            background: rgba(255, 217, 61, 0.2);
            color: #ffd93d;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            width: fit-content;
        }

        .book-confidence {
            font-size: 0.8rem;
            opacity: 0.8;
        }

        .book-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .confidence-bar {
            width: 60px;
            height: 4px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 2px;
            overflow: hidden;
        }

        .confidence-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff6b6b, #ffd93d, #4ecdc4);
            border-radius: 2px;
            transition: width 0.3s ease;
        }

        .book-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
            flex: 1;
        }

        .btn-primary {
            background: #ffd93d;
            color: #1e3c72;
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 1rem;
            margin: 3rem 0;
        }

        .pagination button {
            padding: 0.75rem 1rem;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .pagination button:hover {
            background: rgba(255, 217, 61, 0.2);
            border-color: #ffd93d;
        }

        .pagination button.active {
            background: #ffd93d;
            color: #1e3c72;
            border-color: #ffd93d;
        }

        .pagination button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .loading {
            text-align: center;
            padding: 3rem;
            font-size: 1.1rem;
        }

        .spinner {
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 3px solid #ffd93d;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .no-results {
            text-align: center;
            padding: 3rem;
            opacity: 0.8;
        }

        .quick-stats {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
            font-size: 0.9rem;
        }

        .quick-stat {
            background: rgba(255, 255, 255, 0.1);
            padding: 0.5rem 1rem;
            border-radius: 20px;
        }

        @media (max-width: 768px) {
            .header {
                padding: 1rem;
                flex-direction: column;
                text-align: center;
            }

            .search-container {
                padding: 1rem;
            }

            .books-grid {
                grid-template-columns: 1fr;
            }

            .filters {
                justify-content: center;
            }

            .stats {
                flex-direction: column;
                gap: 1rem;
            }
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            border-radius: 15px;
            padding: 2rem;
            max-width: 600px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .modal-title {
            color: #ffd93d;
            font-size: 1.3rem;
            font-weight: bold;
        }

        .close-btn {
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0.25rem;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">
            📚 Anderson's Library
        </div>
        <div class="user-info">
            <span id="userEmail">user@example.com</span>
            <div class="user-avatar" id="userAvatar">A</div>
            <button class="btn btn-secondary" onclick="signOut()">Sign Out</button>
        </div>
    </div>

    <div class="search-container">
        <div class="search-box">
            <div class="search-input-container">
                <div class="search-icon">🔍</div>
                <input 
                    type="text" 
                    class="search-input" 
                    id="searchInput"
                    placeholder="Search by title, author, category, or content..."
                    onkeyup="handleSearch()"
                >
            </div>
            
            <div class="filters">
                <select id="categoryFilter" class="filter-select" onchange="applyFilters()">
                    <option value="">All Categories</option>
                </select>
                <select id="subjectFilter" class="filter-select" onchange="applyFilters()">
                    <option value="">All Subjects</option>
                </select>
                <select id="confidenceFilter" class="filter-select" onchange="applyFilters()">
                    <option value="">All Confidence Levels</option>
                    <option value="high">High Confidence (80%+)</option>
                    <option value="medium">Medium Confidence (50-79%)</option>
                    <option value="low">Low Confidence (<50%)</option>
                </select>
                <select id="sortBy" class="filter-select" onchange="applyFilters()">
                    <option value="title">Sort by Title</option>
                    <option value="category">Sort by Category</option>
                    <option value="confidence">Sort by Confidence</option>
                    <option value="size">Sort by Size</option>
                </select>
            </div>
        </div>

        <div class="stats">
            <div class="stat-card">
                <span class="stat-number" id="totalBooks">1,219</span>
                <div class="stat-label">Total Books</div>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="categorizedBooks">987</span>
                <div class="stat-label">Categorized</div>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="highConfidence">756</span>
                <div class="stat-label">High Confidence</div>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="totalSize">24.7 GB</span>
                <div class="stat-label">Total Size</div>
            </div>
        </div>

        <div class="quick-stats">
            <div class="quick-stat">📊 <span id="searchResults">Showing all 1,219 books</span></div>
            <div class="quick-stat">⏱️ Last updated: June 27, 2025</div>
            <div class="quick-stat">🎯 AI Confidence: 87% average</div>
        </div>

        <div id="loadingIndicator" class="loading" style="display: none;">
            <div class="spinner"></div>
            <p>Loading your library...</p>
        </div>

        <div id="booksContainer" class="books-grid"></div>

        <div id="noResults" class="no-results" style="display: none;">
            <h3>📚 No books found</h3>
            <p>Try adjusting your search terms or filters</p>
        </div>

        <div class="pagination" id="pagination"></div>
    </div>

    <!-- Book Details Modal -->
    <div id="bookModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title" id="modalTitle">Book Details</div>
                <button class="close-btn" onclick="closeModal()">&times;</button>
            </div>
            <div id="modalBody"></div>
        </div>
    </div>

    <script>
        // Sample book data based on your processing report
        let booksData = [];
        let filteredBooks = [];
        let currentPage = 1;
        const booksPerPage = 12;

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            loadSampleData();
            setupEventListeners();
            renderBooks();
            updateStats();
            populateFilters();
        });

        // Load sample data (in production, this would come from your database)
        function loadSampleData() {
            // Sample data based on your processing report
            booksData = [
                {
                    filename: "Essentials of Materials Science & Engineering.pdf",
                    title: "Essentials of Materials Science & Engineering",
                    category: "Engineering",
                    subject: "Materials Science",
                    categoryConfidence: 100,
                    subjectConfidence: 98,
                    overallConfidence: 99,
                    similarBooks: ["Fundamentals of Materials Science and Engineering", "Materials Science and Engineering"],
                    flags: [],
                    fileSize: 15.2,
                    pageCount: 624
                },
                {
                    filename: "Encyclopedia of Virology.pdf",
                    title: "Encyclopedia of Virology, Third Edition",
                    category: "Biology",
                    subject: "Virology",
                    categoryConfidence: 53,
                    subjectConfidence: 67,
                    overallConfidence: 60,
                    similarBooks: ["Introduction to Modern Virology", "Principles of Virology"],
                    flags: ["low_category_confidence"],
                    fileSize: 42.8,
                    pageCount: 1256
                },
                {
                    filename: "Chess For Dummies.pdf",
                    title: "Chess For Dummies",
                    category: "Games",
                    subject: "Chess",
                    categoryConfidence: 97,
                    subjectConfidence: 98,
                    overallConfidence: 97.5,
                    similarBooks: ["Chess the Complete Guide", "Chess the Complete Beginner's Guide"],
                    flags: [],
                    fileSize: 8.4,
                    pageCount: 384
                },
                {
                    filename: "Core Java® Vol Two.pdf",
                    title: "Core Java Volume II—Advanced Features",
                    category: "Programming Languages",
                    subject: "Java",
                    categoryConfidence: 95.3,
                    subjectConfidence: 81,
                    overallConfidence: 88,
                    similarBooks: ["Core Java® Vol One", "Introduction to Java Programming"],
                    flags: [],
                    fileSize: 12.7,
                    pageCount: 892
                },
                {
                    filename: "Clinical Forensic Medicine.pdf",
                    title: "Clinical Forensic Medicine: A Physician's Guide, 3rd Edition",
                    category: "Forensic Science",
                    subject: "Forensic Medicine",
                    categoryConfidence: 99,
                    subjectConfidence: 100,
                    overallConfidence: 99.5,
                    similarBooks: ["Handbook of Forensic Medicine", "The Essentials of Forensic Medicine"],
                    flags: [],
                    fileSize: 18.9,
                    pageCount: 567
                }
                // Add more sample books as needed
            ];

            // Generate additional sample books to reach a good number for demo
            const categories = ["Programming Languages", "Engineering", "Biology", "Games", "Forensic Science", "Mathematics", "Physics", "Chemistry", "History", "Literature"];
            const subjects = ["Java", "Python", "C++", "Materials Science", "Molecular Biology", "Chess", "Forensic Medicine", "Calculus", "Quantum Physics", "Organic Chemistry"];

            for (let i = 5; i < 50; i++) {
                const randomCategory = categories[Math.floor(Math.random() * categories.length)];
                const randomSubject = subjects[Math.floor(Math.random() * subjects.length)];
                
                booksData.push({
                    filename: `Book_${i + 1}.pdf`,
                    title: `Sample Book Title ${i + 1}`,
                    category: randomCategory,
                    subject: randomSubject,
                    categoryConfidence: Math.floor(Math.random() * 50) + 50,
                    subjectConfidence: Math.floor(Math.random() * 50) + 50,
                    overallConfidence: Math.floor(Math.random() * 50) + 50,
                    similarBooks: [`Similar Book A`, `Similar Book B`],
                    flags: Math.random() > 0.7 ? ["needs_review"] : [],
                    fileSize: (Math.random() * 30) + 1,
                    pageCount: Math.floor(Math.random() * 800) + 100
                });
            }

            filteredBooks = [...booksData];
        }

        function setupEventListeners() {
            document.getElementById('searchInput').addEventListener('input', debounce(handleSearch, 300));
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function handleSearch() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            
            if (searchTerm === '') {
                filteredBooks = [...booksData];
            } else {
                filteredBooks = booksData.filter(book => 
                    book.title.toLowerCase().includes(searchTerm) ||
                    book.category.toLowerCase().includes(searchTerm) ||
                    book.subject.toLowerCase().includes(searchTerm) ||
                    book.filename.toLowerCase().includes(searchTerm)
                );
            }
            
            currentPage = 1;
            applyFilters();
        }

        function applyFilters() {
            let filtered = [...filteredBooks];
            
            const categoryFilter = document.getElementById('categoryFilter').value;
            const subjectFilter = document.getElementById('subjectFilter').value;
            const confidenceFilter = document.getElementById('confidenceFilter').value;
            const sortBy = document.getElementById('sortBy').value;
            
            // Apply category filter
            if (categoryFilter) {
                filtered = filtered.filter(book => book.category === categoryFilter);
            }
            
            // Apply subject filter
            if (subjectFilter) {
                filtered = filtered.filter(book => book.subject === subjectFilter);
            }
            
            // Apply confidence filter
            if (confidenceFilter) {
                switch (confidenceFilter) {
                    case 'high':
                        filtered = filtered.filter(book => book.overallConfidence >= 80);
                        break;
                    case 'medium':
                        filtered = filtered.filter(book => book.overallConfidence >= 50 && book.overallConfidence < 80);
                        break;
                    case 'low':
                        filtered = filtered.filter(book => book.overallConfidence < 50);
                        break;
                }
            }
            
            // Apply sorting
            filtered.sort((a, b) => {
                switch (sortBy) {
                    case 'title':
                        return a.title.localeCompare(b.title);
                    case 'category':
                        return a.category.localeCompare(b.category);
                    case 'confidence':
                        return b.overallConfidence - a.overallConfidence;
                    case 'size':
                        return b.fileSize - a.fileSize;
                    default:
                        return a.title.localeCompare(b.title);
                }
            });
            
            filteredBooks = filtered;
            currentPage = 1;
            renderBooks();
            updateSearchResults();
        }

        function renderBooks() {
            const container = document.getElementById('booksContainer');
            const noResults = document.getElementById('noResults');
            
            if (filteredBooks.length === 0) {
                container.innerHTML = '';
                noResults.style.display = 'block';
                document.getElementById('pagination').innerHTML = '';
                return;
            }
            
            noResults.style.display = 'none';
            
            const startIndex = (currentPage - 1) * booksPerPage;
            const endIndex = startIndex + booksPerPage;
            const booksToShow = filteredBooks.slice(startIndex, endIndex);
            
            container.innerHTML = booksToShow.map(book => `
                <div class="book-card" onclick="showBookDetails('${book.filename}')">
                    <div class="book-title">${book.title}</div>
                    <div class="book-meta">
                        <div class="book-category">${book.category}</div>
                        <div class="book-confidence">Subject: ${book.subject} (${book.subjectConfidence}% confidence)</div>
                    </div>
                    <div class="book-info">
                        <span>${book.fileSize.toFixed(1)} MB • ${book.pageCount} pages</span>
                        <div class="confidence-bar">
                            <div class="confidence-fill" style="width: ${book.overallConfidence}%"></div>
                        </div>
                    </div>
                    ${book.flags.length > 0 ? `<div style="margin-top: 0.5rem; font-size: 0.8rem; color: #ff6b6b;">⚠️ ${book.flags.join(', ')}</div>` : ''}
                    <div class="book-actions">
                        <button class="btn btn-primary" onclick="event.stopPropagation(); openBook('${book.filename}')">
                            📖 Read
                        </button>
                        <button class="btn btn-secondary" onclick="event.stopPropagation(); downloadBook('${book.filename}')">
                            💾 Download
                        </button>
                    </div>
                </div>
            `).join('');
            
            renderPagination();
        }

        function renderPagination() {
            const totalPages = Math.ceil(filteredBooks.length / booksPerPage);
            const pagination = document.getElementById('pagination');
            
            if (totalPages <= 1) {
                pagination.innerHTML = '';
                return;
            }
            
            let paginationHTML = '';
            
            // Previous button
            paginationHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})">‹ Previous</button>`;
            
            // Page numbers
            for (let i = 1; i <= Math.min(totalPages, 5); i++) {
                const page = i;
                paginationHTML += `<button class="${page === currentPage ? 'active' : ''}" onclick="changePage(${page})">${page}</button>`;
            }
            
            if (totalPages > 5) {
                paginationHTML += `<span>...</span>`;
                paginationHTML += `<button class="${totalPages === currentPage ? 'active' : ''}" onclick="changePage(${totalPages})">${totalPages}</button>`;
            }
            
            // Next button
            paginationHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})">Next ›</button>`;
            
            pagination.innerHTML = paginationHTML;
        }

        function changePage(page) {
            currentPage = page;
            renderBooks();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        function populateFilters() {
            const categories = [...new Set(booksData.map(book => book.category))].sort();
            const subjects = [...new Set(booksData.map(book => book.subject))].sort();
            
            const categorySelect = document.getElementById('categoryFilter');
            const subjectSelect = document.getElementById('subjectFilter');
            
            categorySelect.innerHTML = '<option value="">All Categories</option>' + 
                categories.map(cat => `<option value="${cat}">${cat}</option>`).join('');
            
            subjectSelect.innerHTML = '<option value="">All Subjects</option>' + 
                subjects.map(sub => `<option value="${sub}">${sub}</option>`).join('');
        }

        function updateStats() {
            const totalBooks = booksData.length;
            const categorizedBooks = booksData.filter(book => book.category && book.category !== '').length;
            const highConfidenceBooks = booksData.filter(book => book.overallConfidence >= 80).length;
            const totalSize = booksData.reduce((sum, book) => sum + book.fileSize, 0);
            
            document.getElementById('totalBooks').textContent = totalBooks.toLocaleString();
            document.getElementById('categorizedBooks').textContent = categorizedBooks.toLocaleString();
            document.getElementById('highConfidence').textContent = highConfidenceBooks.toLocaleString();
            document.getElementById('totalSize').textContent = (totalSize / 1000).toFixed(1) + ' GB';
        }

        function updateSearchResults() {
            const searchResults = document.getElementById('searchResults');
            if (filteredBooks.length === booksData.length) {
                searchResults.textContent = `Showing all ${filteredBooks.length.toLocaleString()} books`;
            } else {
                searchResults.textContent = `Showing ${filteredBooks.length.toLocaleString()} of ${booksData.length.toLocaleString()} books`;
            }
        }

        function showBookDetails(filename) {
            const book = booksData.find(b => b.filename === filename);
            if (!book) return;
            
            const modal = document.getElementById('bookModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalBody = document.getElementById('modalBody');
            
            modalTitle.textContent = book.title;
            modalBody.innerHTML = `
                <div style="margin-bottom: 1.5rem;">
                    <h4 style="color: #ffd93d; margin-bottom: 1rem;">📄 Book Information</h4>
                    <p><strong>Filename:</strong> ${book.filename}</p>
                    <p><strong>Category:</strong> ${book.category} (${book.categoryConfidence}% confidence)</p>
                    <p><strong>Subject:</strong> ${book.subject} (${book.subjectConfidence}% confidence)</p>
                    <p><strong>Overall Confidence:</strong> ${book.overallConfidence}%</p>
                    <p><strong>File Size:</strong> ${book.fileSize.toFixed(1)} MB</p>
                    <p><strong>Page Count:</strong> ${book.pageCount}</p>
                </div>
                
                ${book.similarBooks.length > 0 ? `
                <div style="margin-bottom: 1.5rem;">
                    <h4 style="color: #ffd93d; margin-bottom: 1rem;">📚 Similar Books</h4>
                    <ul style="margin-left: 1rem;">
                        ${book.similarBooks.map(title => `<li>${title}</li>`).join('')}
                    </ul>
                </div>
                ` : ''}
                
                ${book.flags.length > 0 ? `
                <div style="margin-bottom: 1.5rem;">
                    <h4 style="color: #ff6b6b; margin-bottom: 1rem;">⚠️ Processing Flags</h4>
                    <p style="color: #ff6b6b;">${book.flags.join(', ')}</p>
                </div>
                ` : ''}
                
                <div class="book-actions">
                    <button class="btn btn-primary" onclick="openBook('${book.filename}')">📖 Read Book</button>
                    <button class="btn btn-secondary" onclick="downloadBook('${book.filename}')">💾 Download</button>
                </div>
            `;
            
            modal.style.display = 'block';
        }

        function closeModal() {
            document.getElementById('bookModal').style.display = 'none';
        }

        function openBook(filename) {
            // This would integrate with PDF.js viewer
            alert(`Opening ${filename} in PDF viewer...\n\nThis would normally open the PDF in a reader interface.`);
            closeModal();
        }

        function downloadBook(filename) {
            // This would trigger a download from Google Drive
            alert(`Downloading ${filename}...\n\nThis would normally start a download from your Google Drive.`);
            closeModal();
        }

        function signOut() {
            if (confirm('Are you sure you want to sign out?')) {
                // Firebase sign out logic would go here
                alert('Signed out successfully');
                window.location.href = '/library/auth/login.html';
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('bookModal');
            if (event.target === modal) {
                closeModal();
            }
        }

        // Initialize user info (this would come from Firebase auth)
        document.addEventListener('DOMContentLoaded', function() {
            const userEmail = 'user@example.com'; // Get from Firebase auth
            const userAvatar = document.getElementById('userAvatar');
            
            document.getElementById('userEmail').textContent = userEmail;
            userAvatar.textContent = userEmail.charAt(0).toUpperCase();
        });
    </script>
</body>
</html>
================
File: Updates/..Old/local_server_setup.sh
================
# Local Development Server Setup
# Choose ONE of these methods to serve your files:

# METHOD 1: Python HTTP Server (Recommended)
cd /home/herb/Desktop/BowersWorld-com
python3 -m http.server 8080
# Then access: http://localhost:8080/Updates/firebase_auth_system.html

# METHOD 2: Node.js HTTP Server
# First install: npm install -g http-server
cd /home/herb/Desktop/BowersWorld-com
http-server -p 8080 -c-1
# Then access: http://localhost:8080/Updates/firebase_auth_system.html

# METHOD 3: PHP Server (if PHP installed)
cd /home/herb/Desktop/BowersWorld-com
php -S localhost:8080
# Then access: http://localhost:8080/Updates/firebase_auth_system.html

# METHOD 4: VS Code Live Server Extension
# 1. Install "Live Server" extension in VS Code
# 2. Right-click your HTML file → "Open with Live Server"

# WHY THIS IS NEEDED:
# - Google APIs require HTTP/HTTPS protocol
# - Firebase Auth needs proper origin headers
# - CORS policies block file:// protocol
# - Local server simulates production environment
================
File: Updates/..Old/quick_config_guide.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Firebase Config Helper</title>
    <style>
        body {
            font-family: 'Segoe UI', sans-serif;
            max-width: 800px;
            margin: 2rem auto;
            padding: 1rem;
            background: #f5f5f5;
        }
        .step {
            background: white;
            padding: 1.5rem;
            margin: 1rem 0;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .step h3 {
            color: #4285f4;
            margin-top: 0;
        }
        .code-block {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            padding: 1rem;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            overflow-x: auto;
        }
        .highlight {
            background: #fff3cd;
            padding: 0.5rem;
            border-left: 4px solid #ffc107;
            margin: 1rem 0;
        }
        .success {
            background: #d4edda;
            padding: 0.5rem;
            border-left: 4px solid #28a745;
            margin: 1rem 0;
        }
        .navigation {
            background: #e3f2fd;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 2rem;
        }
        .navigation strong {
            color: #1976d2;
        }
    </style>
</head>
<body>
    <div class="navigation">
        <strong>🎯 Current Status:</strong> You have Firebase project "BowersWorld-Digital-Alexandria" with Email/Password and Google auth enabled. Now you need the config values!
    </div>

    <div class="step">
        <h3>🔥 Step 1: Get Your Config from Firebase Console</h3>
        <p>In your current Firebase Console tab:</p>
        <ol>
            <li>Click the <strong>gear icon ⚙️</strong> next to "Project Overview" (top left)</li>
            <li>Select <strong>"Project settings"</strong></li>
            <li>Scroll down to <strong>"Your apps"</strong> section</li>
            <li>If you see a web app, click on it. If not, click <strong>"Add app"</strong> → <strong>Web</strong></li>
            <li>Copy the entire <code>firebaseConfig</code> object</li>
        </ol>
        
        <div class="highlight">
            <strong>⚠️ Important:</strong> Your project name suggests the config will look like this:
        </div>
        
        <div class="code-block">
const firebaseConfig = {
  apiKey: "AIzaSyC-your-long-api-key-here",
  authDomain: "bowersworld-digital-alexandria.firebaseapp.com",
  projectId: "bowersworld-digital-alexandria",
  storageBucket: "bowersworld-digital-alexandria.appspot.com",
  messagingSenderId: "your-sender-id",
  appId: "your-app-id"
};
        </div>
    </div>

    <div class="step">
        <h3>🌐 Step 2: Add Authorized Domains (Do This Now)</h3>
        <p>In your Firebase Console (stay in Authentication section):</p>
        <ol>
            <li>Click <strong>"Settings"</strong> tab (next to "Sign-in method")</li>
            <li>Scroll to <strong>"Authorized domains"</strong></li>
            <li>Click <strong>"Add domain"</strong> for each of these:</li>
        </ol>
        
        <div class="code-block">
localhost
127.0.0.1
bowersworld.com
www.bowersworld.com
        </div>
    </div>

    <div class="step">
        <h3>💻 Step 3: Update Your Local File</h3>
        <p>Replace the placeholder config in your HTML file with your actual values:</p>
        
        <div class="code-block">
// In your firebase_auth_system.html file, replace this section:
const firebaseConfig = {
    apiKey: "AIzaSyC-REPLACE-WITH-YOUR-ACTUAL-API-KEY",
    authDomain: "anderson-library-XXXXX.firebaseapp.com",
    projectId: "anderson-library-XXXXX",
    storageBucket: "anderson-library-XXXXX.appspot.com",
    messagingSenderId: "123456789012",
    appId: "1:123456789012:web:abcdef123456789"
};

// With your actual config values from Step 1
        </div>
    </div>

    <div class="step">
        <h3>🚀 Step 4: Test Locally</h3>
        <p>Start your local server and test:</p>
        
        <div class="code-block">
cd /home/herb/Desktop/BowersWorld-com
python3 -m http.server 8080
        </div>
        
        <p>Then visit: <strong>http://localhost:8080/Updates/firebase_auth_system.html</strong></p>
        
        <div class="success">
            <strong>✅ Success indicators:</strong>
            <ul>
                <li>Console shows "🔥 Firebase initialized successfully"</li>
                <li>No API key errors</li>
                <li>Registration form accepts input</li>
                <li>Status shows "🔥 Firebase Ready"</li>
            </ul>
        </div>
    </div>

    <div class="step">
        <h3>🐛 Common Issues & Solutions</h3>
        
        <h4>"API key not valid"</h4>
        <ul>
            <li>Double-check you copied the config correctly</li>
            <li>Make sure there are no extra spaces or quotes</li>
            <li>Verify the project ID matches exactly</li>
        </ul>
        
        <h4>"auth/unauthorized-domain"</h4>
        <ul>
            <li>Add authorized domains in Firebase Console</li>
            <li>Wait 5-10 minutes for changes to take effect</li>
            <li>Make sure you're using http://localhost:8080, not file://</li>
        </ul>
        
        <h4>CORS errors</h4>
        <ul>
            <li>Must use local server (python3 -m http.server 8080)</li>
            <li>Cannot use file:// protocol</li>
            <li>Check authorized domains are set up</li>
        </ul>
    </div>

    <div class="step">
        <h3>📋 Next Steps After Config Works</h3>
        <ol>
            <li><strong>Test user registration</strong> - Create a test account</li>
            <li><strong>Set up Google Sheets</strong> - For user management database</li>
            <li><strong>Upload book data</strong> - Your processed 1,219 books to Google Drive</li>
            <li><strong>Deploy to GitHub Pages</strong> - Make it live on bowersworld.com</li>
        </ol>
    </div>

    <script>
        console.log('🔧 Firebase Configuration Helper Loaded');
        console.log('📍 Follow the steps above to get your Firebase config working');
        
        // Helper function to validate config format
        function validateFirebaseConfig(config) {
            const required = ['apiKey', 'authDomain', 'projectId', 'storageBucket', 'messagingSenderId', 'appId'];
            const missing = required.filter(key => !config[key] || config[key].includes('REPLACE') || config[key].includes('XXXXX'));
            
            if (missing.length > 0) {
                console.warn('❌ Missing or placeholder values in Firebase config:', missing);
                return false;
            }
            
            console.log('✅ Firebase config appears valid');
            return true;
        }
        
        // Make validation function available globally
        window.validateFirebaseConfig = validateFirebaseConfig;
        
        console.log('💡 Tip: After updating your config, you can test it by running validateFirebaseConfig(firebaseConfig) in the console');
    </script>
</body>
</html>
================
File: Updates/CommunitySQLs/upgrade_ui_flow.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anderson's Library - Upgrade Flow Demo</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            line-height: 1.6;
        }
        
        .demo-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .scenario {
            background: white;
            border-radius: 15px;
            padding: 25px;
            margin: 20px 0;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            border-left: 5px solid #4285f4;
        }
        
        .scenario h2 {
            color: #2c3e50;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .limit-hit-modal {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            color: white;
            border-radius: 12px;
            padding: 25px;
            margin: 15px 0;
            position: relative;
            overflow: hidden;
        }
        
        .limit-hit-modal::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
            transform: rotate(45deg);
            animation: shine 3s infinite;
        }
        
        @keyframes shine {
            0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
            100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }
        
        .upgrade-card {
            background: linear-gradient(135deg, #4285f4, #34a853);
            color: white;
            border-radius: 12px;
            padding: 20px;
            margin: 15px 0;
            position: relative;
        }
        
        .tier-comparison {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .tier-card {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            position: relative;
            transition: transform 0.3s ease;
        }
        
        .tier-card:hover {
            transform: translateY(-5px);
        }
        
        .tier-card.current {
            background: linear-gradient(135deg, #ffeaa7, #fdcb6e);
            transform: scale(1.05);
        }
        
        .tier-card.recommended {
            background: linear-gradient(135deg, #00b894, #00cec9);
            color: white;
            transform: scale(1.08);
        }
        
        .tier-card.premium {
            background: linear-gradient(135deg, #6c5ce7, #a29bfe);
            color: white;
        }
        
        .tier-icon {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .tier-title {
            font-size: 1.4em;
            font-weight: bold;
            margin-bottom: 10px;
        }
        
        .benefit-list {
            list-style: none;
            margin: 15px 0;
        }
        
        .benefit-list li {
            padding: 5px 0;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .benefit-list li::before {
            content: '✅';
            font-size: 0.9em;
        }
        
        .upgrade-btn {
            background: linear-gradient(135deg, #00b894, #00cec9);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0,184,148,0.3);
        }
        
        .upgrade-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,184,148,0.4);
        }
        
        .notification-demo {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-radius: 12px;
            padding: 20px;
            margin: 15px 0;
        }
        
        .priority-badge {
            background: #e17055;
            color: white;
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 0.85em;
            font-weight: bold;
            display: inline-block;
            margin-left: 10px;
        }
        
        .progress-bar {
            background: #ecf0f1;
            border-radius: 10px;
            height: 8px;
            margin: 10px 0;
            overflow: hidden;
        }
        
        .progress-fill {
            background: linear-gradient(90deg, #00b894, #00cec9);
            height: 100%;
            border-radius: 10px;
            transition: width 0.3s ease;
        }
        
        .smart-alert {
            background: #74b9ff;
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .feature-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        
        .feature-card {
            background: #f1f2f6;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }
        
        .feature-card.locked {
            opacity: 0.6;
            filter: grayscale(50%);
        }
        
        .unlock-hint {
            background: #ffeaa7;
            padding: 10px;
            border-radius: 6px;
            margin-top: 10px;
            font-size: 0.9em;
            color: #2d3436;
        }
    </style>
</head>
<body>
    <div class="demo-container">
        <h1 style="text-align: center; color: white; margin-bottom: 30px; font-size: 2.5em;">
            📚 Anderson's Library - Smart Upgrade System
        </h1>
        
        <!-- Scenario 1: Download Limit Hit -->
        <div class="scenario">
            <h2>🚫 Scenario 1: Daily Download Limit Reached</h2>
            
            <div class="limit-hit-modal">
                <h3 style="font-size: 1.8em; margin-bottom: 15px;">⏰ Daily Download Limit Reached!</h3>
                <p style="font-size: 1.1em; margin-bottom: 15px;">
                    You've downloaded <strong>3 books</strong> today (your daily limit as a Basic user).
                </p>
                
                <div class="progress-bar">
                    <div class="progress-fill" style="width: 100%;"></div>
                </div>
                
                <div style="display: flex; gap: 15px; margin-top: 20px; flex-wrap: wrap;">
                    <button class="upgrade-btn" onclick="showUpgradeOptions()">
                        🚀 Upgrade for More Downloads
                    </button>
                    <div style="color: rgba(255,255,255,0.9);">
                        <strong>Or wait:</strong> Limit resets in 8 hours 23 minutes
                    </div>
                </div>
            </div>
            
            <div class="smart-alert">
                <div style="font-size: 2em;">💡</div>
                <div>
                    <strong>Smart Suggestion:</strong> Enable our newsletter and new book alerts to get 
                    <strong>5 downloads per day</strong> + personalized recommendations!
                </div>
            </div>
        </div>
        
        <!-- Scenario 2: Enhanced Incentives Display -->
        <div class="scenario">
            <h2>⭐ Enhanced Tier Benefits Comparison</h2>
            
            <div class="tier-comparison">
                <div class="tier-card current">
                    <div class="tier-icon">📚</div>
                    <div class="tier-title">Basic Access</div>
                    <div style="color: #e17055; font-weight: bold;">Your Current Tier</div>
                    <ul class="benefit-list">
                        <li>3 downloads per day</li>
                        <li>20 searches per day</li>
                        <li>Basic book previews</li>
                        <li>Community support</li>
                        <li>Standard database updates</li>
                    </ul>
                </div>
                
                <div class="tier-card recommended">
                    <div class="tier-icon">🔗</div>
                    <div class="tier-title">Connected Reader</div>
                    <div class="priority-badge">RECOMMENDED</div>
                    <ul class="benefit-list">
                        <li>5 downloads per day</li>
                        <li>30 searches per day</li>
                        <li>📧 Personalized book alerts</li>
                        <li>🎯 Interest-based notifications</li>
                        <li>⚡ Priority database updates</li>
                        <li>2x download speed</li>
                    </ul>
                    <div class="unlock-hint">
                        <strong>Unlock with:</strong> Newsletter + New book alerts
                    </div>
                </div>
                
                <div class="tier-card premium">
                    <div class="tier-icon">💎</div>
                    <div class="tier-title">VIP Experience</div>
                    <ul class="benefit-list">
                        <li>Unlimited downloads</li>
                        <li>Unlimited searches</li>
                        <li>🔔 Instant new book notifications</li>
                        <li>🏆 First access to rare books</li>
                        <li>⚡ Real-time database sync</li>
                        <li>🚀 Maximum download speeds</li>
                        <li>👑 Priority support</li>
                    </ul>
                    <div class="unlock-hint">
                        <strong>Unlock with:</strong> All marketing preferences
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Scenario 3: Smart Notifications Demo -->
        <div class="scenario">
            <h2>🔔 Smart Notification System</h2>
            
            <div class="notification-demo">
                <h3 style="margin-bottom: 15px;">📱 Personalized Alerts (Connected+ Users)</h3>
                
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; margin: 10px 0;">
                    <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                        <span style="font-size: 1.5em;">🐍</span>
                        <strong>New Python Book Alert!</strong>
                        <span class="priority-badge">PRIORITY</span>
                    </div>
                    <p>"Advanced Python Web Scraping" just added - matches your programming interests!</p>
                    <div style="margin-top: 10px; font-size: 0.9em; opacity: 0.8;">
                        Available for immediate download • Added 2 minutes ago
                    </div>
                </div>
                
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; margin: 10px 0;">
                    <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                        <span style="font-size: 1.5em;">🤖</span>
                        <strong>AI Recommendation</strong>
                    </div>
                    <p>Based on your recent downloads, you might love "Machine Learning Engineering"</p>
                    <div style="margin-top: 10px; font-size: 0.9em; opacity: 0.8;">
                        94% match confidence • Similar to 3 books you've downloaded
                    </div>
                </div>
            </div>
            
            <div class="feature-grid">
                <div class="feature-card">
                    <div style="font-size: 2em; margin-bottom: 10px;">⚡</div>
                    <h4>Instant Alerts</h4>
                    <p>Get notified within minutes of new books in your interests</p>
                </div>
                
                <div class="feature-card">
                    <div style="font-size: 2em; margin-bottom: 10px;">🎯</div>
                    <h4>Smart Targeting</h4>
                    <p>AI learns your preferences for perfect book matching</p>
                </div>
                
                <div class="feature-card locked">
                    <div style="font-size: 2em; margin-bottom: 10px;">👑</div>
                    <h4>VIP Early Access</h4>
                    <p>First dibs on rare and premium books</p>
                    <div class="unlock-hint">Upgrade to VIP</div>
                </div>
                
                <div class="feature-card locked">
                    <div style="font-size: 2em; margin-bottom: 10px;">📊</div>
                    <h4>Reading Analytics</h4>
                    <p>Personal insights into your reading patterns</p>
                    <div class="unlock-hint">Enable analytics permissions</div>
                </div>
            </div>
        </div>
        
        <!-- Scenario 4: Priority Database Updates -->
        <div class="scenario">
            <h2>⚡ Priority Database Update System</h2>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">
                <div style="background: #fd79a8; color: white; padding: 20px; border-radius: 12px;">
                    <h4 style="margin-bottom: 15px;">📡 Basic Updates</h4>
                    <ul style="list-style: none;">
                        <li style="padding: 5px 0;">📅 Weekly database sync</li>
                        <li style="padding: 5px 0;">🔄 Updates during off-peak hours</li>
                        <li style="padding: 5px 0;">📚 New books available next business day</li>
                        <li style="padding: 5px 0;">⏰ 24-48 hour delay for new content</li>
                    </ul>
                </div>
                
                <div style="background: #00b894; color: white; padding: 20px; border-radius: 12px;">
                    <h4 style="margin-bottom: 15px;">⚡ Priority Updates (Connected+)</h4>
                    <ul style="list-style: none;">
                        <li style="padding: 5px 0;">🚀 Real-time database sync</li>
                        <li style="padding: 5px 0;">⚡ Instant new book availability</li>
                        <li style="padding: 5px 0;">🎯 Personalized update notifications</li>
                        <li style="padding: 5px 0;">👑 VIP users get 2-hour early access</li>
                    </ul>
                </div>
            </div>
            
            <div class="upgrade-card">
                <h3 style="margin-bottom: 15px;">🔥 Live Update Example</h3>
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;">
                    <div style="display: flex; justify-content: between; align-items: center;">
                        <div>
                            <strong>Database Update in Progress...</strong>
                            <div style="font-size: 0.9em; opacity: 0.9; margin-top: 5px;">
                                Adding 12 new books • Priority users get immediate access
                            </div>
                        </div>
                        <div style="font-size: 1.5em;">⚡</div>
                    </div>
                    <div class="progress-bar" style="margin-top: 10px;">
                        <div class="progress-fill" style="width: 75%; animation: pulse 2s infinite;"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Scenario 5: Upgrade Flow -->
        <div class="scenario">
            <h2>🚀 Smart Upgrade Flow</h2>
            
            <div id="upgradeFlow" style="display: none;">
                <div style="background: linear-gradient(135deg, #00b894, #00cec9); color: white; padding: 25px; border-radius: 12px;">
                    <h3 style="margin-bottom: 20px;">🎯 Choose Your Upgrade Path</h3>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                        <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 8px;">
                            <h4>📧 Quick Boost (Connected)</h4>
                            <p style="margin: 10px 0;">Just enable newsletter + book alerts</p>
                            <ul style="list-style: none; font-size: 0.9em;">
                                <li>✅ 5 downloads per day</li>
                                <li>✅ 30 searches per day</li>
                                <li>✅ Smart book notifications</li>
                                <li>✅ Priority updates</li>
                            </ul>
                            <button class="upgrade-btn" style="margin-top: 15px;" onclick="upgradeToConnected()">
                                Enable Now (2 clicks!)
                            </button>
                        </div>
                        
                        <div style="background: rgba(255,255,255,0.15); padding: 20px; border-radius: 8px; border: 2px solid rgba(255,255,255,0.3);">
                            <h4>💎 Full VIP Experience</h4>
                            <p style="margin: 10px 0;">All permissions for maximum benefits</p>
                            <ul style="list-style: none; font-size: 0.9em;">
                                <li>✅ Unlimited everything</li>
                                <li>✅ Instant notifications</li>
                                <li>✅ Early access to new books</li>
                                <li>✅ Priority support</li>
                            </ul>
                            <button class="upgrade-btn" style="margin-top: 15px; background: linear-gradient(135deg, #6c5ce7, #a29bfe);" onclick="upgradeToVIP()">
                                Go VIP (5 permissions)
                            </button>
                        </div>
                    </div>
                    
                    <div style="text-align: center; margin-top: 20px; font-size: 0.9em; opacity: 0.9;">
                        💡 You can modify your preferences anytime in account settings
                    </div>
                </div>
            </div>
            
            <div style="text-align: center; margin: 20px 0;">
                <button class="upgrade-btn" id="showUpgradeBtn" onclick="showUpgradeOptions()">
                    See Upgrade Options
                </button>
            </div>
        </div>
    </div>
    
    <script>
        function showUpgradeOptions() {
            const upgradeFlow = document.getElementById('upgradeFlow');
            const btn = document.getElementById('showUpgradeBtn');
            
            if (upgradeFlow.style.display === 'none') {
                upgradeFlow.style.display = 'block';
                btn.textContent = 'Hide Upgrade Options';
                upgradeFlow.scrollIntoView({ behavior: 'smooth' });
            } else {
                upgradeFlow.style.display = 'none';
                btn.textContent = 'See Upgrade Options';
            }
        }
        
        function upgradeToConnected() {
            alert('🎉 Awesome! You would now see the permission selection form:\n\n✅ Newsletter (weekly library updates)\n✅ New book alerts (instant notifications)\n\nAfter enabling, you immediately get:\n• 5 downloads per day\n• 30 searches per day\n• Smart notifications\n• Priority updates');
        }
        
        function upgradeToVIP() {
            alert('👑 VIP Upgrade! You would see all available permissions:\n\n✅ Newsletter\n✅ New book alerts\n✅ Personalized recommendations\n✅ Premium offers\n✅ Surveys & feedback\n\nInstant VIP benefits:\n• Unlimited access\n• Real-time updates\n• Early book access\n• Priority support');
        }
        
        // Add some interactive animations
        document.addEventListener('DOMContentLoaded', function() {
            const progressBars = document.querySelectorAll('.progress-fill');
            progressBars.forEach(bar => {
                const width = bar.style.width;
                bar.style.width = '0%';
                setTimeout(() => {
                    bar.style.width = width;
                }, 500);
            });
        });
        
        // Simulate real-time notification
        setTimeout(() => {
            const alerts = document.querySelectorAll('.smart-alert');
            alerts.forEach(alert => {
                alert.style.animation = 'pulse 2s ease-in-out';
            });
        }, 2000);
    </script>
    
    <style>
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.02); }
            100% { transform: scale(1); }
        }
    </style>
</body>
</html>
================
File: Updates/csv_to_mysql_migration.py
================
#!/usr/bin/env python3
"""
File: migrate_csv_to_mysql.py
Path: BowersWorld-com/Scripts/Migration/migrate_csv_to_mysql.py
Standard: AIDEV-PascalCase-1.8
Created: 2025-07-03
Author: Herb Bowers - Project Himalaya
Description: Migrate AndersonLibrary_Himalaya_GPU.csv to MySQL Master Database

Purpose: Populates the MySQL master database from the enhanced Himalaya CSV
with proper normalization and error handling.
"""

import mysql.connector
import pandas as pd
import os
import hashlib
import re
from pathlib import Path
from datetime import datetime
import json
from typing import Dict, List, Optional, Tuple

class CSVToMySQLMigrator:
    """Migrates Anderson's Library CSV data to MySQL master database"""
    
    def __init__(self, csv_path: str, mysql_config: dict, books_directory: str):
        """Initialize migrator with paths and configuration"""
        self.csv_path = csv_path
        self.mysql_config = mysql_config
        self.books_directory = Path(books_directory)
        
        # Statistics tracking
        self.stats = {
            'total_records': 0,
            'books_migrated': 0,
            'authors_created': 0,
            'publishers_created': 0,
            'categories_created': 0,
            'errors_encountered': 0,
            'duplicates_skipped': 0
        }
        
        # Data caches to avoid duplicate database calls
        self.author_cache = {}
        self.publisher_cache = {}
        self.category_cache = {}
        
        print(f"🚀 Starting CSV to MySQL migration...")
        print(f"📁 CSV Path: {csv_path}")
        print(f"📚 Books Directory: {books_directory}")
    
    def connect_to_mysql(self) -> mysql.connector.MySQLConnection:
        """Create MySQL connection"""
        try:
            connection = mysql.connector.connect(**self.mysql_config)
            print(f"✅ Connected to MySQL database: {self.mysql_config['database']}")
            return connection
        except Exception as e:
            print(f"❌ Failed to connect to MySQL: {e}")
            raise
    
    def load_csv_data(self) -> pd.DataFrame:
        """Load and validate CSV data"""
        try:
            df = pd.read_csv(self.csv_path).fillna('')
            self.stats['total_records'] = len(df)
            print(f"✅ Loaded {len(df)} records from CSV")
            
            # Show column names for verification
            print("📋 Available columns:")
            for i, col in enumerate(df.columns, 1):
                print(f"   {i:2d}. {col}")
            
            return df
        except Exception as e:
            print(f"❌ Failed to load CSV: {e}")
            raise
    
    def normalize_text(self, text: str) -> str:
        """Normalize text for consistent comparison"""
        if not text or pd.isna(text):
            return ""
        return str(text).strip().replace('  ', ' ')
    
    def extract_year_from_text(self, text: str) -> Optional[int]:
        """Extract year from various text formats"""
        if not text:
            return None
        
        # Look for 4-digit years
        year_match = re.search(r'\b(19|20)\d{2}\b', str(text))
        if year_match:
            year = int(year_match.group())
            if 1800 <= year <= 2030:  # Reasonable range
                return year
        return None
    
    def calculate_file_hash(self, file_path: Path) -> Optional[str]:
        """Calculate SHA-256 hash of file if it exists"""
        if not file_path.exists():
            return None
        
        try:
            sha256_hash = hashlib.sha256()
            with open(file_path, "rb") as f:
                for byte_block in iter(lambda: f.read(4096), b""):
                    sha256_hash.update(byte_block)
            return sha256_hash.hexdigest()
        except Exception as e:
            print(f"⚠️ Could not hash file {file_path}: {e}")
            return None
    
    def get_or_create_author(self, connection: mysql.connector.MySQLConnection, 
                           author_name: str) -> Optional[int]:
        """Get existing author or create new one"""
        if not author_name:
            return None
        
        author_name = self.normalize_text(author_name)
        if not author_name:
            return None
        
        # Check cache first
        if author_name in self.author_cache:
            return self.author_cache[author_name]
        
        cursor = connection.cursor()
        try:
            # Try to find existing author
            cursor.callproc('AddOrFindAuthor', [author_name, 0])
            
            # Get the result
            for result in cursor.stored_results():
                author_id = result.fetchone()[0]
                break
            
            # Cache the result
            self.author_cache[author_name] = author_id
            
            if author_id and author_name not in [a for a in self.author_cache.values()]:
                self.stats['authors_created'] += 1
            
            return author_id
            
        except Exception as e:
            print(f"⚠️ Error handling author '{author_name}': {e}")
            return None
        finally:
            cursor.close()
    
    def get_or_create_publisher(self, connection: mysql.connector.MySQLConnection, 
                              publisher_name: str) -> Optional[int]:
        """Get existing publisher or create new one"""
        if not publisher_name:
            return None
        
        publisher_name = self.normalize_text(publisher_name)
        if not publisher_name:
            return None
        
        # Check cache first
        if publisher_name in self.publisher_cache:
            return self.publisher_cache[publisher_name]
        
        cursor = connection.cursor()
        try:
            # Try to find existing publisher
            cursor.callproc('AddOrFindPublisher', [publisher_name, 0])
            
            # Get the result
            for result in cursor.stored_results():
                publisher_id = result.fetchone()[0]
                break
            
            # Cache the result
            self.publisher_cache[publisher_name] = publisher_id
            
            if publisher_id and publisher_name not in [p for p in self.publisher_cache.values()]:
                self.stats['publishers_created'] += 1
            
            return publisher_id
            
        except Exception as e:
            print(f"⚠️ Error handling publisher '{publisher_name}': {e}")
            return None
        finally:
            cursor.close()
    
    def get_or_create_category(self, connection: mysql.connector.MySQLConnection, 
                             category_name: str) -> Optional[int]:
        """Get existing category or create new one"""
        if not category_name or category_name.lower() in ['unknown', 'not found', '']:
            return None
        
        category_name = self.normalize_text(category_name)
        if not category_name:
            return None
        
        # Check cache first
        if category_name in self.category_cache:
            return self.category_cache[category_name]
        
        cursor = connection.cursor()
        try:
            # Try to find existing category
            cursor.callproc('AddOrFindCategory', [category_name, 0])
            
            # Get the result
            for result in cursor.stored_results():
                category_id = result.fetchone()[0]
                break
            
            # Cache the result
            self.category_cache[category_name] = category_id
            
            if category_id and category_name not in [c for c in self.category_cache.values()]:
                self.stats['categories_created'] += 1
            
            return category_id
            
        except Exception as e:
            print(f"⚠️ Error handling category '{category_name}': {e}")
            return None
        finally:
            cursor.close()
    
    def check_assets_exist(self, filename: str) -> Dict[str, bool]:
        """Check if cover and thumbnail files exist"""
        base_name = Path(filename).stem
        
        # Check for cover
        cover_path = Path("Covers") / f"{base_name}.png"
        has_cover = cover_path.exists()
        
        # Check for thumbnail  
        thumb_path = Path("Thumbs") / f"{base_name}.png"
        has_thumbnail = thumb_path.exists()
        
        return {
            'has_cover': has_cover,
            'has_thumbnail': has_thumbnail
        }
    
    def migrate_book_record(self, connection: mysql.connector.MySQLConnection, 
                          row: pd.Series) -> bool:
        """Migrate a single book record"""
        try:
            # Get normalized data
            filename = self.normalize_text(row.get('filename', ''))
            if not filename:
                print("⚠️ Skipping record with no filename")
                return False
            
            # Check if book already exists
            cursor = connection.cursor()
            cursor.execute("SELECT BookID FROM Books WHERE FileName = %s", (filename,))
            if cursor.fetchone():
                self.stats['duplicates_skipped'] += 1
                cursor.close()
                return True  # Not an error, just already exists
            cursor.close()
            
            # Get file information
            book_file_path = self.books_directory / filename
            file_size = book_file_path.stat().st_size if book_file_path.exists() else None
            file_hash = self.calculate_file_hash(book_file_path)
            
            # Get normalized entities
            author_id = self.get_or_create_author(connection, row.get('pdf_author', ''))
            publisher_id = self.get_or_create_publisher(connection, row.get('pdf_producer', '') or row.get('extracted_publisher', ''))
            category_id = self.get_or_create_category(connection, row.get('database_category', ''))
            
            # Extract years
            copyright_year = self.extract_year_from_text(row.get('pdf_creation_date', ''))
            publication_year = int(row.get('extracted_year', 0)) if row.get('extracted_year') else copyright_year
            
            # Check for assets
            assets = self.check_assets_exist(filename)
            
            # Prepare book data
            book_data = {
                'FileName': filename,
                'FilePath': str(book_file_path) if book_file_path.exists() else None,
                'FileSize': file_size,
                'FileSizeMB': float(row.get('file_size_mb', 0)) if row.get('file_size_mb') else None,
                'PageCount': int(row.get('page_count', 0)) if row.get('page_count') else None,
                'FileHash': file_hash,
                
                # Bibliographic data
                'Title': self.normalize_text(row.get('pdf_title', '') or filename.replace('.pdf', '')),
                'Subtitle': None,  # Not in CSV
                'AuthorID': author_id,
                'PublisherID': publisher_id,
                'CopyrightYear': copyright_year,
                'PublicationYear': publication_year,
                'Edition': self.normalize_text(row.get('extracted_edition', '')),
                'Language': 'English',  # Default for now
                'CategoryID': category_id,
                
                # Identifiers
                'PrimaryISBN': self.normalize_text(row.get('extracted_isbn', '')),
                'ExtractedISBN': self.normalize_text(row.get('extracted_isbn', '')),
                'ExtractedLCCN': self.normalize_text(row.get('extracted_lccn', '')),
                'ExtractedISSN': self.normalize_text(row.get('extracted_issn', '')),
                'ExtractedOCLC': self.normalize_text(row.get('extracted_oclc', '')),
                'ExtractedDOI': self.normalize_text(row.get('extracted_doi', '')),
                'ExtractedPublisher': self.normalize_text(row.get('extracted_publisher', '')),
                'ExtractedYear': int(row.get('extracted_year', 0)) if row.get('extracted_year') else None,
                
                # Content
                'FirstPageText': str(row.get('first_page_text', ''))[:10000] if row.get('first_page_text') else None,
                'TitlePageText': str(row.get('title_page_text', ''))[:10000] if row.get('title_page_text') else None,
                'CopyrightPageText': str(row.get('copyright_page_text', ''))[:10000] if row.get('copyright_page_text') else None,
                'ExtractedKeywords': self.normalize_text(row.get('extracted_keywords', '')),
                
                # Processing info
                'ProcessingVersion': '1.0',
                'ExtractionMethod': 'himalaya_gpu',
                'QualityScore': 75.0,  # Default reasonable score
                
                # Assets
                'HasCover': assets['has_cover'],
                'HasThumbnail': assets['has_thumbnail'],
                
                # Access
                'AccessLevel': 'public'
            }
            
            # Build INSERT statement
            columns = []
            values = []
            placeholders = []
            
            for key, value in book_data.items():
                if value is not None and value != '':
                    columns.append(key)
                    values.append(value)
                    placeholders.append('%s')
            
            insert_sql = f"""
                INSERT INTO Books ({', '.join(columns)})
                VALUES ({', '.join(placeholders)})
            """
            
            # Execute insert
            cursor = connection.cursor()
            cursor.execute(insert_sql, values)
            book_id = cursor.lastrowid
            cursor.close()
            
            # Update search index
            cursor = connection.cursor()
            cursor.callproc('UpdateBookSearchIndex', [book_id])
            cursor.close()
            
            connection.commit()
            self.stats['books_migrated'] += 1
            
            return True
            
        except Exception as e:
            print(f"❌ Error migrating book '{filename}': {e}")
            self.stats['errors_encountered'] += 1
            connection.rollback()
            return False
    
    def execute_migration(self) -> bool:
        """Execute the complete migration process"""
        try:
            # Load CSV data
            df = self.load_csv_data()
            
            # Connect to MySQL
            connection = self.connect_to_mysql()
            
            print(f"\n🚀 Starting migration of {len(df)} books...")
            
            # Process each book record
            for index, row in df.iterrows():
                if index % 50 == 0:  # Progress report every 50 books
                    print(f"📊 Progress: {index}/{len(df)} ({(index/len(df)*100):.1f}%)")
                
                self.migrate_book_record(connection, row)
            
            # Final progress report
            print(f"📊 Progress: {len(df)}/{len(df)} (100.0%)")
            
            # Close connection
            connection.close()
            
            # Generate final report
            self.generate_migration_report()
            
            return True
            
        except Exception as e:
            print(f"❌ Migration failed: {e}")
            return False
    
    def generate_migration_report(self):
        """Generate comprehensive migration report"""
        print("\n" + "="*60)
        print("📊 MIGRATION REPORT")
        print("="*60)
        print(f"📁 Source CSV: {self.csv_path}")
        print(f"🗄️ Target Database: {self.mysql_config['database']}")
        print(f"📅 Migration Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        print("📈 STATISTICS:")
        print(f"   📚 Total records in CSV: {self.stats['total_records']}")
        print(f"   ✅ Books successfully migrated: {self.stats['books_migrated']}")
        print(f"   👥 Authors created: {self.stats['authors_created']}")
        print(f"   🏢 Publishers created: {self.stats['publishers_created']}")
        print(f"   📂 Categories created: {self.stats['categories_created']}")
        print(f"   🔄 Duplicates skipped: {self.stats['duplicates_skipped']}")
        print(f"   ❌ Errors encountered: {self.stats['errors_encountered']}")
        print()
        
        success_rate = (self.stats['books_migrated'] / self.stats['total_records']) * 100
        print(f"✅ Success Rate: {success_rate:.1f}%")
        
        if self.stats['errors_encountered'] == 0:
            print("\n🎉 MIGRATION COMPLETED SUCCESSFULLY!")
            print("🔍 All books have been indexed for full-text search")
            print("📊 Database is ready for SQLite generation")
        else:
            print(f"\n⚠️ Migration completed with {self.stats['errors_encountered']} errors")
            print("📝 Check the output above for error details")
        
        print("="*60)

def main():
    """Main execution function"""
    
    # Configuration
    CSV_PATH = "AndersonLibrary_Himalaya_GPU.csv"
    BOOKS_DIRECTORY = "Anderson eBooks"  # Adjust path as needed
    
    # MySQL configuration - update with your settings
    MYSQL_CONFIG = {
        'host': 'localhost',
        'user': 'your_username',      # Update this
        'password': 'your_password',  # Update this
        'database': 'MyLibrary_Master',
        'charset': 'utf8mb4',
        'autocommit': False
    }
    
    print("🏔️ HIMALAYA CSV TO MYSQL MIGRATION")
    print("Standard: AIDEV-PascalCase-1.8")
    print("Enhanced with full bibliographic data extraction")
    print("="*60)
    
    # Validate input files exist
    if not os.path.exists(CSV_PATH):
        print(f"❌ CSV file not found: {CSV_PATH}")
        print("📁 Please ensure the AndersonLibrary_Himalaya_GPU.csv file is in the current directory")
        return False
    
    if not os.path.exists(BOOKS_DIRECTORY):
        print(f"⚠️ Books directory not found: {BOOKS_DIRECTORY}")
        print("📁 Migration will continue but file paths may not be accurate")
    
    # Create migrator and execute
    migrator = CSVToMySQLMigrator(CSV_PATH, MYSQL_CONFIG, BOOKS_DIRECTORY)
    success = migrator.execute_migration()
    
    if success:
        print("\n🚀 NEXT STEPS:")
        print("1. Verify data in MySQL: SELECT COUNT(*) FROM Books;")
        print("2. Test search functionality: SELECT * FROM BookSearch LIMIT 5;")
        print("3. Generate SQLite databases for users")
        print("4. Set up web interface")
        
        return True
    else:
        print("\n❌ Migration failed - check error messages above")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)

================
File: Updates/sql/next_steps_plan.md
================
# Anderson's Library - Next Steps Priority Plan

## 🚨 Immediate Actions (Next 2 Weeks)

### 1. Complete Firebase Authentication Setup

- **Status**: Code exists, needs configuration completion
- **Action**: Update Firebase config in `firebase_auth_system.html` with actual credentials
- **Files**: `Updates/firebase_auth_system (2).html` has the working version
- **Test**: Local server setup with `python3 -m http.server 8080`

### 2. Establish Google Drive File Structure

- **Action**: Organize your 1,219 PDFs in Google Drive folders

- **Structure**:
  
  ```
  Anderson's Library/
  ├── Books/ (your 1,219 PDFs)
  ├── Covers/ (book cover images) 
  ├── Database/ (SQLite files)
  └── Users/ (Google Sheets for user management)
  ```

### 3. Deploy Working Demo

- **Action**: Get basic version live on GitHub Pages
- **Current**: You have `index.html` ready
- **Add**: Working library interface from `Updates/library_interface.html`

## 🎯 Phase 1: Core Functionality (Month 1)

### Week 1: Authentication & Access

- [ ] Complete Firebase auth integration
- [ ] Set up Google Sheets user management
- [ ] Test user registration/approval workflow
- [ ] Deploy to GitHub Pages

### Week 2: File Management

- [ ] Upload processed book collection to Google Drive
- [ ] Implement PDF streaming from Drive API
- [ ] Test download/viewing functionality
- [ ] Create book metadata API

### Week 3: Search & Browse

- [ ] Implement basic search functionality
- [ ] Add category/subject filtering
- [ ] Create responsive book grid interface
- [ ] Add pagination for large collections

### Week 4: Polish & Test

- [ ] User testing with beta group
- [ ] Performance optimization
- [ ] Mobile interface refinement
- [ ] Documentation completion

## 🚀 Phase 2: Enhanced Features (Month 2-3)

### Advanced Search

- Full-text search within PDFs
- Semantic similarity search
- AI-powered recommendations

### User Experience

- Reading progress tracking
- Personal collections/bookmarks
- Annotation system
- Offline reading capability

### AI Integration

- Book classification refinement
- Content analysis and tagging
- Knowledge graph construction
- Research assistant features

## 📊 Success Metrics

### Technical

- [ ] Sub-second search across all 1,219 books
- [ ] 99%+ uptime for web interface
- [ ] Mobile-responsive design
- [ ] Secure user authentication

### User Experience

- [ ] Intuitive navigation for all skill levels
- [ ] Fast PDF loading/streaming
- [ ] Effective search results
- [ ] Seamless multi-device access

## 🛠️ Development Environment

### Required Tools

- Local web server for testing
- Firebase project with auth enabled
- Google Cloud project with Drive/Sheets APIs
- GitHub repository for deployment

### Key Files to Focus On

1. `Updates/firebase_auth_system (2).html` - Authentication
2. `Updates/library_interface.html` - Main UI
3. `library/js/GoogleDriveAuth.js` - Drive integration
4. `Scripts/System/GitHubAutoUpdate.py` - Deployment

## 💡 Quick Wins Available Now

### 1. Demo Deployment (2 hours)

- Push current `index.html` to GitHub Pages
- Add library portal link to existing interface
- Show working authentication form

### 2. Book Collection Upload (4 hours)

- Organize 1,219 PDFs in Google Drive
- Create folder structure with proper permissions
- Test file access via Drive API

### 3. Basic Search (6 hours)

- Implement JavaScript search in library interface  
- Add category filtering from your existing data
- Create responsive book grid display

## 🎯 The Vision Realized

When complete, users will:

1. **Register** via Firebase auth with admin approval
2. **Browse** 1,219+ books in categorized interface
3. **Search** across titles, authors, content with AI assistance
4. **Read** PDFs streamed directly from Google Drive
5. **Collaborate** through annotations and shared collections

## Next Conversation Focus

Let's discuss:

1. Which phase should we tackle first?
2. What's your comfort level with Firebase/Google Cloud setup?
3. Do you want to start with a simple demo or go straight to full features?
4. Any specific technical roadblocks you're facing
================
File: requirements.txt
================


================================================================
List of Included Files
================================================================

Files included:
Andy.py
CreateThumbs/ConvertToThumbnails.py
CreateThumbs/ConvertToThumbnailsPart2.py
CustomWindow.py
HTML/GoogleAuthorzeTest.html
README.md
Schema.pdf
Scripts/System/BackupProject.py
Scripts/System/CodebaseSum.py
Scripts/System/GPU OCR Speed Test.py
Scripts/System/GitHubAutoUpdate.py
Scripts/System/GitHubUpdateSite.py
Scripts/System/ListFilesByDate.py
Scripts/System/MarkdownToText.py
Scripts/System/UpdatePopulate.py
Updates/..Old/firebase_auth_system (1).html
Updates/..Old/firebase_auth_system (2).html
Updates/..Old/firebase_auth_system.html
Updates/..Old/library_interface.html
Updates/..Old/local_server_setup.sh
Updates/..Old/quick_config_guide.html
Updates/CommunitySQLs/upgrade_ui_flow.html
Updates/csv_to_mysql_migration.py
Updates/sql/next_steps_plan.md
requirements.txt

There are 25 files included in the Files section of the CodebaseSummary document.

================
File: ..Excclude/CopyModulesToStructure.py
================
#!/usr/bin/env python3
# File: CopyModulesToStructure.py  
# Path: CopyModulesToStructure.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  16:25PM
"""
Description: Module File Placement Helper
Assists with copying the new modular components to their proper locations
in the Source/ directory structure for Anderson's Library.

Purpose: Automates the placement of refactored modules into the correct
directory structure, reducing setup errors and ensuring proper organization.
"""

import os
import shutil
from pathlib import Path
from typing import Dict, List, Tuple


class ModulePlacementHelper:
    """Helps place module files in the correct directory structure"""
    
    def __init__(self):
        """Initialize the placement helper"""
        self.BaseDirectory = Path(".")
        self.SourceDirectory = self.BaseDirectory / "Source"
        
        # Define where each module should go
        self.ModuleTargets: Dict[str, str] = {
            "DatabaseModels.py": "Source/Data/",
            "DatabaseManager.py": "Source/Core/",
            "BookService.py": "Source/Core/",
            "FilterPanel.py": "Source/Interface/",
            "BookGrid.py": "Source/Interface/",
            "MainWindow.py": "Source/Interface/",
            "CustomWindow.py": "Source/Interface/"  # User's existing file
        }
        
        print("📋 Anderson's Library - Module Placement Helper")
        print("=" * 55)
    
    def CheckStructureExists(self) -> bool:
        """Check if the Source/ structure exists"""
        RequiredDirectories = [
            "Source",
            "Source/Data",
            "Source/Core", 
            "Source/Interface"
        ]
        
        Missing = []
        for Directory in RequiredDirectories:
            if not (self.BaseDirectory / Directory).exists():
                Missing.append(Directory)
        
        if Missing:
            print("❌ Missing required directories:")
            for Dir in Missing:
                print(f"   📂 {Dir}")
            print("\n💡 Run QuickSetup.py first to create the structure!")
            return False
        
        print("✅ Source directory structure exists")
        return True
    
    def FindModuleFiles(self) -> Dict[str, Path]:
        """Find module files in current directory"""
        FoundFiles = {}
        
        print("\n🔍 Looking for module files...")
        
        for ModuleFile in self.ModuleTargets.keys():
            # Look in current directory first
            CurrentPath = self.BaseDirectory / ModuleFile
            
            if CurrentPath.exists():
                FoundFiles[ModuleFile] = CurrentPath
                print(f"   ✅ Found: {ModuleFile}")
            else:
                print(f"   ❌ Missing: {ModuleFile}")
        
        return FoundFiles
    
    def CopyModuleFiles(self, FoundFiles: Dict[str, Path]) -> int:
        """Copy found module files to their target locations"""
        SuccessCount = 0
        
        print("\n📁 Copying modules to target locations...")
        
        for ModuleFile, SourcePath in FoundFiles.items():
            TargetDirectory = self.BaseDirectory / self.ModuleTargets[ModuleFile]
            TargetPath = TargetDirectory / ModuleFile
            
            try:
                # Ensure target directory exists
                TargetDirectory.mkdir(parents=True, exist_ok=True)
                
                # Copy the file
                shutil.copy2(SourcePath, TargetPath)
                
                print(f"   ✅ {ModuleFile} → {self.ModuleTargets[ModuleFile]}")
                SuccessCount += 1
                
            except Exception as Error:
                print(f"   ❌ Failed to copy {ModuleFile}: {Error}")
        
        return SuccessCount
    
    def ValidateInstallation(self) -> List[str]:
        """Validate that all modules are properly placed"""
        Issues = []
        
        print("\n🔍 Validating installation...")
        
        for ModuleFile, TargetDirectory in self.ModuleTargets.items():
            TargetPath = self.BaseDirectory / TargetDirectory / ModuleFile
            
            if TargetPath.exists():
                print(f"   ✅ {TargetDirectory}{ModuleFile}")
            else:
                Issues.append(f"{TargetDirectory}{ModuleFile}")
                print(f"   ❌ Missing: {TargetDirectory}{ModuleFile}")
        
        return Issues
    
    def GenerateInstructions(self, MissingFiles: List[str]) -> None:
        """Generate manual copy instructions for missing files"""
        if not MissingFiles:
            return
        
        print("\n📋 MANUAL COPY INSTRUCTIONS:")
        print("Copy these files manually if they exist:")
        
        for ModuleFile in self.ModuleTargets.keys():
            TargetLocation = self.ModuleTargets[ModuleFile]
            print(f"   📄 {ModuleFile} → {TargetLocation}")
        
        print("\n💡 Make sure file names match exactly (including case)")
    
    def CreateTestScript(self) -> None:
        """Create a test script to verify the installation"""
        TestScript = '''#!/usr/bin/env python3
"""Test script for Anderson's Library modular architecture"""

import sys
from pathlib import Path

# Add Source to Python path
sys.path.insert(0, str(Path(__file__).parent / "Source"))

def TestImports():
    """Test that all modules can be imported"""
    print("🧪 Testing module imports...")
    
    TestModules = [
        ("Data.DatabaseModels", "Book, Category, Subject"),
        ("Core.DatabaseManager", "DatabaseManager"),
        ("Core.BookService", "BookService"),
        ("Interface.FilterPanel", "FilterPanel"),
        ("Interface.BookGrid", "BookGrid"),
        ("Interface.MainWindow", "MainWindow")
    ]
    
    Success = 0
    Failed = 0
    
    for ModuleName, Classes in TestModules:
        try:
            exec(f"from {ModuleName} import {Classes}")
            print(f"   ✅ {ModuleName}")
            Success += 1
        except ImportError as Error:
            print(f"   ❌ {ModuleName}: {Error}")
            Failed += 1
    
    print(f"\\n📊 Results: {Success} successful, {Failed} failed")
    
    if Failed == 0:
        print("🎉 All modules imported successfully!")
        print("🚀 Ready to run: python RunAnderson.py")
        return True
    else:
        print("⚠️ Some modules failed to import")
        print("📝 Check file locations and __init__.py files")
        return False

if __name__ == "__main__":
    TestImports()
'''
        
        TestPath = self.BaseDirectory / "TestImports.py"
        with open(TestPath, 'w') as f:
            f.write(TestScript)
        
        if os.name != 'nt':
            os.chmod(TestPath, 0o755)
        
        print("✅ Created TestImports.py")
    
    def RunFullProcess(self) -> None:
        """Run the complete module placement process"""
        try:
            # Check structure exists
            if not self.CheckStructureExists():
                return
            
            # Find module files
            FoundFiles = self.FindModuleFiles()
            
            if not FoundFiles:
                print("\n❌ No module files found!")
                self.GenerateInstructions([])
                return
            
            # Copy files
            SuccessCount = self.CopyModuleFiles(FoundFiles)
            
            # Validate installation
            Issues = self.ValidateInstallation()
            
            # Create test script
            self.CreateTestScript()
            
            # Generate final report
            print("\n" + "=" * 55)
            print("📊 MODULE PLACEMENT COMPLETE!")
            print("=" * 55)
            print(f"✅ Successfully placed: {SuccessCount} modules")
            
            if Issues:
                print(f"❌ Missing modules: {len(Issues)}")
                print("\n📋 Still needed:")
                for Issue in Issues:
                    print(f"   📄 {Issue}")
            else:
                print("🎉 All modules placed successfully!")
                print("\n🚀 NEXT STEPS:")
                print("1. Run: python TestImports.py")
                print("2. If tests pass, run: python RunAnderson.py")
                print("3. Your app should work exactly like before!")
            
            print("=" * 55)
            
        except Exception as Error:
            print(f"❌ Error during placement: {Error}")


def Main():
    """Main entry point"""
    Helper = ModulePlacementHelper()
    Helper.RunFullProcess()


if __name__ == "__main__":
    Main()

================
File: ..Excclude/DatabaseModels.py
================
# File: DatabaseModels.py
# Path: Source/Data/DatabaseModels.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  14:30PM
"""
Description: Anderson's Library Database Models
Core data models for books, categories, and subjects with validation and conversion methods.
Follows single responsibility principle with focused data representation.

Purpose: Provides clean data model classes that encapsulate database entities
and their business rules. Used by all other modules for consistent data handling.
"""

from dataclasses import dataclass
from typing import Optional, List, Dict, Any
from pathlib import Path
import os
import re
from datetime import datetime


@dataclass
class Category:
    """
    Represents a book category in Anderson's Library.
    Maps to categories table in database.
    """
    CategoryId: Optional[int] = None
    CategoryName: str = ""
    
    def __post_init__(self):
        """Validate and normalize category data after initialization"""
        self.CategoryName = self.NormalizeText(self.CategoryName)
    
    @staticmethod
    def NormalizeText(Text: str) -> str:
        """Normalize text for consistent display and comparison"""
        if not Text:
            return ""
        return str(Text).strip().replace('  ', ' ')
    
    def IsValid(self) -> bool:
        """Check if category has valid data"""
        return bool(self.CategoryName and len(self.CategoryName.strip()) > 0)
    
    def ToDictionary(self) -> Dict[str, Any]:
        """Convert category to dictionary for serialization"""
        return {
            'CategoryId': self.CategoryId,
            'CategoryName': self.CategoryName
        }
    
    @classmethod
    def FromDictionary(cls, Data: Dict[str, Any]) -> 'Category':
        """Create category from dictionary data"""
        return cls(
            CategoryId=Data.get('CategoryId'),
            CategoryName=Data.get('CategoryName', '')
        )
    
    def __str__(self) -> str:
        """String representation for display"""
        return self.CategoryName
    
    def __eq__(self, Other) -> bool:
        """Equality comparison based on normalized name"""
        if not isinstance(Other, Category):
            return False
        return self.CategoryName.lower() == Other.CategoryName.lower()
    
    def __hash__(self) -> int:
        """Hash for use in sets and dictionaries"""
        return hash(self.CategoryName.lower())


@dataclass
class Subject:
    """
    Represents a book subject within a category.
    Maps to subjects table in database.
    """
    SubjectId: Optional[int] = None
    CategoryId: Optional[int] = None
    SubjectName: str = ""
    CategoryName: str = ""  # For display purposes
    
    def __post_init__(self):
        """Validate and normalize subject data after initialization"""
        self.SubjectName = self.NormalizeText(self.SubjectName)
        self.CategoryName = self.NormalizeText(self.CategoryName)
    
    @staticmethod
    def NormalizeText(Text: str) -> str:
        """Normalize text for consistent display and comparison"""
        if not Text:
            return ""
        return str(Text).strip().replace('  ', ' ')
    
    def IsValid(self) -> bool:
        """Check if subject has valid data"""
        return bool(self.SubjectName and len(self.SubjectName.strip()) > 0)
    
    def HasCategory(self) -> bool:
        """Check if subject is associated with a category"""
        return self.CategoryId is not None and self.CategoryId > 0
    
    def ToDictionary(self) -> Dict[str, Any]:
        """Convert subject to dictionary for serialization"""
        return {
            'SubjectId': self.SubjectId,
            'CategoryId': self.CategoryId,
            'SubjectName': self.SubjectName,
            'CategoryName': self.CategoryName
        }
    
    @classmethod
    def FromDictionary(cls, Data: Dict[str, Any]) -> 'Subject':
        """Create subject from dictionary data"""
        return cls(
            SubjectId=Data.get('SubjectId'),
            CategoryId=Data.get('CategoryId'),
            SubjectName=Data.get('SubjectName', ''),
            CategoryName=Data.get('CategoryName', '')
        )
    
    def GetFullName(self) -> str:
        """Get subject name with category for display"""
        if self.CategoryName:
            return f"{self.CategoryName} → {self.SubjectName}"
        return self.SubjectName
    
    def __str__(self) -> str:
        """String representation for display"""
        return self.SubjectName
    
    def __eq__(self, Other) -> bool:
        """Equality comparison based on normalized name and category"""
        if not isinstance(Other, Subject):
            return False
        return (self.SubjectName.lower() == Other.SubjectName.lower() and 
                self.CategoryId == Other.CategoryId)
    
    def __hash__(self) -> int:
        """Hash for use in sets and dictionaries"""
        return hash((self.SubjectName.lower(), self.CategoryId))


@dataclass
class Book:
    """
    Represents a book in Anderson's Library with all metadata.
    Maps to books table in database plus file system information.
    """
    BookId: Optional[int] = None
    Title: str = ""
    CategoryId: Optional[int] = None
    SubjectId: Optional[int] = None
    FileName: str = ""
    FilePath: str = ""
    
    # Display names for UI
    CategoryName: str = ""
    SubjectName: str = ""
    
    # File system information
    FileSize: Optional[int] = None
    FileSizeMB: Optional[float] = None
    LastModified: Optional[datetime] = None
    CoverImagePath: str = ""
    HasCover: bool = False
    
    def __post_init__(self):
        """Validate and normalize book data after initialization"""
        self.Title = self.NormalizeText(self.Title)
        self.FileName = self.NormalizeText(self.FileName)
        self.CategoryName = self.NormalizeText(self.CategoryName)
        self.SubjectName = self.NormalizeText(self.SubjectName)
        
        # Auto-calculate cover image path if not provided
        if not self.CoverImagePath and self.FileName:
            self.CoverImagePath = self.GetCoverImagePath()
            self.HasCover = self.CheckCoverExists()
        
        # Auto-calculate file size in MB if file size is available
        if self.FileSize and not self.FileSizeMB:
            self.FileSizeMB = self.FileSize / (1024 * 1024)
    
    @staticmethod
    def NormalizeText(Text: str) -> str:
        """Normalize text for consistent display and comparison"""
        if not Text:
            return ""
        return str(Text).strip().replace('  ', ' ')
    
    def IsValid(self) -> bool:
        """Check if book has minimum required data"""
        return bool(self.Title and self.FileName)
    
    def HasCategory(self) -> bool:
        """Check if book is assigned to a category"""
        return self.CategoryId is not None and self.CategoryId > 0
    
    def HasSubject(self) -> bool:
        """Check if book is assigned to a subject"""
        return self.SubjectId is not None and self.SubjectId > 0
    
    def GetDisplayTitle(self) -> str:
        """Get title for display, falling back to filename if no title"""
        if self.Title:
            return self.Title
        elif self.FileName:
            return Path(self.FileName).stem  # Remove .pdf extension
        return "Unknown Title"
    
    def GetCoverImagePath(self) -> str:
        """Generate expected cover image path based on filename"""
        if not self.FileName:
            return ""
        
        BaseName = Path(self.FileName).stem
        return f"Anderson eBooks/Covers/{BaseName}.png"
    
    def CheckCoverExists(self) -> bool:
        """Check if cover image file actually exists"""
        if not self.CoverImagePath:
            return False
        return os.path.exists(self.CoverImagePath)
    
    def GetFileSizeDisplay(self) -> str:
        """Get human-readable file size"""
        if self.FileSizeMB:
            if self.FileSizeMB < 1:
                return f"{self.FileSizeMB * 1024:.0f} KB"
            else:
                return f"{self.FileSizeMB:.1f} MB"
        return "Unknown size"
    
    def GetFullPath(self) -> str:
        """Get complete file path for opening"""
        if self.FilePath:
            return self.FilePath
        elif self.FileName:
            return f"Anderson eBooks/{self.FileName}"
        return ""
    
    def FileExists(self) -> bool:
        """Check if the PDF file actually exists"""
        FullPath = self.GetFullPath()
        return bool(FullPath and os.path.exists(FullPath))
    
    def GetCategorySubjectDisplay(self) -> str:
        """Get category and subject for display"""
        if self.CategoryName and self.SubjectName:
            return f"{self.CategoryName} → {self.SubjectName}"
        elif self.CategoryName:
            return self.CategoryName
        elif self.SubjectName:
            return self.SubjectName
        return "Uncategorized"
    
    def ToDictionary(self) -> Dict[str, Any]:
        """Convert book to dictionary for serialization"""
        return {
            'BookId': self.BookId,
            'Title': self.Title,
            'CategoryId': self.CategoryId,
            'SubjectId': self.SubjectId,
            'FileName': self.FileName,
            'FilePath': self.FilePath,
            'CategoryName': self.CategoryName,
            'SubjectName': self.SubjectName,
            'FileSize': self.FileSize,
            'FileSizeMB': self.FileSizeMB,
            'LastModified': self.LastModified.isoformat() if self.LastModified else None,
            'CoverImagePath': self.CoverImagePath,
            'HasCover': self.HasCover
        }
    
    @classmethod
    def FromDictionary(cls, Data: Dict[str, Any]) -> 'Book':
        """Create book from dictionary data"""
        LastModified = None
        if Data.get('LastModified'):
            try:
                LastModified = datetime.fromisoformat(Data['LastModified'])
            except (ValueError, TypeError):
                pass
        
        return cls(
            BookId=Data.get('BookId'),
            Title=Data.get('Title', ''),
            CategoryId=Data.get('CategoryId'),
            SubjectId=Data.get('SubjectId'),
            FileName=Data.get('FileName', ''),
            FilePath=Data.get('FilePath', ''),
            CategoryName=Data.get('CategoryName', ''),
            SubjectName=Data.get('SubjectName', ''),
            FileSize=Data.get('FileSize'),
            FileSizeMB=Data.get('FileSizeMB'),
            LastModified=LastModified,
            CoverImagePath=Data.get('CoverImagePath', ''),
            HasCover=Data.get('HasCover', False)
        )
    
    def __str__(self) -> str:
        """String representation for display"""
        return self.GetDisplayTitle()
    
    def __eq__(self, Other) -> bool:
        """Equality comparison based on filename (unique identifier)"""
        if not isinstance(Other, Book):
            return False
        return self.FileName.lower() == Other.FileName.lower()
    
    def __hash__(self) -> int:
        """Hash for use in sets and dictionaries"""
        return hash(self.FileName.lower())


class ModelValidator:
    """
    Utility class for validating model data and business rules.
    Provides centralized validation logic for all models.
    """
    
    @staticmethod
    def ValidateCategory(CategoryData: Dict[str, Any]) -> List[str]:
        """Validate category data and return list of error messages"""
        Errors = []
        
        CategoryName = CategoryData.get('CategoryName', '').strip()
        if not CategoryName:
            Errors.append("Category name is required")
        elif len(CategoryName) > 100:
            Errors.append("Category name must be 100 characters or less")
        
        return Errors
    
    @staticmethod
    def ValidateSubject(SubjectData: Dict[str, Any]) -> List[str]:
        """Validate subject data and return list of error messages"""
        Errors = []
        
        SubjectName = SubjectData.get('SubjectName', '').strip()
        if not SubjectName:
            Errors.append("Subject name is required")
        elif len(SubjectName) > 100:
            Errors.append("Subject name must be 100 characters or less")
        
        CategoryId = SubjectData.get('CategoryId')
        if CategoryId is not None and (not isinstance(CategoryId, int) or CategoryId < 1):
            Errors.append("Category ID must be a positive integer")
        
        return Errors
    
    @staticmethod
    def ValidateBook(BookData: Dict[str, Any]) -> List[str]:
        """Validate book data and return list of error messages"""
        Errors = []
        
        Title = BookData.get('Title', '').strip()
        FileName = BookData.get('FileName', '').strip()
        
        if not Title and not FileName:
            Errors.append("Either title or filename is required")
        
        if FileName:
            if not FileName.lower().endswith('.pdf'):
                Errors.append("Filename must have .pdf extension")
            elif len(FileName) > 255:
                Errors.append("Filename must be 255 characters or less")
        
        if Title and len(Title) > 500:
            Errors.append("Title must be 500 characters or less")
        
        for IdField in ['CategoryId', 'SubjectId']:
            IdValue = BookData.get(IdField)
            if IdValue is not None and (not isinstance(IdValue, int) or IdValue < 1):
                Errors.append(f"{IdField} must be a positive integer")
        
        return Errors


# Module-level utility functions for common operations
def CreateCategoryFromRow(DatabaseRow: tuple) -> Category:
    """Create Category object from database row tuple"""
    if len(DatabaseRow) >= 2:
        return Category(CategoryId=DatabaseRow[0], CategoryName=DatabaseRow[1])
    return Category()


def CreateSubjectFromRow(DatabaseRow: tuple) -> Subject:
    """Create Subject object from database row tuple"""
    if len(DatabaseRow) >= 3:
        return Subject(
            SubjectId=DatabaseRow[0],
            CategoryId=DatabaseRow[1],
            SubjectName=DatabaseRow[2]
        )
    return Subject()


def CreateBookFromRow(DatabaseRow: tuple) -> Book:
    """Create Book object from database row tuple"""
    if len(DatabaseRow) >= 4:
        return Book(
            BookId=DatabaseRow[0],
            Title=DatabaseRow[1],
            CategoryId=DatabaseRow[2],
            SubjectId=DatabaseRow[3]
        )
    return Book()

================
File: ..Excclude/SetupProjectStructure.py
================
#!/usr/bin/env python3
# File: SetupProjectStructure.py
# Path: SetupProjectStructure.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  16:15PM
"""
Description: Anderson's Library Project Structure Setup
Creates the complete modular directory structure with proper __init__.py files.
Follows Design Standard v1.8 for professional Python project organization.

Purpose: Automates the creation of the new modular architecture for Anderson's Library,
ensuring proper Python package structure and Design Standard compliance.
"""

import os
import sys
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Tuple


class ProjectStructureBuilder:
    """
    Builds the complete Anderson's Library modular project structure.
    Creates directories and __init__.py files following Design Standard v1.8.
    """
    
    def __init__(self, BaseDirectory: str = "."):
        """
        Initialize project structure builder.
        
        Args:
            BaseDirectory: Root directory for project structure
        """
        self.BaseDirectory = Path(BaseDirectory)
        self.CreatedDirectories: List[Path] = []
        self.CreatedFiles: List[Path] = []
        self.CurrentDate = datetime.now().strftime("%Y-%m-%d")
        self.CurrentDateTime = datetime.now().strftime("%Y-%m-%d  %H:%M%p")
        
        print("🏔️ Anderson's Library - Project Structure Builder")
        print("=" * 60)
        print(f"📁 Base Directory: {self.BaseDirectory.absolute()}")
        print(f"📅 Date: {self.CurrentDate}")
        print("=" * 60)
    
    def CreateDirectoryStructure(self) -> None:
        """Create the complete directory structure"""
        print("\n🏗️ Creating Directory Structure...")
        
        # Define the complete directory structure
        Directories = [
            # Source code directories
            "Source",
            "Source/Data",
            "Source/Core", 
            "Source/Interface",
            "Source/Utils",
            "Source/Framework",
            
            # Configuration and assets
            "Config",
            "Assets",
            "Assets/Icons",
            
            # Data directories
            "Data",
            "Data/Databases",
            "Data/Cache",
            "Data/Backups",
            
            # Scripts directories  
            "Scripts",
            "Scripts/Deployment",
            "Scripts/Development", 
            "Scripts/Maintenance",
            "Scripts/Migration",
            "Scripts/System",
            
            # Documentation and tests
            "Docs",
            "Tests",
            "Tests/Unit",
            "Tests/Integration",
            "Tests/Data",
            
            # Legacy and updates
            "Legacy",
            "Updates",
            
            # Web interface (future)
            "WebPages",
            "WebPages/Assets",
            "WebPages/CSS",
            "WebPages/JS"
        ]
        
        # Create each directory
        for DirectoryPath in Directories:
            FullPath = self.BaseDirectory / DirectoryPath
            self._CreateDirectory(FullPath)
        
        print(f"✅ Created {len(self.CreatedDirectories)} directories")
    
    def CreateInitFiles(self) -> None:
        """Create __init__.py files for Python packages"""
        print("\n📄 Creating __init__.py Files...")
        
        # Define packages that need __init__.py files
        PackageDefinitions = [
            # Main source packages
            ("Source", "Anderson's Library Source Package", "Main source code package for Anderson's Library application."),
            ("Source/Data", "Data Models Package", "Data models and database schema definitions."),
            ("Source/Core", "Core Business Logic Package", "Core business logic and service layer components."),
            ("Source/Interface", "User Interface Package", "User interface components and widgets."),
            ("Source/Utils", "Utilities Package", "Utility functions and helper classes."),
            ("Source/Framework", "Framework Package", "Reusable framework components and base classes."),
            
            # Test packages
            ("Tests", "Test Suite Package", "Complete test suite for Anderson's Library."),
            ("Tests/Unit", "Unit Tests Package", "Unit tests for individual components."),
            ("Tests/Integration", "Integration Tests Package", "Integration tests for component interactions."),
        ]
        
        # Create __init__.py for each package
        for PackagePath, Title, Description in PackageDefinitions:
            FullPath = self.BaseDirectory / PackagePath
            if FullPath.exists():
                InitFilePath = FullPath / "__init__.py"
                self._CreateInitFile(InitFilePath, Title, Description, PackagePath)
        
        print(f"✅ Created {len(self.CreatedFiles)} __init__.py files")
    
    def CreateEntryPoint(self) -> None:
        """Create main application entry point"""
        print("\n🚀 Creating Application Entry Point...")
        
        EntryPointPath = self.BaseDirectory / "AndersonLibrary.py"
        EntryPointContent = f'''#!/usr/bin/env python3
# File: AndersonLibrary.py
# Path: AndersonLibrary.py
# Standard: AIDEV-PascalCase-1.8
# Created: {self.CurrentDate}
# Last Modified: {self.CurrentDateTime}
"""
Description: Anderson's Library - Professional Edition
Main entry point for the modular Anderson's Library application.
Provides clean startup and error handling for the complete application.

Purpose: Serves as the primary executable for Anderson's Library,
coordinating application startup and initialization.
"""

import sys
import os
import logging
from pathlib import Path

# Add Source directory to Python path for imports
SourcePath = Path(__file__).parent / "Source"
sys.path.insert(0, str(SourcePath))

try:
    from Interface.MainWindow import RunApplication
except ImportError as Error:
    print(f"❌ Import Error: {{Error}}")
    print("📁 Make sure the Source directory structure is complete")
    print("🔧 Run SetupProjectStructure.py to create the proper structure")
    sys.exit(1)


def Main() -> int:
    """
    Main application entry point with error handling.
    
    Returns:
        Application exit code (0 for success, 1 for error)
    """
    try:
        print("🏔️ Starting Anderson's Library - Professional Edition")
        print("📚 Project Himalaya - BowersWorld.com")
        print("=" * 50)
        
        # Configure logging
        logging.basicConfig(
            level=logging.INFO,
            format='[%(asctime)s] %(name)s - %(levelname)s: %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler('anderson_library.log', mode='a')
            ]
        )
        
        # Run the application
        ExitCode = RunApplication()
        
        print("👋 Anderson's Library closed successfully")
        return ExitCode
        
    except KeyboardInterrupt:
        print("\\n⚠️ Application interrupted by user")
        return 0
        
    except Exception as Error:
        print(f"❌ Critical Error: {{Error}}")
        logging.exception("Critical application error")
        return 1


if __name__ == "__main__":
    sys.exit(Main())
'''
        
        self._WriteFile(EntryPointPath, EntryPointContent)
        
        # Make it executable on Unix-like systems
        if os.name != 'nt':  # Not Windows
            try:
                os.chmod(EntryPointPath, 0o755)
                print("✅ Made AndersonLibrary.py executable")
            except:
                pass
        
        print("✅ Created AndersonLibrary.py entry point")
    
    def CreateRequirementsFile(self) -> None:
        """Create requirements.txt file"""
        print("\n📦 Creating Requirements File...")
        
        RequirementsPath = self.BaseDirectory / "requirements.txt"
        RequirementsContent = f'''# Anderson's Library - Requirements
# Generated: {self.CurrentDate}
# Standard: AIDEV-PascalCase-1.8

# Core GUI Framework
PySide6>=6.5.0

# Database Operations
# (SQLite is built into Python)

# Image Processing (for cover thumbnails)
Pillow>=9.0.0

# PDF Processing (future enhancement)
PyPDF2>=3.0.0

# Development and Testing
pytest>=7.0.0
pytest-cov>=4.0.0

# Code Quality
black>=22.0.0
flake8>=4.0.0

# Logging and Utilities
colorlog>=6.0.0

# Documentation (future)
sphinx>=4.0.0
sphinx-rtd-theme>=1.0.0
'''
        
        self._WriteFile(RequirementsPath, RequirementsContent)
        print("✅ Created requirements.txt")
    
    def CreateGitignore(self) -> None:
        """Create .gitignore file following Design Standard v1.8"""
        print("\n🚫 Creating .gitignore File...")
        
        GitignorePath = self.BaseDirectory / ".gitignore"
        GitignoreContent = f'''# Anderson's Library - .gitignore
# Generated: {self.CurrentDate}
# Standard: AIDEV-PascalCase-1.8

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual Environments
venv/
env/
ENV/
.venv/
.env/

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# Anderson's Library Specific
Data/Databases/*.db
Data/Databases/*.db-*
Data/Cache/
Data/Backups/
Logs/
*.log

# Sensitive Configuration
Config/Production/secrets.json
Config/Production/api_keys.json
.env
.env.local
.env.production

# Large Files
Assets/Books/
Assets/Covers/
Assets/Thumbs/

# Temporary Files
tmp/
temp/
*.tmp
*.temp

# OS Generated
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Coverage Reports
htmlcov/
.coverage
.coverage.*
coverage.xml
*.cover

# Testing
.pytest_cache/
.tox/

# Documentation builds
docs/_build/
docs/build/

# Project-specific exclusions
anderson-library-service-key.json
config/
secrets/

# Directories to ignore
node_modules/
'''
        
        self._WriteFile(GitignorePath, GitignoreContent)
        print("✅ Created .gitignore")
    
    def CreateReadme(self) -> None:
        """Create README.md file"""
        print("\n📖 Creating README.md File...")
        
        ReadmePath = self.BaseDirectory / "README.md"
        ReadmeContent = f'''# 📚 Anderson's Library - Professional Edition

**A modular, professional digital library management system built with Python and PySide6.**

## 🏔️ Project Himalaya - BowersWorld.com

*Generated: {self.CurrentDate}*  
*Standard: AIDEV-PascalCase-1.8*

---

## ✨ Features

- 📖 **Digital Library Management** - Organize and browse thousands of PDF books
- 🔍 **Intelligent Search** - Find books by title, category, or subject  
- 📂 **Category Organization** - Hierarchical category and subject structure
- 🎨 **Beautiful Interface** - Custom-designed responsive interface
- 🏗️ **Modular Architecture** - Professional, maintainable code structure
- 🔒 **Data Integrity** - SQLite database with proper normalization

## 🚀 Quick Start

### Prerequisites
- Python 3.8+ 
- PySide6
- SQLite database with your book collection

### Installation
```bash
# Clone the repository
git clone https://github.com/YourUsername/andersons-library.git
cd andersons-library

# Install dependencies
pip install -r requirements.txt

# Run the application
python AndersonLibrary.py
```

## 🏗️ Architecture

### Modular Structure
```
Source/
├── Data/              # Data models and validation
├── Core/              # Business logic and services  
├── Interface/         # UI components and widgets
├── Utils/             # Utility functions
└── Framework/         # Reusable framework components
```

### Key Components
- **DatabaseManager** - Clean database operations
- **BookService** - Business logic for book operations
- **FilterPanel** - Category and search interface
- **BookGrid** - Responsive book display grid
- **MainWindow** - Application orchestrator

## 📊 Database Schema

The application uses a normalized SQLite database:
- **Categories** - Book categories (Programming, Science, etc.)
- **Subjects** - Subcategories within each category
- **Books** - Individual book records with metadata

## 🎯 Design Standards

This project follows **AIDEV-PascalCase-1.8** standards:
- ✅ PascalCase naming throughout
- ✅ Comprehensive file headers
- ✅ ~300 line module limit
- ✅ Single responsibility principle
- ✅ Proper error handling and logging

## 🧪 Testing

```bash
# Run unit tests
pytest Tests/Unit/

# Run integration tests  
pytest Tests/Integration/

# Run all tests with coverage
pytest --cov=Source Tests/
```

## 🔧 Development

### Adding New Features
1. Create focused modules in appropriate Source/ subdirectory
2. Follow Design Standard v1.8 naming and structure
3. Add comprehensive tests in Tests/ directory
4. Update documentation

### Code Quality
```bash
# Format code
black Source/

# Check style
flake8 Source/

# Type checking (future)
mypy Source/
```

## 📁 Project Structure

```
├── AndersonLibrary.py          # Main application entry point
├── Source/                     # Source code packages
│   ├── Data/                  # Data models and schemas  
│   ├── Core/                  # Business logic services
│   ├── Interface/             # UI components
│   ├── Utils/                 # Utility functions
│   └── Framework/             # Reusable framework
├── Assets/                    # Images, icons, resources
├── Config/                    # Configuration files
├── Data/                      # Database and data files
├── Scripts/                   # Utility and maintenance scripts
├── Tests/                     # Test suites
├── Docs/                      # Documentation
└── requirements.txt           # Python dependencies
```

## 🌟 Future Roadmap

- 🌐 **Web Interface** - Convert to web application
- 📱 **Mobile App** - Responsive mobile interface  
- 🔍 **Full-Text Search** - Search within PDF content
- 🤖 **AI Integration** - Intelligent book recommendations
- ☁️ **Cloud Sync** - Multi-device synchronization

## 📝 License

© 2025 BowersWorld.com - Project Himalaya  
Licensed under MIT License

## 🤝 Contributing

1. Fork the repository
2. Create feature branch (`git checkout -b feature/AmazingFeature`)
3. Follow Design Standard v1.8
4. Commit changes (`git commit -m 'Add AmazingFeature'`)
5. Push to branch (`git push origin feature/AmazingFeature`)
6. Open Pull Request

## 📞 Support

- **Documentation:** `/Docs` directory
- **Issues:** GitHub Issues
- **Contact:** BowersWorld.com

---

**Built with ❤️ using AIDEV-PascalCase-1.8 Standards**
'''
        
        self._WriteFile(ReadmePath, ReadmeContent)
        print("✅ Created README.md")
    
    def GenerateSummaryReport(self) -> None:
        """Generate final setup summary report"""
        print("\n" + "=" * 60)
        print("📊 PROJECT STRUCTURE SETUP COMPLETE!")
        print("=" * 60)
        print(f"📁 Base Directory: {self.BaseDirectory.absolute()}")
        print(f"📅 Created: {self.CurrentDate}")
        print()
        
        print("📈 STATISTICS:")
        print(f"   📂 Directories Created: {len(self.CreatedDirectories)}")
        print(f"   📄 Files Created: {len(self.CreatedFiles)}")
        print()
        
        print("🏗️ DIRECTORY STRUCTURE:")
        for Directory in sorted(self.CreatedDirectories):
            RelativePath = Directory.relative_to(self.BaseDirectory)
            print(f"   📂 {RelativePath}")
        print()
        
        print("📄 FILES CREATED:")
        for File in sorted(self.CreatedFiles):
            RelativePath = File.relative_to(self.BaseDirectory)
            print(f"   📄 {RelativePath}")
        print()
        
        print("🚀 NEXT STEPS:")
        print("1. Copy your existing CustomWindow.py to Source/Interface/")
        print("2. Copy your database file to Data/Databases/")
        print("3. Install dependencies: pip install -r requirements.txt")
        print("4. Copy the 6 modular components to their proper locations")
        print("5. Run: python AndersonLibrary.py")
        print()
        print("✅ PROJECT STRUCTURE READY FOR MIGRATION!")
        print("=" * 60)
    
    # =================================================================
    # HELPER METHODS
    # =================================================================
    
    def _CreateDirectory(self, DirectoryPath: Path) -> None:
        """Create directory if it doesn't exist"""
        try:
            DirectoryPath.mkdir(parents=True, exist_ok=True)
            self.CreatedDirectories.append(DirectoryPath)
            print(f"   📂 {DirectoryPath.relative_to(self.BaseDirectory)}")
        except Exception as Error:
            print(f"   ❌ Failed to create {DirectoryPath}: {Error}")
    
    def _CreateInitFile(self, FilePath: Path, Title: str, Description: str, PackagePath: str) -> None:
        """Create __init__.py file with proper header"""
        Content = f'''# File: __init__.py
# Path: {PackagePath}/__init__.py
# Standard: AIDEV-PascalCase-1.8
# Created: {self.CurrentDate}
# Last Modified: {self.CurrentDateTime}
"""
Description: {Title}
{Description}

Purpose: Package initialization for {PackagePath} module. Provides clean
import interfaces and package-level configuration.
"""

# Package version and metadata
__version__ = "2.0.0"
__author__ = "Herb Bowers - Project Himalaya"
__email__ = "HimalayaProject1@gmail.com"

# Package-level imports can be added here as needed
# Example:
# from .module_name import ClassName

__all__ = [
    # Add public interface exports here
]
'''
        
        self._WriteFile(FilePath, Content)
    
    def _WriteFile(self, FilePath: Path, Content: str) -> None:
        """Write content to file"""
        try:
            with open(FilePath, 'w', encoding='utf-8') as File:
                File.write(Content)
            self.CreatedFiles.append(FilePath)
            print(f"   📄 {FilePath.relative_to(self.BaseDirectory)}")
        except Exception as Error:
            print(f"   ❌ Failed to create {FilePath}: {Error}")
    
    def BuildCompleteStructure(self) -> None:
        """Build the complete project structure"""
        try:
            self.CreateDirectoryStructure()
            self.CreateInitFiles()
            self.CreateEntryPoint()
            self.CreateRequirementsFile()
            self.CreateGitignore()
            self.CreateReadme()
            self.GenerateSummaryReport()
            
        except Exception as Error:
            print(f"❌ Error building project structure: {Error}")
            raise


def Main() -> int:
    """Main execution function"""
    try:
        print("🏔️ ANDERSON'S LIBRARY - PROJECT STRUCTURE BUILDER")
        print("Standard: AIDEV-PascalCase-1.8")
        print("Building professional modular architecture...")
        print()
        
        # Get base directory from command line or use current
        BaseDir = sys.argv[1] if len(sys.argv) > 1 else "."
        
        # Create project structure
        Builder = ProjectStructureBuilder(BaseDir)
        Builder.BuildCompleteStructure()
        
        return 0
        
    except KeyboardInterrupt:
        print("\n⚠️ Setup interrupted by user")
        return 1
        
    except Exception as Error:
        print(f"\n❌ Setup failed: {Error}")
        return 1


if __name__ == "__main__":
    ExitCode = Main()
    sys.exit(ExitCode)

================
File: AndersonLibrary.py
================
#!/usr/bin/env python3
# File: AndersonLibrary.py
# Path: AndersonLibrary.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  04:12PM
"""
Description: Anderson's Library - Professional Edition Entry Point
Main entry point for the modular Anderson's Library application.
Replaces the old Andy.py and RunAnderson.py scripts.
"""

import sys
import os
import logging
from pathlib import Path

def ValidateEnvironment():
    """
    Validate that all required files and dependencies are present.
    Returns (IsValid, ErrorMessages)
    """
    Errors = []
    
    print("🏔️ Anderson's Library - Professional Edition")
    print("=" * 50)
    print("📚 Digital Library Management System")
    print("🎯 Project Himalaya - BowersWorld.com")
    print("⚡ Modular Architecture - Design Standard v1.8")
    print("=" * 50)
    
    # Check for required files
    RequiredFiles = [
        "Source/Data/DatabaseModels.py",
        "Source/Core/DatabaseManager.py",
        "Source/Core/BookService.py",
        "Source/Interface/FilterPanel.py",
        "Source/Interface/BookGrid.py",
        "Source/Interface/MainWindow.py",
        "Source/Interface/CustomWindow.py"
    ]
    
    print("📁 Checking file structure...")
    MissingFiles = []
    for FilePath in RequiredFiles:
        if os.path.exists(FilePath):
            print(f"   ✅ {FilePath}")
        else:
            print(f"   ❌ {FilePath}")
            MissingFiles.append(FilePath)
    
    if MissingFiles:
        Errors.append(f"Missing files: {', '.join(MissingFiles)}")
    
    print(f"📊 Files: {len(RequiredFiles) - len(MissingFiles)} present, {len(MissingFiles)} missing")
    
    if MissingFiles:
        print("📋 Missing files:")
        for File in MissingFiles:
            print(f"   📄 {File}")
        
        if "Source/Interface/CustomWindow.py" in MissingFiles:
            print("💡 Don't forget to copy your existing CustomWindow.py!")
    
    # Check for database
    DatabasePaths = [
        "Assets/my_library.db",
        "Data/my_library.db", 
        "Data/Databases/my_library.db",
        "my_library.db"
    ]
    
    print("🗄️  Testing database connection...")
    DatabaseFound = False
    for DbPath in DatabasePaths:
        if os.path.exists(DbPath):
            print(f"   ✅ Found database: {DbPath}")
            DatabaseFound = True
            break
    
    if not DatabaseFound:
        print("   ❌ No database file found")
        Errors.append("Database file not found")
    
    # Check Python dependencies
    print("🐍 Testing Python imports...")
    try:
        import PySide6
        print("   ✅ PySide6 available")
    except ImportError:
        print("   ❌ PySide6 not installed")
        Errors.append("PySide6 not installed - run: pip install PySide6")
    
    print("=" * 50)
    
    if Errors:
        print("❌ VALIDATION ISSUES FOUND")
        print("📝 Please resolve the issues above before running the application")
        for Error in Errors:
            print(f"   • {Error}")
        print("=" * 50)
        return False, Errors
    else:
        print("✅ ENVIRONMENT VALIDATION PASSED")
        print("🚀 Starting Anderson's Library...")
        print("=" * 50)
        return True, []

def SetupPythonPath():
    """Add current directory to Python path for imports"""
    CurrentDir = os.path.dirname(os.path.abspath(__file__))
    if CurrentDir not in sys.path:
        sys.path.insert(0, CurrentDir)

def Main():
    """Main entry point"""
    try:
        # Validate environment first
        IsValid, Errors = ValidateEnvironment()
        if not IsValid:
            print("\n💡 Run TestImports.py to diagnose issues")
            return 1
        
        # Setup Python path
        SetupPythonPath()
        
        # Import and run the application
        from Source.Interface.MainWindow import RunApplication
        return RunApplication()
        
    except ImportError as Error:
        print(f"❌ Import Error: {Error}")
        print("💡 Make sure all required files are in place")
        print("💡 Run TestImports.py to diagnose import issues")
        return 1
        
    except Exception as Error:
        print(f"❌ Startup Error: {Error}")
        logging.error(f"Application startup failed: {Error}")
        return 1

if __name__ == "__main__":
    sys.exit(Main())
================
File: Archive/AndersonLibrary_2025-07-04_16-38-40.py
================
#!/usr/bin/env python3
# File: AndersonLibrary.py
# Path: AndersonLibrary.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  14:09PM
"""
Description: Anderson's Library - Professional Edition
Main entry point for the modular Anderson's Library application.
Provides clean startup and error handling for the complete application.

Purpose: Serves as the primary executable for Anderson's Library,
coordinating application startup and initialization.
"""

import sys
import os
import logging
from pathlib import Path

# Add Source directory to Python path for imports
SourcePath = Path(__file__).parent / "Source"
sys.path.insert(0, str(SourcePath))

try:
    from Interface.MainWindow import RunApplication
except ImportError as Error:
    print(f"❌ Import Error: {Error}")
    print("📁 Make sure the Source directory structure is complete")
    print("🔧 Run SetupProjectStructure.py to create the proper structure")
    sys.exit(1)


def Main() -> int:
    """
    Main application entry point with error handling.
    
    Returns:
        Application exit code (0 for success, 1 for error)
    """
    try:
        print("🏔️ Starting Anderson's Library - Professional Edition")
        print("📚 Project Himalaya - BowersWorld.com")
        print("=" * 50)
        
        # Configure logging
        logging.basicConfig(
            level=logging.INFO,
            format='[%(asctime)s] %(name)s - %(levelname)s: %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler('anderson_library.log', mode='a')
            ]
        )
        
        # Run the application
        ExitCode = RunApplication()
        
        print("👋 Anderson's Library closed successfully")
        return ExitCode
        
    except KeyboardInterrupt:
        print("\n⚠️ Application interrupted by user")
        return 0
        
    except Exception as Error:
        print(f"❌ Critical Error: {Error}")
        logging.exception("Critical application error")
        return 1


if __name__ == "__main__":
    sys.exit(Main())

================
File: Archive/Data/DatabaseModels_2025-07-04_16-38-40.py
================
# File: DatabaseModels.py
# Path: Source/Data/DatabaseModels.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  14:30PM
"""
Description: Anderson's Library Database Models
Core data models for books, categories, and subjects with validation and conversion methods.
Follows single responsibility principle with focused data representation.

Purpose: Provides clean data model classes that encapsulate database entities
and their business rules. Used by all other modules for consistent data handling.
"""

from dataclasses import dataclass
from typing import Optional, List, Dict, Any
from pathlib import Path
import os
import re
from datetime import datetime


@dataclass
class Category:
    """
    Represents a book category in Anderson's Library.
    Maps to categories table in database.
    """
    CategoryId: Optional[int] = None
    CategoryName: str = ""
    
    def __post_init__(self):
        """Validate and normalize category data after initialization"""
        self.CategoryName = self.NormalizeText(self.CategoryName)
    
    @staticmethod
    def NormalizeText(Text: str) -> str:
        """Normalize text for consistent display and comparison"""
        if not Text:
            return ""
        return str(Text).strip().replace('  ', ' ')
    
    def IsValid(self) -> bool:
        """Check if category has valid data"""
        return bool(self.CategoryName and len(self.CategoryName.strip()) > 0)
    
    def ToDictionary(self) -> Dict[str, Any]:
        """Convert category to dictionary for serialization"""
        return {
            'CategoryId': self.CategoryId,
            'CategoryName': self.CategoryName
        }
    
    @classmethod
    def FromDictionary(cls, Data: Dict[str, Any]) -> 'Category':
        """Create category from dictionary data"""
        return cls(
            CategoryId=Data.get('CategoryId'),
            CategoryName=Data.get('CategoryName', '')
        )
    
    def __str__(self) -> str:
        """String representation for display"""
        return self.CategoryName
    
    def __eq__(self, Other) -> bool:
        """Equality comparison based on normalized name"""
        if not isinstance(Other, Category):
            return False
        return self.CategoryName.lower() == Other.CategoryName.lower()
    
    def __hash__(self) -> int:
        """Hash for use in sets and dictionaries"""
        return hash(self.CategoryName.lower())


@dataclass
class Subject:
    """
    Represents a book subject within a category.
    Maps to subjects table in database.
    """
    SubjectId: Optional[int] = None
    CategoryId: Optional[int] = None
    SubjectName: str = ""
    CategoryName: str = ""  # For display purposes
    
    def __post_init__(self):
        """Validate and normalize subject data after initialization"""
        self.SubjectName = self.NormalizeText(self.SubjectName)
        self.CategoryName = self.NormalizeText(self.CategoryName)
    
    @staticmethod
    def NormalizeText(Text: str) -> str:
        """Normalize text for consistent display and comparison"""
        if not Text:
            return ""
        return str(Text).strip().replace('  ', ' ')
    
    def IsValid(self) -> bool:
        """Check if subject has valid data"""
        return bool(self.SubjectName and len(self.SubjectName.strip()) > 0)
    
    def HasCategory(self) -> bool:
        """Check if subject is associated with a category"""
        return self.CategoryId is not None and self.CategoryId > 0
    
    def ToDictionary(self) -> Dict[str, Any]:
        """Convert subject to dictionary for serialization"""
        return {
            'SubjectId': self.SubjectId,
            'CategoryId': self.CategoryId,
            'SubjectName': self.SubjectName,
            'CategoryName': self.CategoryName
        }
    
    @classmethod
    def FromDictionary(cls, Data: Dict[str, Any]) -> 'Subject':
        """Create subject from dictionary data"""
        return cls(
            SubjectId=Data.get('SubjectId'),
            CategoryId=Data.get('CategoryId'),
            SubjectName=Data.get('SubjectName', ''),
            CategoryName=Data.get('CategoryName', '')
        )
    
    def GetFullName(self) -> str:
        """Get subject name with category for display"""
        if self.CategoryName:
            return f"{self.CategoryName} → {self.SubjectName}"
        return self.SubjectName
    
    def __str__(self) -> str:
        """String representation for display"""
        return self.SubjectName
    
    def __eq__(self, Other) -> bool:
        """Equality comparison based on normalized name and category"""
        if not isinstance(Other, Subject):
            return False
        return (self.SubjectName.lower() == Other.SubjectName.lower() and 
                self.CategoryId == Other.CategoryId)
    
    def __hash__(self) -> int:
        """Hash for use in sets and dictionaries"""
        return hash((self.SubjectName.lower(), self.CategoryId))


@dataclass
class Book:
    """
    Represents a book in Anderson's Library with all metadata.
    Maps to books table in database plus file system information.
    """
    BookId: Optional[int] = None
    Title: str = ""
    CategoryId: Optional[int] = None
    SubjectId: Optional[int] = None
    FileName: str = ""
    FilePath: str = ""
    
    # Display names for UI
    CategoryName: str = ""
    SubjectName: str = ""
    
    # File system information
    FileSize: Optional[int] = None
    FileSizeMB: Optional[float] = None
    LastModified: Optional[datetime] = None
    CoverImagePath: str = ""
    HasCover: bool = False
    
    def __post_init__(self):
        """Validate and normalize book data after initialization"""
        self.Title = self.NormalizeText(self.Title)
        self.FileName = self.NormalizeText(self.FileName)
        self.CategoryName = self.NormalizeText(self.CategoryName)
        self.SubjectName = self.NormalizeText(self.SubjectName)
        
        # Auto-calculate cover image path if not provided
        if not self.CoverImagePath and self.FileName:
            self.CoverImagePath = self.GetCoverImagePath()
            self.HasCover = self.CheckCoverExists()
        
        # Auto-calculate file size in MB if file size is available
        if self.FileSize and not self.FileSizeMB:
            self.FileSizeMB = self.FileSize / (1024 * 1024)
    
    @staticmethod
    def NormalizeText(Text: str) -> str:
        """Normalize text for consistent display and comparison"""
        if not Text:
            return ""
        return str(Text).strip().replace('  ', ' ')
    
    def IsValid(self) -> bool:
        """Check if book has minimum required data"""
        return bool(self.Title and self.FileName)
    
    def HasCategory(self) -> bool:
        """Check if book is assigned to a category"""
        return self.CategoryId is not None and self.CategoryId > 0
    
    def HasSubject(self) -> bool:
        """Check if book is assigned to a subject"""
        return self.SubjectId is not None and self.SubjectId > 0
    
    def GetDisplayTitle(self) -> str:
        """Get title for display, falling back to filename if no title"""
        if self.Title:
            return self.Title
        elif self.FileName:
            return Path(self.FileName).stem  # Remove .pdf extension
        return "Unknown Title"
    
    def GetCoverImagePath(self) -> str:
        """Generate expected cover image path based on filename"""
        if not self.FileName:
            return ""
        
        BaseName = Path(self.FileName).stem
        return f"Anderson eBooks/Covers/{BaseName}.png"
    
    def CheckCoverExists(self) -> bool:
        """Check if cover image file actually exists"""
        if not self.CoverImagePath:
            return False
        return os.path.exists(self.CoverImagePath)
    
    def GetFileSizeDisplay(self) -> str:
        """Get human-readable file size"""
        if self.FileSizeMB:
            if self.FileSizeMB < 1:
                return f"{self.FileSizeMB * 1024:.0f} KB"
            else:
                return f"{self.FileSizeMB:.1f} MB"
        return "Unknown size"
    
    def GetFullPath(self) -> str:
        """Get complete file path for opening"""
        if self.FilePath:
            return self.FilePath
        elif self.FileName:
            return f"Anderson eBooks/{self.FileName}"
        return ""
    
    def FileExists(self) -> bool:
        """Check if the PDF file actually exists"""
        FullPath = self.GetFullPath()
        return bool(FullPath and os.path.exists(FullPath))
    
    def GetCategorySubjectDisplay(self) -> str:
        """Get category and subject for display"""
        if self.CategoryName and self.SubjectName:
            return f"{self.CategoryName} → {self.SubjectName}"
        elif self.CategoryName:
            return self.CategoryName
        elif self.SubjectName:
            return self.SubjectName
        return "Uncategorized"
    
    def ToDictionary(self) -> Dict[str, Any]:
        """Convert book to dictionary for serialization"""
        return {
            'BookId': self.BookId,
            'Title': self.Title,
            'CategoryId': self.CategoryId,
            'SubjectId': self.SubjectId,
            'FileName': self.FileName,
            'FilePath': self.FilePath,
            'CategoryName': self.CategoryName,
            'SubjectName': self.SubjectName,
            'FileSize': self.FileSize,
            'FileSizeMB': self.FileSizeMB,
            'LastModified': self.LastModified.isoformat() if self.LastModified else None,
            'CoverImagePath': self.CoverImagePath,
            'HasCover': self.HasCover
        }
    
    @classmethod
    def FromDictionary(cls, Data: Dict[str, Any]) -> 'Book':
        """Create book from dictionary data"""
        LastModified = None
        if Data.get('LastModified'):
            try:
                LastModified = datetime.fromisoformat(Data['LastModified'])
            except (ValueError, TypeError):
                pass
        
        return cls(
            BookId=Data.get('BookId'),
            Title=Data.get('Title', ''),
            CategoryId=Data.get('CategoryId'),
            SubjectId=Data.get('SubjectId'),
            FileName=Data.get('FileName', ''),
            FilePath=Data.get('FilePath', ''),
            CategoryName=Data.get('CategoryName', ''),
            SubjectName=Data.get('SubjectName', ''),
            FileSize=Data.get('FileSize'),
            FileSizeMB=Data.get('FileSizeMB'),
            LastModified=LastModified,
            CoverImagePath=Data.get('CoverImagePath', ''),
            HasCover=Data.get('HasCover', False)
        )
    
    def __str__(self) -> str:
        """String representation for display"""
        return self.GetDisplayTitle()
    
    def __eq__(self, Other) -> bool:
        """Equality comparison based on filename (unique identifier)"""
        if not isinstance(Other, Book):
            return False
        return self.FileName.lower() == Other.FileName.lower()
    
    def __hash__(self) -> int:
        """Hash for use in sets and dictionaries"""
        return hash(self.FileName.lower())


class ModelValidator:
    """
    Utility class for validating model data and business rules.
    Provides centralized validation logic for all models.
    """
    
    @staticmethod
    def ValidateCategory(CategoryData: Dict[str, Any]) -> List[str]:
        """Validate category data and return list of error messages"""
        Errors = []
        
        CategoryName = CategoryData.get('CategoryName', '').strip()
        if not CategoryName:
            Errors.append("Category name is required")
        elif len(CategoryName) > 100:
            Errors.append("Category name must be 100 characters or less")
        
        return Errors
    
    @staticmethod
    def ValidateSubject(SubjectData: Dict[str, Any]) -> List[str]:
        """Validate subject data and return list of error messages"""
        Errors = []
        
        SubjectName = SubjectData.get('SubjectName', '').strip()
        if not SubjectName:
            Errors.append("Subject name is required")
        elif len(SubjectName) > 100:
            Errors.append("Subject name must be 100 characters or less")
        
        CategoryId = SubjectData.get('CategoryId')
        if CategoryId is not None and (not isinstance(CategoryId, int) or CategoryId < 1):
            Errors.append("Category ID must be a positive integer")
        
        return Errors
    
    @staticmethod
    def ValidateBook(BookData: Dict[str, Any]) -> List[str]:
        """Validate book data and return list of error messages"""
        Errors = []
        
        Title = BookData.get('Title', '').strip()
        FileName = BookData.get('FileName', '').strip()
        
        if not Title and not FileName:
            Errors.append("Either title or filename is required")
        
        if FileName:
            if not FileName.lower().endswith('.pdf'):
                Errors.append("Filename must have .pdf extension")
            elif len(FileName) > 255:
                Errors.append("Filename must be 255 characters or less")
        
        if Title and len(Title) > 500:
            Errors.append("Title must be 500 characters or less")
        
        for IdField in ['CategoryId', 'SubjectId']:
            IdValue = BookData.get(IdField)
            if IdValue is not None and (not isinstance(IdValue, int) or IdValue < 1):
                Errors.append(f"{IdField} must be a positive integer")
        
        return Errors


# Module-level utility functions for common operations
def CreateCategoryFromRow(DatabaseRow: tuple) -> Category:
    """Create Category object from database row tuple"""
    if len(DatabaseRow) >= 2:
        return Category(CategoryId=DatabaseRow[0], CategoryName=DatabaseRow[1])
    return Category()


def CreateSubjectFromRow(DatabaseRow: tuple) -> Subject:
    """Create Subject object from database row tuple"""
    if len(DatabaseRow) >= 3:
        return Subject(
            SubjectId=DatabaseRow[0],
            CategoryId=DatabaseRow[1],
            SubjectName=DatabaseRow[2]
        )
    return Subject()


def CreateBookFromRow(DatabaseRow: tuple) -> Book:
    """Create Book object from database row tuple"""
    if len(DatabaseRow) >= 4:
        return Book(
            BookId=DatabaseRow[0],
            Title=DatabaseRow[1],
            CategoryId=DatabaseRow[2],
            SubjectId=DatabaseRow[3]
        )
    return Book()

================
File: Archive/Interface/BookGrid_2025-07-04_16-38-40.py
================
# File: BookGrid.py
# Path: Source/Interface/BookGrid.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  15:30PM
"""
Description: Anderson's Library Book Grid Component
Main book display area with responsive grid layout and hover effects.
Provides scalable book browsing interface with dynamic column calculation.

Purpose: Manages the visual presentation of books in a responsive grid format,
handling layout calculations, hover effects, and book selection events.
"""

import os
import logging
from typing import List, Optional, Callable
from pathlib import Path
from PySide6.QtWidgets import (
    QWidget, QScrollArea, QGridLayout, QLabel, QHBoxLayout, QVBoxLayout,
    QSizePolicy, QSpacerItem, QMessageBox
)
from PySide6.QtCore import Qt, QTimer, QEvent
from PySide6.QtGui import QPixmap, QFont, QPen, QPainter

from ..Core.BookService import BookService
from ..Data.DatabaseModels import Book


class HoverHighlightWidget(QWidget):
    """
    Widget that highlights on hover and handles book selection clicks.
    Provides visual feedback and click handling for individual books.
    """
    
    def __init__(self, MainWindow, BookTitle: str, *args, **kwargs):
        """
        Initialize hover widget for a book.
        
        Args:
            MainWindow: Reference to main application window
            BookTitle: Title of the book this widget represents
        """
        super().__init__(*args, **kwargs)
        
        self.MainWindow = MainWindow
        self.BookTitle = BookTitle
        self.IsHovered = False
        
        # Enable mouse tracking for hover effects
        self.setMouseTracking(True)
    
    def enterEvent(self, Event) -> None:
        """Handle mouse enter for hover highlight"""
        self.IsHovered = True
        self.update()
    
    def leaveEvent(self, Event) -> None:
        """Handle mouse leave to remove highlight"""
        self.IsHovered = False
        self.update()
    
    def mousePressEvent(self, Event) -> None:
        """Handle mouse click to select/open book"""
        if Event.button() == Qt.LeftButton and hasattr(self.MainWindow, 'OpenBook'):
            self.MainWindow.OpenBook(self.BookTitle)
    
    def paintEvent(self, Event) -> None:
        """Custom paint to show hover highlight"""
        super().paintEvent(Event)
        
        if self.IsHovered:
            Painter = QPainter(self)
            Painter.setPen(QPen(Qt.red, 8))
            Painter.drawRect(self.rect())


class BookCard(QWidget):
    """
    Individual book card widget displaying cover image and title.
    Encapsulates the visual representation of a single book.
    """
    
    def __init__(self, BookData: Book, MainWindow, Parent=None):
        """
        Initialize book card with book data.
        
        Args:
            BookData: Book object with metadata
            MainWindow: Reference to main application window
            Parent: Parent widget
        """
        super().__init__(Parent)
        
        self.BookData = BookData
        self.MainWindow = MainWindow
        self.Logger = logging.getLogger(__name__)
        
        self._SetupCard()
    
    def _SetupCard(self) -> None:
        """Create and layout card components"""
        # Create hover-enabled container
        self.HoverWidget = HoverHighlightWidget(self.MainWindow, self.BookData.Title)
        
        # Main layout for the card
        CardLayout = QVBoxLayout(self)
        CardLayout.setContentsMargins(0, 0, 0, 0)
        CardLayout.addWidget(self.HoverWidget)
        
        # Content layout inside hover widget
        ContentLayout = QHBoxLayout(self.HoverWidget)
        ContentLayout.setContentsMargins(3, 3, 5, 5)
        
        # Create image label
        self.ImageLabel = self._CreateImageLabel()
        ContentLayout.addWidget(self.ImageLabel)
        
        # Create description label
        self.DescriptionLabel = self._CreateDescriptionLabel()
        ContentLayout.addWidget(self.DescriptionLabel)
    
    def _CreateImageLabel(self) -> QLabel:
        """
        Create image label with book cover or placeholder.
        
        Returns:
            QLabel with book cover image
        """
        ImageLabel = QLabel()
        
        # Try to load cover image
        CoverPath = self.BookData.GetCoverImagePath()
        Pixmap = QPixmap(CoverPath)
        
        if Pixmap.isNull():
            # Fallback: try different path or show error text
            AlternatePath = os.path.join("Covers", f"{Path(self.BookData.FileName).stem}.png")
            Pixmap = QPixmap(AlternatePath)
            
            if Pixmap.isNull():
                ImageLabel.setText("No Cover")
                ImageLabel.setStyleSheet("background-color: #f0f0f0; border: 1px solid #ccc;")
                ImageLabel.setAlignment(Qt.AlignCenter)
            else:
                # Scale the image to appropriate size
                ScaledPixmap = Pixmap.scaled(105, 135, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                ImageLabel.setPixmap(ScaledPixmap)
        else:
            # Scale the image to appropriate size (60% of original 175x225)
            ScaledPixmap = Pixmap.scaled(105, 135, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            ImageLabel.setPixmap(ScaledPixmap)
        
        return ImageLabel
    
    def _CreateDescriptionLabel(self) -> QLabel:
        """
        Create description label with book title and metadata.
        
        Returns:
            QLabel with book information
        """
        DescriptionLabel = QLabel()
        
        # Set font
        Font = QFont("Arial", 11)
        DescriptionLabel.setFont(Font)
        
        # Create description text
        DisplayText = self._FormatBookDescription()
        DescriptionLabel.setText(DisplayText)
        
        # Configure label properties
        DescriptionLabel.setWordWrap(True)
        DescriptionLabel.setFixedSize(105, 135)  # Match image size
        DescriptionLabel.setAlignment(Qt.AlignTop | Qt.AlignLeft)
        
        return DescriptionLabel
    
    def _FormatBookDescription(self) -> str:
        """
        Format book information for display.
        
        Returns:
            Formatted description string
        """
        Lines = []
        
        # Book title (primary)
        Title = self.BookData.GetDisplayTitle()
        if len(Title) > 50:
            Title = Title[:47] + "..."
        Lines.append(f"<b>{Title}</b>")
        
        # Category and subject information
        if self.BookData.CategoryName or self.BookData.SubjectName:
            CategoryInfo = self.BookData.GetCategorySubjectDisplay()
            if len(CategoryInfo) > 40:
                CategoryInfo = CategoryInfo[:37] + "..."
            Lines.append(f"<i>{CategoryInfo}</i>")
        
        # File information
        if self.BookData.FileSizeMB:
            FileSizeText = self.BookData.GetFileSizeDisplay()
            Lines.append(f"Size: {FileSizeText}")
        
        # File status
        if not self.BookData.FileExists():
            Lines.append("<span style='color: red;'>⚠ File Missing</span>")
        
        return "<br>".join(Lines)


class BookGrid(QScrollArea):
    """
    Scrollable grid container for displaying books with responsive layout.
    Manages grid column calculation and book card positioning.
    """
    
    def __init__(self, BookServiceInstance: BookService, Parent=None):
        """
        Initialize book grid with book service dependency.
        
        Args:
            BookServiceInstance: BookService for data operations
            Parent: Parent widget
        """
        super().__init__(Parent)
        
        self.BookService = BookServiceInstance
        self.Logger = logging.getLogger(__name__)
        
        # Grid layout parameters (matching original design)
        self.BaseWidth = 315      # Base width before grid starts
        self.ItemWidth = 230      # Width per grid item
        self.CurrentColumns = 0   # Current number of columns
        self.PreviousColumns = 0  # Previous column count for change detection
        
        # Current book data
        self.CurrentBooks: List[Book] = []
        
        # Layout components
        self.ScrollWidget: Optional[QWidget] = None
        self.GridLayout: Optional[QGridLayout] = None
        
        # Update timer for responsive layout
        self.ResizeTimer = QTimer()
        self.ResizeTimer.setSingleShot(True)
        self.ResizeTimer.timeout.connect(self._UpdateLayoutIfNeeded)
        
        # Event callbacks
        self.OnBookOpened: Optional[Callable[[str], None]] = None
        
        self._SetupScrollArea()
        self._SetupGridLayout()
        
        self.Logger.info("BookGrid initialized successfully")
    
    def _SetupScrollArea(self) -> None:
        """Configure scroll area properties"""
        # Create scroll widget
        self.ScrollWidget = QWidget()
        self.setWidget(self.ScrollWidget)
        self.setWidgetResizable(True)
        
        # Configure scroll area
        self.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        
        # Enable mouse tracking
        self.setMouseTracking(True)
    
    def _SetupGridLayout(self) -> None:
        """Create and configure grid layout"""
        self.GridLayout = QGridLayout(self.ScrollWidget)
        self.GridLayout.setContentsMargins(0, 0, 0, 0)
        self.GridLayout.setSpacing(10)  # Add some spacing between cards
    
    def UpdateBooks(self, Books: List[Book]) -> None:
        """
        Update grid with new book list.
        
        Args:
            Books: List of books to display
        """
        self.CurrentBooks = Books
        self._RebuildGrid()
        
        self.Logger.info(f"BookGrid updated with {len(Books)} books")
    
    def _RebuildGrid(self) -> None:
        """Clear and rebuild the entire grid layout"""
        if not self.GridLayout:
            return
        
        # Clear existing widgets
        self._ClearGrid()
        
        # Calculate current column count
        self._UpdateColumnCount()
        
        # Add book cards to grid
        for Index, BookData in enumerate(self.CurrentBooks):
            BookCard = self._CreateBookCard(BookData)
            
            if self.CurrentColumns > 0:
                Row = Index // self.CurrentColumns
                Column = Index % self.CurrentColumns
                self.GridLayout.addWidget(BookCard, Row, Column)
        
        # Add spacers to push content to top-left
        self._AddGridSpacers()
    
    def _CreateBookCard(self, BookData: Book) -> BookCard:
        """
        Create book card widget for grid.
        
        Args:
            BookData: Book data for the card
            
        Returns:
            BookCard widget
        """
        # Create main window reference (placeholder - will be set by parent)
        MainWindowRef = self.parent()
        while MainWindowRef and not hasattr(MainWindowRef, 'OpenBook'):
            MainWindowRef = MainWindowRef.parent()
        
        BookCardWidget = BookCard(BookData, MainWindowRef)
        return BookCardWidget
    
    def _ClearGrid(self) -> None:
        """Remove all widgets from grid layout"""
        if not self.GridLayout:
            return
        
        while self.GridLayout.count():
            Child = self.GridLayout.takeAt(0)
            if Child.widget():
                Child.widget().setParent(None)
    
    def _AddGridSpacers(self) -> None:
        """Add spacer items to push content to top-left"""
        if not self.GridLayout or not self.CurrentBooks or self.CurrentColumns <= 0:
            return
        
        LastIndex = len(self.CurrentBooks) - 1
        LastRow = LastIndex // self.CurrentColumns
        LastColumn = LastIndex % self.CurrentColumns
        
        # Add horizontal spacer
        HorizontalSpacer = QSpacerItem(0, 0, QSizePolicy.Expanding, QSizePolicy.Minimum)
        self.GridLayout.addItem(HorizontalSpacer, LastRow, LastColumn + 1)
        
        # Add vertical spacer
        VerticalSpacer = QSpacerItem(0, 0, QSizePolicy.Minimum, QSizePolicy.Expanding)
        self.GridLayout.addItem(VerticalSpacer, LastRow + 1, LastColumn)
    
    def _UpdateColumnCount(self) -> None:
        """Calculate number of columns based on current width"""
        AvailableWidth = self.width()
        self.PreviousColumns = self.CurrentColumns
        self.CurrentColumns = max(1, (AvailableWidth - self.BaseWidth) // self.ItemWidth)
        
        # Emit status update if parent supports it
        self._UpdateStatusMessage()
    
    def _UpdateLayoutIfNeeded(self) -> None:
        """Update layout only if column count changed"""
        if self.PreviousColumns != self.CurrentColumns:
            self._RebuildGrid()
    
    def _UpdateStatusMessage(self) -> None:
        """Update status bar with grid information"""
        # Try to find status bar in parent hierarchy
        StatusBar = None
        Parent = self.parent()
        
        while Parent:
            if hasattr(Parent, 'statusBar'):
                StatusBar = Parent.statusBar()
                break
            elif hasattr(Parent, 'get_status_bar'):
                StatusBar = Parent.get_status_bar()
                break
            Parent = Parent.parent()
        
        if StatusBar:
            Width = self.width()
            Height = self.height()
            Message = f"{Width} x {Height}  C:{self.CurrentColumns}"
            StatusBar.showMessage(Message)
    
    # =================================================================
    # EVENT HANDLING
    # =================================================================
    
    def resizeEvent(self, Event) -> None:
        """Handle resize events with debounced layout updates"""
        super().resizeEvent(Event)
        
        # Update column count
        self._UpdateColumnCount()
        
        # Start/restart timer for debounced layout update
        self.ResizeTimer.start(100)  # 100ms delay
        
        # Update status immediately
        self._UpdateStatusMessage()
    
    def OpenBook(self, BookTitle: str) -> None:
        """
        Handle book opening request from card widgets.
        
        Args:
            BookTitle: Title of book to open
        """
        try:
            Success = self.BookService.OpenBook(BookTitle)
            
            if not Success:
                # Show error message
                QMessageBox.warning(
                    self,
                    "Book Not Found",
                    f"Could not open book: {BookTitle}\n\nThe PDF file may be missing or moved."
                )
            else:
                # Notify external handlers
                if self.OnBookOpened:
                    self.OnBookOpened(BookTitle)
                    
        except Exception as Error:
            self.Logger.error(f"Failed to open book '{BookTitle}': {Error}")
            QMessageBox.critical(
                self,
                "Error Opening Book", 
                f"An error occurred while opening the book:\n\n{Error}"
            )
    
    # =================================================================
    # PUBLIC INTERFACE
    # =================================================================
    
    def SetEventHandlers(self, OnBookOpened: Optional[Callable[[str], None]] = None) -> None:
        """
        Set event handlers for external communication.
        
        Args:
            OnBookOpened: Called when a book is successfully opened
        """
        if OnBookOpened:
            self.OnBookOpened = OnBookOpened
    
    def RefreshLayout(self) -> None:
        """Force refresh of grid layout"""
        self._UpdateColumnCount()
        self._RebuildGrid()
    
    def GetCurrentBooks(self) -> List[Book]:
        """
        Get currently displayed books.
        
        Returns:
            List of books currently shown in grid
        """
        return self.CurrentBooks.copy()
    
    def GetGridStatistics(self) -> dict:
        """
        Get grid layout statistics.
        
        Returns:
            Dictionary with grid metrics
        """
        return {
            'BookCount': len(self.CurrentBooks),
            'Columns': self.CurrentColumns,
            'Rows': (len(self.CurrentBooks) + self.CurrentColumns - 1) // self.CurrentColumns if self.CurrentColumns > 0 else 0,
            'GridWidth': self.width(),
            'GridHeight': self.height(),
            'ItemWidth': self.ItemWidth,
            'BaseWidth': self.BaseWidth
        }

================
File: Archive/Interface/FilterPanel_2025-07-04_16-38-40.py
================
# File: FilterPanel.py
# Path: Source/Interface/FilterPanel.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  15:15PM
"""
Description: Anderson's Library Filter Panel Component
Left sidebar component with category/subject dropdowns and search functionality.
Provides clean separation between filtering UI and main book display.

Purpose: Encapsulates all filtering controls and their behavior, communicating
with BookService for data and main window for book selection events.
"""

from typing import Optional, Callable, List
import logging
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QComboBox, QLineEdit, QListView, QLabel
)
from PySide6.QtCore import Qt, QEvent, QStringListModel, QTimer
from PySide6.QtGui import QFont

from ..Core.BookService import BookService
from ..Data.DatabaseModels import Book


class ToolTipListView(QListView):
    """
    Enhanced QListView with tooltip support for long text items.
    Provides better user experience for dropdown menus with long names.
    """
    
    def __init__(self, Parent=None):
        """Initialize tooltip-enabled list view"""
        super().__init__(Parent)
        self.setMouseTracking(True)
    
    def viewportEvent(self, Event):
        """Handle viewport events to show tooltips for items"""
        if Event.type() == QEvent.ToolTip:
            Index = self.indexAt(Event.pos())
            if Index.isValid():
                from PySide6.QtWidgets import QToolTip
                QToolTip.showText(Event.globalPos(), Index.data(), self)
            else:
                from PySide6.QtWidgets import QToolTip
                QToolTip.hideText()
                Event.ignore()
            return True
        return super().viewportEvent(Event)


class FilterPanel(QWidget):
    """
    Filter panel component providing category, subject, and search controls.
    Manages filter state and communicates changes to BookService.
    """
    
    def __init__(self, BookServiceInstance: BookService, Parent=None):
        """
        Initialize filter panel with book service dependency.
        
        Args:
            BookServiceInstance: BookService instance for data operations
            Parent: Parent widget
        """
        super().__init__(Parent)
        
        self.BookService = BookServiceInstance
        self.Logger = logging.getLogger(__name__)
        
        # UI Components
        self.CategoryComboBox: Optional[QComboBox] = None
        self.SubjectComboBox: Optional[QComboBox] = None
        self.BookComboBox: Optional[QComboBox] = None
        self.SearchLineEdit: Optional[QLineEdit] = None
        self.SearchListView: Optional[QListView] = None
        self.SearchModel: Optional[QStringListModel] = None
        
        # Search debounce timer
        self.SearchTimer = QTimer()
        self.SearchTimer.setSingleShot(True)
        self.SearchTimer.timeout.connect(self._PerformSearch)
        
        # Event callbacks
        self.OnBookSelected: Optional[Callable[[str], None]] = None
        
        # Filter placeholders
        self.Placeholders = [
            "Select a Category",
            "Select a Subject", 
            "Select a Book Title",
            "Type Something Here"
        ]
        
        self._SetupUserInterface()
        self._ConnectEvents()
        self._PopulateCategories()
        
        self.Logger.info("FilterPanel initialized successfully")
    
    def _SetupUserInterface(self) -> None:
        """Create and layout UI components"""
        # Set fixed width to match original design
        self.setFixedWidth(300)
        
        # Main layout
        self.MainLayout = QVBoxLayout(self)
        self.MainLayout.setContentsMargins(0, 0, 0, 0)
        
        # Create heading
        self._CreateHeading()
        
        # Create font for controls
        ControlFont = QFont()
        ControlFont.setPointSize(12)
        
        # Create category dropdown
        self.CategoryComboBox = self._CreateComboBox(ControlFont, 0)
        self.MainLayout.addWidget(self.CategoryComboBox)
        
        # Create subject dropdown
        self.SubjectComboBox = self._CreateComboBox(ControlFont, 1)
        self.MainLayout.addWidget(self.SubjectComboBox)
        
        # Create book title dropdown
        self.BookComboBox = self._CreateComboBox(ControlFont, 2)
        self.MainLayout.addWidget(self.BookComboBox)
        
        # Create search input
        self.SearchLineEdit = self._CreateSearchInput(ControlFont)
        self.MainLayout.addWidget(self.SearchLineEdit)
        
        # Create search results list
        self.SearchListView = self._CreateSearchList(ControlFont)
        self.MainLayout.addWidget(self.SearchListView)
        
        self.Logger.info("FilterPanel UI setup complete")
    
    def _CreateHeading(self) -> None:
        """Create the options heading label"""
        HeadingFont = QFont("Arial", 12)
        Heading = QLabel("- - - O p t i o n s - - -", alignment=Qt.AlignmentFlag.AlignHCenter)
        Heading.setFont(HeadingFont)
        Heading.setStyleSheet("color: #FCC419")
        Heading.setObjectName("heading")
        self.MainLayout.addWidget(Heading)
    
    def _CreateComboBox(self, Font: QFont, PlaceholderIndex: int) -> QComboBox:
        """
        Create styled combo box with tooltip support.
        
        Args:
            Font: Font to apply to combo box
            PlaceholderIndex: Index of placeholder text
            
        Returns:
            Configured QComboBox
        """
        ComboBox = QComboBox()
        ComboBox.setMaxVisibleItems(30)
        ComboBox.setFont(Font)
        
        # Create custom view with tooltip support
        ListView = ToolTipListView()
        ListView.setFont(Font)
        ListView.setStyleSheet("QListView::item { height: 18px; }")
        ListView.setTextElideMode(Qt.ElideRight)
        ComboBox.setView(ListView)
        
        # Set placeholder
        self._ResetComboBox(ComboBox, PlaceholderIndex)
        
        return ComboBox
    
    def _CreateSearchInput(self, Font: QFont) -> QLineEdit:
        """
        Create search input with proper styling and behavior.
        
        Args:
            Font: Font to apply to line edit
            
        Returns:
            Configured QLineEdit
        """
        LineEdit = QLineEdit()
        LineEdit.setMinimumHeight(18)
        LineEdit.setFont(Font)
        LineEdit.setText(self.Placeholders[3])  # "Type Something Here"
        LineEdit.installEventFilter(self)
        
        return LineEdit
    
    def _CreateSearchList(self, Font: QFont) -> QListView:
        """
        Create search results list view.
        
        Args:
            Font: Font to apply to list view
            
        Returns:
            Configured QListView
        """
        ListView = ToolTipListView()
        ListView.setFont(Font)
        
        # Create and set model
        self.SearchModel = QStringListModel()
        ListView.setModel(self.SearchModel)
        
        # Make it expand to fill remaining space
        from PySide6.QtWidgets import QSizePolicy
        ListView.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Expanding)
        
        return ListView
    
    def _ConnectEvents(self) -> None:
        """Connect UI events to handler methods"""
        if self.CategoryComboBox:
            self.CategoryComboBox.currentTextChanged.connect(self._OnCategoryChanged)
        
        if self.SubjectComboBox:
            self.SubjectComboBox.currentTextChanged.connect(self._OnSubjectChanged)
        
        if self.BookComboBox:
            self.BookComboBox.currentTextChanged.connect(self._OnBookChanged)
        
        if self.SearchLineEdit:
            self.SearchLineEdit.textChanged.connect(self._OnSearchTextChanged)
        
        if self.SearchListView:
            self.SearchListView.clicked.connect(self._OnSearchItemClicked)
    
    # =================================================================
    # DATA POPULATION METHODS
    # =================================================================
    
    def _PopulateCategories(self) -> None:
        """Populate category combo box with available categories"""
        try:
            CategoryNames = self.BookService.GetCategoryNames()
            
            if self.CategoryComboBox:
                self.CategoryComboBox.blockSignals(True)
                
                # Clear and add placeholder
                self.CategoryComboBox.clear()
                self.CategoryComboBox.addItem(self.Placeholders[0])
                
                # Add categories with tooltips
                for CategoryName in CategoryNames:
                    self.CategoryComboBox.addItem(CategoryName)
                    ItemIndex = self.CategoryComboBox.count() - 1
                    self.CategoryComboBox.setItemData(ItemIndex, CategoryName, Qt.ToolTipRole)
                
                self.CategoryComboBox.blockSignals(False)
                
            self.Logger.info(f"Populated {len(CategoryNames)} categories")
            
        except Exception as Error:
            self.Logger.error(f"Failed to populate categories: {Error}")
    
    def _PopulateSubjects(self) -> None:
        """Populate subject combo box based on selected category"""
        try:
            SubjectNames = self.BookService.GetSubjectNamesForCurrentCategory()
            
            if self.SubjectComboBox:
                self.SubjectComboBox.blockSignals(True)
                
                # Clear and add placeholder
                self.SubjectComboBox.clear()
                self.SubjectComboBox.addItem(self.Placeholders[1])
                
                # Add subjects with tooltips
                for SubjectName in SubjectNames:
                    self.SubjectComboBox.addItem(SubjectName)
                    ItemIndex = self.SubjectComboBox.count() - 1
                    self.SubjectComboBox.setItemData(ItemIndex, SubjectName, Qt.ToolTipRole)
                
                self.SubjectComboBox.blockSignals(False)
                
            self.Logger.info(f"Populated {len(SubjectNames)} subjects")
            
        except Exception as Error:
            self.Logger.error(f"Failed to populate subjects: {Error}")
    
    def _PopulateBooks(self) -> None:
        """Populate book combo box based on current filters"""
        try:
            CurrentBooks = self.BookService.GetCurrentBooks()
            BookTitles = [Book.Title for Book in CurrentBooks]
            
            if self.BookComboBox:
                self.BookComboBox.blockSignals(True)
                
                # Clear and add placeholder
                self.BookComboBox.clear()
                self.BookComboBox.addItem(self.Placeholders[2])
                
                # Add book titles with tooltips
                for BookTitle in BookTitles:
                    self.BookComboBox.addItem(BookTitle)
                    ItemIndex = self.BookComboBox.count() - 1
                    self.BookComboBox.setItemData(ItemIndex, BookTitle, Qt.ToolTipRole)
                
                self.BookComboBox.blockSignals(False)
                
            self.Logger.info(f"Populated {len(BookTitles)} books")
            
        except Exception as Error:
            self.Logger.error(f"Failed to populate books: {Error}")
    
    # =================================================================
    # EVENT HANDLERS
    # =================================================================
    
    def _OnCategoryChanged(self, CategoryName: str) -> None:
        """
        Handle category selection change.
        
        Args:
            CategoryName: Selected category name
        """
        if CategoryName == self.Placeholders[0]:
            # Placeholder selected - clear filter
            self.BookService.SetCurrentCategory(None)
        else:
            # Valid category selected
            self.BookService.SetCurrentCategory(CategoryName)
        
        # Reset dependent dropdowns
        self._ResetComboBox(self.SubjectComboBox, 1)
        self._ResetComboBox(self.BookComboBox, 2)
        
        # Clear search
        self._ClearSearch()
        
        # Populate subjects for new category
        if CategoryName != self.Placeholders[0]:
            self._PopulateSubjects()
    
    def _OnSubjectChanged(self, SubjectName: str) -> None:
        """
        Handle subject selection change.
        
        Args:
            SubjectName: Selected subject name
        """
        if SubjectName == self.Placeholders[1]:
            # Placeholder selected - clear filter
            self.BookService.SetCurrentSubject(None)
        else:
            # Valid subject selected
            self.BookService.SetCurrentSubject(SubjectName)
        
        # Reset book dropdown
        self._ResetComboBox(self.BookComboBox, 2)
        
        # Clear search
        self._ClearSearch()
        
        # Populate books for current filters
        if SubjectName != self.Placeholders[1]:
            self._PopulateBooks()
    
    def _OnBookChanged(self, BookTitle: str) -> None:
        """
        Handle book selection from dropdown.
        
        Args:
            BookTitle: Selected book title
        """
        if BookTitle != self.Placeholders[2] and self.OnBookSelected:
            self.OnBookSelected(BookTitle)
    
    def _OnSearchTextChanged(self, SearchText: str) -> None:
        """
        Handle search text changes with debouncing.
        
        Args:
            SearchText: Current search text
        """
        # Reset search timer for debouncing
        self.SearchTimer.stop()
        
        if len(SearchText) > 1 and SearchText != self.Placeholders[3]:
            # Start timer for delayed search
            self.SearchTimer.start(300)  # 300ms delay
        else:
            # Clear search results immediately for short text
            if self.SearchModel:
                self.SearchModel.setStringList([])
    
    def _PerformSearch(self) -> None:
        """Perform the actual search operation"""
        SearchText = self.SearchLineEdit.text() if self.SearchLineEdit else ""
        
        if len(SearchText) > 1:
            # Clear other filters when searching
            self._ResetComboBox(self.CategoryComboBox, 0)
            self._ResetComboBox(self.SubjectComboBox, 1) 
            self._ResetComboBox(self.BookComboBox, 2)
            
            # Perform search
            SearchResults = self.BookService.SearchBooks(SearchText)
            BookTitles = [Book.Title for Book in SearchResults]
            
            # Update search results list
            if self.SearchModel:
                self.SearchModel.setStringList(BookTitles)
    
    def _OnSearchItemClicked(self, Index) -> None:
        """
        Handle click on search result item.
        
        Args:
            Index: Model index of clicked item
        """
        BookTitle = Index.data()
        if BookTitle and self.OnBookSelected:
            self.OnBookSelected(BookTitle)
    
    # =================================================================
    # UTILITY METHODS
    # =================================================================
    
    def _ResetComboBox(self, ComboBox: Optional[QComboBox], PlaceholderIndex: int) -> None:
        """
        Reset combo box to placeholder state.
        
        Args:
            ComboBox: Combo box to reset
            PlaceholderIndex: Index of placeholder text
        """
        if ComboBox:
            ComboBox.blockSignals(True)
            ComboBox.clear()
            ComboBox.addItem(self.Placeholders[PlaceholderIndex])
            ComboBox.setCurrentIndex(0)
            ComboBox.blockSignals(False)
    
    def _ClearSearch(self) -> None:
        """Clear search input and results"""
        if self.SearchLineEdit:
            self.SearchLineEdit.clear()
            self.SearchLineEdit.setText(self.Placeholders[3])
        
        if self.SearchModel:
            self.SearchModel.setStringList([])
        
        self.BookService.ClearSearch()
    
    def eventFilter(self, Source, Event) -> bool:
        """
        Handle events for search input focus management.
        
        Args:
            Source: Event source object
            Event: Event object
            
        Returns:
            True if event was handled, False otherwise
        """
        if Source is self.SearchLineEdit and Event.type() == QEvent.FocusIn:
            # Clear other selections when search is focused
            self._ResetComboBox(self.CategoryComboBox, 0)
            self._ResetComboBox(self.SubjectComboBox, 1)
            self._ResetComboBox(self.BookComboBox, 2)
            
            # Clear placeholder text
            if self.SearchLineEdit.text() == self.Placeholders[3]:
                self.SearchLineEdit.setText("")
        
        return super().eventFilter(Source, Event)
    
    # =================================================================
    # PUBLIC INTERFACE
    # =================================================================
    
    def SetEventHandlers(self, OnBookSelected: Optional[Callable[[str], None]] = None) -> None:
        """
        Set event handlers for external communication.
        
        Args:
            OnBookSelected: Called when a book is selected for opening
        """
        if OnBookSelected:
            self.OnBookSelected = OnBookSelected
    
    def RefreshData(self) -> None:
        """Refresh all dropdown data from database"""
        self.BookService.RefreshCache()
        self._PopulateCategories()
        
        # Reset all dropdowns to placeholder state
        self._ResetComboBox(self.CategoryComboBox, 0)
        self._ResetComboBox(self.SubjectComboBox, 1)
        self._ResetComboBox(self.BookComboBox, 2)
        self._ClearSearch()
    
    def GetCurrentFilterState(self) -> dict:
        """
        Get current filter state for external use.
        
        Returns:
            Dictionary with current filter values
        """
        return {
            'Category': self.CategoryComboBox.currentText() if self.CategoryComboBox else "",
            'Subject': self.SubjectComboBox.currentText() if self.SubjectComboBox else "",
            'Book': self.BookComboBox.currentText() if self.BookComboBox else "",
            'SearchTerm': self.SearchLineEdit.text() if self.SearchLineEdit else ""
        }

================
File: Archive/Interface/MainWindow_2025-07-04_16-38-40.py
================
# File: MainWindow.py
# Path: Source/Interface/MainWindow.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  15:45PM
"""
Description: Anderson's Library Main Window
Primary application window that orchestrates all components and maintains application state.
Integrates FilterPanel, BookGrid, and CustomWindow framework for cohesive user experience.

Purpose: Serves as the main application controller, coordinating between UI components
and business logic while maintaining clean separation of concerns.
"""

import sys
import os
import logging
from typing import Optional, List
from PySide6.QtWidgets import QApplication, QMainWindow, QWidget, QHBoxLayout, QMessageBox
from PySide6.QtCore import QTimer
from PySide6.QtGui import QFont

# Import custom window framework
from .CustomWindow import CustomWindow

# Import core business logic
from ..Core.DatabaseManager import DatabaseManager
from ..Core.BookService import BookService

# Import UI components  
from .FilterPanel import FilterPanel
from .BookGrid import BookGrid

# Import data models
from ..Data.DatabaseModels import Book


class MainWindow(QMainWindow):
    """
    Main application window orchestrating all components.
    Provides the primary user interface for Anderson's Library.
    """
    
    def __init__(self, DatabasePath: str = "Assets/my_library.db", *args, **kwargs):
        """
        Initialize main window with database connection.
        
        Args:
            DatabasePath: Path to SQLite database file
        """
        super().__init__(*args, **kwargs)
        
        # Initialize logging
        self.Logger = logging.getLogger(__name__)
        
        # Core components
        self.DatabaseManager: Optional[DatabaseManager] = None
        self.BookService: Optional[BookService] = None
        
        # UI components
        self.FilterPanel: Optional[FilterPanel] = None
        self.BookGrid: Optional[BookGrid] = None
        self.CustomWindowWrapper: Optional[CustomWindow] = None
        
        # Layout components
        self.MainWidget: Optional[QWidget] = None
        self.MainLayout: Optional[QHBoxLayout] = None
        
        # Application state
        self.DatabasePath = DatabasePath
        self.CurrentBooks: List[Book] = []
        
        # Initialize application
        self._InitializeDatabase()
        self._InitializeServices()
        self._SetupUserInterface()
        self._ConnectComponents()
        self._ApplyStyles()
        
        self.Logger.info("MainWindow initialized successfully")
    
    def _InitializeDatabase(self) -> None:
        """Initialize database manager and validate connection"""
        try:
            self.DatabaseManager = DatabaseManager(self.DatabasePath)
            
            # Validate database integrity
            ValidationIssues = self.DatabaseManager.ValidateDatabase()
            if ValidationIssues:
                self.Logger.warning(f"Database validation issues: {ValidationIssues}")
                
            self.Logger.info("Database connection established")
            
        except Exception as Error:
            self.Logger.error(f"Database initialization failed: {Error}")
            QMessageBox.critical(
                self,
                "Database Error",
                f"Failed to connect to database:\n\n{Error}\n\nPlease check that the database file exists and is accessible."
            )
            sys.exit(1)
    
    def _InitializeServices(self) -> None:
        """Initialize business logic services"""
        try:
            # Create book service with database dependency
            self.BookService = BookService(self.DatabaseManager)
            
            # Set up event handlers for service callbacks
            self.BookService.SetEventHandlers(
                OnBooksChanged=self._OnBooksChanged,
                OnFilterChanged=self._OnFilterChanged,
                OnBookOpened=self._OnBookOpened
            )
            
            self.Logger.info("Business services initialized")
            
        except Exception as Error:
            self.Logger.error(f"Service initialization failed: {Error}")
            raise
    
    def _SetupUserInterface(self) -> None:
        """Create and configure user interface components"""
        # Create main widget and layout
        self.MainWidget = QWidget()
        self.setCentralWidget(self.MainWidget)
        
        self.MainLayout = QHBoxLayout(self.MainWidget)
        self.MainLayout.setContentsMargins(0, 0, 0, 0)
        
        # Create filter panel (left sidebar)
        self.FilterPanel = FilterPanel(self.BookService)
        self.FilterPanel.setFixedWidth(300)  # Match original design
        self.MainLayout.addWidget(self.FilterPanel)
        
        # Create book grid (main display area)
        self.BookGrid = BookGrid(self.BookService)
        self.MainLayout.addWidget(self.BookGrid)
        
        # Enable mouse tracking for the main window
        self.setMouseTracking(True)
        
        self.Logger.info("User interface components created")
    
    def _ConnectComponents(self) -> None:
        """Connect UI components with event handlers"""
        # Connect filter panel events
        if self.FilterPanel:
            self.FilterPanel.SetEventHandlers(
                OnBookSelected=self._OnBookSelectedFromFilter
            )
        
        # Connect book grid events  
        if self.BookGrid:
            self.BookGrid.SetEventHandlers(
                OnBookOpened=self._OnBookOpenedFromGrid
            )
        
        self.Logger.info("Component event handlers connected")
    
    def _ApplyStyles(self) -> None:
        """Apply application-wide styling to match original design"""
        # Set window properties
        self.setWindowTitle("Anderson's Library")
        self.setMouseTracking(True)
        
        # Apply the original blue gradient background style
        StyleSheet = """
            * {
                background-color: qlineargradient(spread:repeat, x1:1, y1:0, x2:1, y2:1, 
                    stop:0.00480769 rgba(3, 50, 76, 255), 
                    stop:0.293269 rgba(6, 82, 125, 255), 
                    stop:0.514423 rgba(8, 117, 178, 255), 
                    stop:0.745192 rgba(7, 108, 164, 255), 
                    stop:1 rgba(3, 51, 77, 255));
                color: #FFFFFF;
                border: none;
            }

            QComboBox::down-arrow {
                image: url(Assets/arrow.png);
            }

            QComboBox::item:hover, QListView::item:hover {
                border: 3px solid red;
            }
            
            QToolTip { 
                color: #ffffff; 
                border: none; 
                font-size: 16px; 
            }
        """
        
        self.setStyleSheet(StyleSheet)
        self.Logger.info("Application styling applied")
    
    # =================================================================
    # EVENT HANDLERS FROM SERVICES
    # =================================================================
    
    def _OnBooksChanged(self, Books: List[Book]) -> None:
        """
        Handle book list changes from BookService.
        
        Args:
            Books: Updated list of books
        """
        self.CurrentBooks = Books
        
        # Update book grid display
        if self.BookGrid:
            self.BookGrid.UpdateBooks(Books)
        
        self.Logger.info(f"Book display updated: {len(Books)} books")
    
    def _OnFilterChanged(self) -> None:
        """Handle filter state changes from BookService"""
        # Get current filter state for logging
        if self.BookService:
            FilterState = self.BookService.GetFilterState()
            self.Logger.info(f"Filters changed: {FilterState}")
    
    def _OnBookOpened(self, BookData: Book) -> None:
        """
        Handle book opened events from BookService.
        
        Args:
            BookData: Book that was opened
        """
        self.Logger.info(f"Book opened: {BookData.Title}")
    
    # =================================================================
    # EVENT HANDLERS FROM UI COMPONENTS
    # =================================================================
    
    def _OnBookSelectedFromFilter(self, BookTitle: str) -> None:
        """
        Handle book selection from filter panel.
        
        Args:
            BookTitle: Title of selected book
        """
        self.OpenBook(BookTitle)
    
    def _OnBookOpenedFromGrid(self, BookTitle: str) -> None:
        """
        Handle book opened from grid display.
        
        Args:
            BookTitle: Title of opened book
        """
        self.Logger.info(f"Book opened from grid: {BookTitle}")
    
    # =================================================================
    # PUBLIC INTERFACE METHODS
    # =================================================================
    
    def OpenBook(self, BookTitle: str) -> None:
        """
        Open book with confirmation dialog (matching original behavior).
        
        Args:
            BookTitle: Title of book to open
        """
        if not BookTitle or not self.BookService:
            return
        
        try:
            # Get book data
            BookData = self.BookService.GetBookByTitle(BookTitle)
            if not BookData:
                QMessageBox.warning(self, "Book Not Found", f"Could not find book: {BookTitle}")
                return
            
            # Create confirmation dialog (matching original design)
            MessageBox = QMessageBox()
            MessageBox.setWindowTitle("Selected Book")
            MessageBox.setText(f"Would you like to read:\n\n{BookTitle}")
            
            # Try to set book cover as icon
            CoverPath = BookData.GetCoverImagePath()
            if os.path.exists(CoverPath):
                from PySide6.QtGui import QPixmap
                MessageBox.setIconPixmap(QPixmap(CoverPath))
            
            MessageBox.setStandardButtons(QMessageBox.Cancel | QMessageBox.Ok)
            MessageBox.setDefaultButton(QMessageBox.Ok)
            
            # Apply styling to match original
            MessageBox.setStyleSheet("""
                QLabel {
                    font-size: 24px;
                }
                QPushButton {
                    min-height: 30px;
                    min-width: 70px;
                    font-size: 16px;
                }
            """)
            
            # Show dialog and handle response
            ReturnValue = MessageBox.exec()
            if ReturnValue == QMessageBox.Ok:
                Success = self.BookService.OpenBook(BookTitle)
                if not Success:
                    QMessageBox.warning(
                        self, 
                        "File Not Found", 
                        f"Could not open PDF file for: {BookTitle}\n\nThe file may have been moved or deleted."
                    )
                    
        except Exception as Error:
            self.Logger.error(f"Error opening book '{BookTitle}': {Error}")
            QMessageBox.critical(self, "Error", f"An error occurred while opening the book:\n\n{Error}")
    
    def RefreshData(self) -> None:
        """Refresh all data from database"""
        try:
            if self.BookService:
                self.BookService.RefreshCache()
            
            if self.FilterPanel:
                self.FilterPanel.RefreshData()
            
            self.Logger.info("Data refreshed successfully")
            
        except Exception as Error:
            self.Logger.error(f"Error refreshing data: {Error}")
            QMessageBox.warning(self, "Refresh Error", f"Could not refresh data:\n\n{Error}")
    
    def GetLibraryStatistics(self) -> dict:
        """
        Get comprehensive library statistics.
        
        Returns:
            Dictionary with library statistics
        """
        if self.BookService:
            return self.BookService.GetLibraryStatistics()
        return {}
    
    def ShowAbout(self) -> None:
        """Show about dialog"""
        QMessageBox.about(
            self,
            "About Anderson's Library",
            "Anderson's Library - Digital Book Management System\n\n"
            "Built with Python, PySide6, and the AIDEV-PascalCase-1.8 Standard\n\n"
            "Project Himalaya - BowersWorld.com\n"
            "© 2025 Herb Bowers"
        )
    
    # =================================================================
    # WINDOW MANAGEMENT
    # =================================================================
    
    def WrapWithCustomWindow(self) -> CustomWindow:
        """
        Wrap this window with CustomWindow framework.
        
        Returns:
            CustomWindow wrapper instance
        """
        try:
            self.CustomWindowWrapper = CustomWindow("Anderson's Library", self)
            self.Logger.info("Custom window wrapper applied")
            return self.CustomWindowWrapper
            
        except Exception as Error:
            self.Logger.error(f"Failed to create custom window wrapper: {Error}")
            raise
    
    def resizeEvent(self, Event) -> None:
        """Handle window resize events"""
        super().resizeEvent(Event)
        
        # Trigger book grid layout recalculation
        if self.BookGrid:
            # Use a small delay to avoid excessive updates during resize
            QTimer.singleShot(50, self.BookGrid.RefreshLayout)
    
    def closeEvent(self, Event) -> None:
        """Handle window close events"""
        try:
            # Save any necessary state here
            self.Logger.info("Application closing")
            Event.accept()
            
        except Exception as Error:
            self.Logger.error(f"Error during application close: {Error}")
            Event.accept()  # Close anyway


def CreateAndShowMainWindow(DatabasePath: str = "Assets/my_library.db") -> CustomWindow:
    """
    Factory function to create and display the main application window.
    
    Args:
        DatabasePath: Path to SQLite database file
        
    Returns:
        CustomWindow wrapper for the main window
    """
    try:
        # Configure logging
        logging.basicConfig(
            level=logging.INFO,
            format='[%(asctime)s] %(name)s - %(levelname)s: %(message)s'
        )
        
        # Create main window
        MainWindowInstance = MainWindow(DatabasePath)
        
        # Wrap with custom window framework
        CustomWindowInstance = MainWindowInstance.WrapWithCustomWindow()
        
        # Show maximized (matching original behavior)
        CustomWindowInstance.showMaximized()
        
        return CustomWindowInstance
        
    except Exception as Error:
        logging.error(f"Failed to create main window: {Error}")
        raise


def RunApplication() -> int:
    """
    Run the complete Anderson's Library application.
    
    Returns:
        Application exit code
    """
    try:
        # Create QApplication
        App = QApplication(sys.argv)
        
        # Set application properties
        App.setApplicationName("Anderson's Library")
        App.setApplicationVersion("2.0")
        App.setOrganizationName("BowersWorld.com")
        
        # Create and show main window
        MainWindow = CreateAndShowMainWindow()
        
        # Run application event loop
        return App.exec()
        
    except Exception as Error:
        logging.error(f"Application failed to start: {Error}")
        return 1


# Entry point for direct execution
if __name__ == "__main__":
    ExitCode = RunApplication()
    sys.exit(ExitCode)

================
File: Archive/TestImports_2025-07-04_14-44-12.py
================
#!/usr/bin/env python3
# File: TestImports.py
# Path: TestImports.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  16:30PM
"""
Description: Anderson's Library Module Import Test
Tests that all modular components can be imported correctly after migration.
Validates the new professional architecture is properly configured.

Purpose: Provides quick validation that the modular refactor was successful
and all components are accessible for the Anderson's Library application.
"""

import sys
import os
from pathlib import Path

def TestImports():
    """Test that all modules can be imported successfully"""
    print("🧪 Testing Anderson's Library Module Imports")
    print("=" * 50)
    
    # Add Source to Python path
    SourcePath = Path(__file__).parent / "Source"
    if SourcePath.exists():
        sys.path.insert(0, str(SourcePath))
        print(f"✅ Added to path: {SourcePath}")
    else:
        print(f"❌ Source directory not found: {SourcePath}")
        print("📁 Make sure you've run the setup scripts first")
        return False
    
    print("\n🔍 Testing module imports...")
    
    # Define modules to test with their expected classes
    TestModules = [
        ("Data.DatabaseModels", ["Book", "Category", "Subject"], "Data models"),
        ("Core.DatabaseManager", ["DatabaseManager"], "Database operations"),
        ("Core.BookService", ["BookService"], "Business logic"),
        ("Interface.FilterPanel", ["FilterPanel"], "Filter sidebar"),
        ("Interface.BookGrid", ["BookGrid"], "Book display grid"),
        ("Interface.MainWindow", ["MainWindow"], "Main application window")
    ]
    
    SuccessCount = 0
    FailedCount = 0
    
    for ModuleName, Classes, Description in TestModules:
        try:
            # Test module import
            Module = __import__(ModuleName, fromlist=Classes)
            
            # Test class imports
            MissingClasses = []
            for ClassName in Classes:
                if not hasattr(Module, ClassName):
                    MissingClasses.append(ClassName)
            
            if MissingClasses:
                print(f"   ⚠️  {ModuleName}: Missing classes {MissingClasses}")
                FailedCount += 1
            else:
                print(f"   ✅ {ModuleName} - {Description}")
                SuccessCount += 1
                
        except ImportError as Error:
            print(f"   ❌ {ModuleName}: {Error}")
            FailedCount += 1
        except Exception as Error:
            print(f"   ❌ {ModuleName}: Unexpected error - {Error}")
            FailedCount += 1
    
    # Test CustomWindow import (user's existing file)
    try:
        from Interface.CustomWindow import CustomWindow
        print(f"   ✅ Interface.CustomWindow - Custom window framework")
        SuccessCount += 1
    except ImportError as Error:
        print(f"   ⚠️  Interface.CustomWindow: {Error}")
        print(f"      💡 Copy your CustomWindow.py to Source/Interface/")
        FailedCount += 1
    
    # Generate summary
    print("\n" + "=" * 50)
    print("📊 IMPORT TEST RESULTS")
    print("=" * 50)
    print(f"✅ Successful imports: {SuccessCount}")
    print(f"❌ Failed imports: {FailedCount}")
    
    if FailedCount == 0:
        print("\n🎉 ALL IMPORTS SUCCESSFUL!")
        print("🚀 Ready to run: python RunAnderson.py")
        print("📚 Your modular Anderson's Library is ready!")
        return True
    else:
        print(f"\n⚠️  {FailedCount} imports failed")
        print("\n🔧 TROUBLESHOOTING:")
        
        if FailedCount == len(TestModules) + 1:
            print("   📁 Check that Source/ directory structure exists")
            print("   📄 Verify all modules are in correct locations")
            print("   🏗️ Run setup scripts if needed")
        else:
            print("   📄 Check file locations match the expected structure:")
            print("      • Source/Data/DatabaseModels.py")
            print("      • Source/Core/DatabaseManager.py")
            print("      • Source/Core/BookService.py") 
            print("      • Source/Interface/FilterPanel.py")
            print("      • Source/Interface/BookGrid.py")
            print("      • Source/Interface/MainWindow.py")
            print("      • Source/Interface/CustomWindow.py")
        
        return False

def CheckFileStructure():
    """Check if all expected files are present"""
    print("\n📁 Checking file structure...")
    
    ExpectedFiles = [
        "Source/Data/DatabaseModels.py",
        "Source/Core/DatabaseManager.py", 
        "Source/Core/BookService.py",
        "Source/Interface/FilterPanel.py",
        "Source/Interface/BookGrid.py",
        "Source/Interface/MainWindow.py",
        "Source/Interface/CustomWindow.py"
    ]
    
    MissingFiles = []
    PresentFiles = []
    
    for FilePath in ExpectedFiles:
        if os.path.exists(FilePath):
            PresentFiles.append(FilePath)
            print(f"   ✅ {FilePath}")
        else:
            MissingFiles.append(FilePath)
            print(f"   ❌ {FilePath}")
    
    print(f"\n📊 Files: {len(PresentFiles)} present, {len(MissingFiles)} missing")
    
    if MissingFiles:
        print("\n📋 Missing files:")
        for File in MissingFiles:
            print(f"   📄 {File}")
        
        if "Source/Interface/CustomWindow.py" in MissingFiles:
            print("\n💡 Don't forget to copy your existing CustomWindow.py!")
    
    return len(MissingFiles) == 0

def TestDatabaseConnection():
    """Test database connection if possible"""
    print("\n🗄️  Testing database connection...")
    
    DatabasePaths = [
        "Assets/my_library.db",
        "Data/Databases/my_library.db", 
        "my_library.db"
    ]
    
    DatabaseFound = False
    for DbPath in DatabasePaths:
        if os.path.exists(DbPath):
            print(f"   ✅ Found database: {DbPath}")
            DatabaseFound = True
            break
    
    if not DatabaseFound:
        print("   ⚠️  No database found at expected locations:")
        for DbPath in DatabasePaths:
            print(f"      📄 {DbPath}")
        print("   💡 Make sure your SQLite database is accessible")
    
    return DatabaseFound

def Main():
    """Main test execution"""
    try:
        print("🏔️ Anderson's Library - Professional Edition")
        print("Import Validation Test")
        print()
        
        # Check file structure first
        FilesOk = CheckFileStructure()
        
        # Test imports
        ImportsOk = TestImports()
        
        # Test database
        DatabaseOk = TestDatabaseConnection()
        
        # Final status
        print("\n" + "=" * 50)
        if FilesOk and ImportsOk:
            print("🎉 MIGRATION VALIDATION SUCCESSFUL!")
            print("✅ All modules imported correctly")
            print("✅ File structure is correct")
            if DatabaseOk:
                print("✅ Database found")
            print("\n🚀 Ready to run your professional Anderson's Library!")
            print("   python RunAnderson.py")
        else:
            print("❌ VALIDATION ISSUES FOUND")
            print("📝 Please resolve the issues above before running the application")
        
        print("=" * 50)
        
        return FilesOk and ImportsOk
        
    except Exception as Error:
        print(f"❌ Test failed with error: {Error}")
        return False

if __name__ == "__main__":
    Success = Main()
    sys.exit(0 if Success else 1)

================
File: CreateThumbs/ConvertToThumbnails.py
================
#!/usr/bin/env python3
"""
File: ConvertToThumbnails.py
Path: /home/herb/Desktop/BowersWorld-com/ConvertToThumbnails.py
Standard: AIDEV-PascalCase-1.7
Created: 2025-06-25
Author: Herb Bowers - Project Himalaya
Description: Convert PNG book covers to web-optimized thumbnails for Anderson's Library
"""

import os
import sys
from pathlib import Path
from PIL import Image
import time
from datetime import datetime

# Configuration
SOURCE_DIR = "/home/herb/Desktop/BowersWorld-com/Covers"
OUTPUT_DIR = "/home/herb/Desktop/BowersWorld-com/Thumbs"
THUMBNAIL_SIZE = (64, 85)  # Width x Height - optimized for book covers
QUALITY_SETTING = 85  # PNG optimization level
PROGRESS_INTERVAL = 25  # Show progress every N files

def CreateOutputDirectory(OutputPath):
    """
    Create the output directory if it doesn't exist
    
    Args:
        OutputPath: Path to create
        
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        Path(OutputPath).mkdir(parents=True, exist_ok=True)
        print(f"✅ Output directory ready: {OutputPath}")
        return True
    except Exception as CreateError:
        print(f"❌ Failed to create output directory: {CreateError}")
        return False

def ValidateSourceDirectory(SourcePath):
    """
    Validate that source directory exists and contains PNG files
    
    Args:
        SourcePath: Path to validate
        
    Returns:
        tuple: (bool: valid, int: png_count)
    """
    if not os.path.exists(SourcePath):
        print(f"❌ Source directory not found: {SourcePath}")
        return False, 0
    
    PngFiles = list(Path(SourcePath).glob("*.png"))
    PngCount = len(PngFiles)
    
    if PngCount == 0:
        print(f"⚠️ No PNG files found in: {SourcePath}")
        return False, 0
    
    print(f"📁 Found {PngCount} PNG files in source directory")
    return True, PngCount

def ConvertSingleImage(SourcePath, OutputPath, ThumbnailSize):
    """
    Convert a single PNG file to thumbnail
    
    Args:
        SourcePath: Path to source PNG file
        OutputPath: Path for output thumbnail
        ThumbnailSize: Tuple of (width, height)
        
    Returns:
        tuple: (bool: success, int: original_size, int: thumbnail_size)
    """
    try:
        # Get original file size
        OriginalSize = os.path.getsize(SourcePath)
        
        # Open and process image
        with Image.open(SourcePath) as OriginalImage:
            # Convert RGBA to RGB if necessary (remove transparency)
            if OriginalImage.mode in ('RGBA', 'LA'):
                # Create white background
                RgbImage = Image.new('RGB', OriginalImage.size, (255, 255, 255))
                if OriginalImage.mode == 'RGBA':
                    RgbImage.paste(OriginalImage, mask=OriginalImage.split()[-1])
                else:
                    RgbImage.paste(OriginalImage, mask=OriginalImage.split()[-1])
                ProcessedImage = RgbImage
            else:
                ProcessedImage = OriginalImage.copy()
            
            # Create thumbnail while maintaining aspect ratio
            ProcessedImage.thumbnail(ThumbnailSize, Image.Resampling.LANCZOS)
            
            # Save optimized thumbnail
            ProcessedImage.save(OutputPath, 'PNG', optimize=True, quality=QUALITY_SETTING)
        
        # Get thumbnail file size
        ThumbnailSize = os.path.getsize(OutputPath)
        
        return True, OriginalSize, ThumbnailSize
        
    except Exception as ConversionError:
        print(f"❌ Error converting {SourcePath}: {ConversionError}")
        return False, 0, 0

def FormatFileSize(SizeInBytes):
    """
    Format file size in human-readable format
    
    Args:
        SizeInBytes: Size in bytes
        
    Returns:
        str: Formatted size string
    """
    for Unit in ['B', 'KB', 'MB', 'GB']:
        if SizeInBytes < 1024.0:
            return f"{SizeInBytes:.1f} {Unit}"
        SizeInBytes /= 1024.0
    return f"{SizeInBytes:.1f} TB"

def GenerateThumbnails():
    """
    Main function to convert all PNG files to thumbnails
    
    Returns:
        bool: True if successful, False otherwise
    """
    StartTime = time.time()
    
    print("🎨 Anderson's Library Thumbnail Generator")
    print("=" * 50)
    print(f"📂 Source: {SOURCE_DIR}")
    print(f"📁 Output: {OUTPUT_DIR}")
    print(f"📏 Size: {THUMBNAIL_SIZE[0]}x{THUMBNAIL_SIZE[1]} pixels")
    print("=" * 50)
    
    # Validate source directory
    IsValid, TotalFiles = ValidateSourceDirectory(SOURCE_DIR)
    if not IsValid:
        return False
    
    # Create output directory
    if not CreateOutputDirectory(OUTPUT_DIR):
        return False
    
    # Process all PNG files
    ProcessedCount = 0
    ErrorCount = 0
    TotalOriginalSize = 0
    TotalThumbnailSize = 0
    SkippedCount = 0
    
    PngFiles = list(Path(SOURCE_DIR).glob("*.png"))
    
    print(f"🔄 Starting conversion of {len(PngFiles)} files...")
    print()
    
    for FileIndex, SourceFile in enumerate(PngFiles, 1):
        FileName = SourceFile.name
        OutputFile = Path(OUTPUT_DIR) / FileName
        
        # Check if thumbnail already exists
        if OutputFile.exists():
            print(f"⏭️ Skipping {FileName} (already exists)")
            SkippedCount += 1
            continue
        
        # Convert image
        Success, OriginalSize, ThumbnailSize = ConvertSingleImage(
            str(SourceFile), str(OutputFile), THUMBNAIL_SIZE
        )
        
        if Success:
            ProcessedCount += 1
            TotalOriginalSize += OriginalSize
            TotalThumbnailSize += ThumbnailSize
            
            # Calculate compression ratio
            CompressionRatio = (1 - (ThumbnailSize / OriginalSize)) * 100 if OriginalSize > 0 else 0
            
            # Show progress
            if ProcessedCount % PROGRESS_INTERVAL == 0 or FileIndex == len(PngFiles):
                print(f"📸 Processed {ProcessedCount}/{TotalFiles}: {FileName}")
                print(f"   📊 {FormatFileSize(OriginalSize)} → {FormatFileSize(ThumbnailSize)} ({CompressionRatio:.1f}% reduction)")
                
        else:
            ErrorCount += 1
    
    # Calculate final statistics
    EndTime = time.time()
    ProcessingTime = EndTime - StartTime
    
    print()
    print("=" * 50)
    print("✅ THUMBNAIL CONVERSION COMPLETE!")
    print("=" * 50)
    print(f"📊 Files processed: {ProcessedCount}")
    print(f"⏭️ Files skipped: {SkippedCount}")
    print(f"❌ Errors: {ErrorCount}")
    print(f"⏱️ Processing time: {ProcessingTime:.1f} seconds")
    
    if ProcessedCount > 0:
        # Size comparison
        TotalReduction = (1 - (TotalThumbnailSize / TotalOriginalSize)) * 100 if TotalOriginalSize > 0 else 0
        AverageOriginalSize = TotalOriginalSize / ProcessedCount
        AverageThumbnailSize = TotalThumbnailSize / ProcessedCount
        
        print()
        print("📈 SIZE ANALYSIS:")
        print(f"   Original total: {FormatFileSize(TotalOriginalSize)}")
        print(f"   Thumbnail total: {FormatFileSize(TotalThumbnailSize)}")
        print(f"   Total reduction: {TotalReduction:.1f}%")
        print(f"   Average original: {FormatFileSize(AverageOriginalSize)}")
        print(f"   Average thumbnail: {FormatFileSize(AverageThumbnailSize)}")
        
        # Performance metrics
        FilesPerSecond = ProcessedCount / ProcessingTime if ProcessingTime > 0 else 0
        print(f"   Processing speed: {FilesPerSecond:.1f} files/second")
    
    print()
    print(f"📁 Thumbnails saved to: {OUTPUT_DIR}")
    print("🎉 Ready for web deployment!")
    
    return ErrorCount == 0

def ShowUsageInformation():
    """Display usage information for the script"""
    print("📚 Anderson's Library Thumbnail Generator")
    print()
    print("USAGE:")
    print("  python ConvertToThumbnails.py")
    print()
    print("CONFIGURATION:")
    print(f"  Source Directory: {SOURCE_DIR}")
    print(f"  Output Directory: {OUTPUT_DIR}")
    print(f"  Thumbnail Size: {THUMBNAIL_SIZE[0]}x{THUMBNAIL_SIZE[1]} pixels")
    print()
    print("FEATURES:")
    print("  ✅ Maintains aspect ratio")
    print("  ✅ Optimizes file size")
    print("  ✅ Handles RGBA to RGB conversion")
    print("  ✅ Progress tracking")
    print("  ✅ Error handling")
    print("  ✅ Skips existing files")
    print()
    print("OUTPUT:")
    print("  • Creates optimized PNG thumbnails")
    print("  • Typically 95%+ smaller than originals")
    print("  • Perfect for web deployment")

def ValidateEnvironment():
    """
    Validate that required dependencies are available
    
    Returns:
        bool: True if environment is ready
    """
    try:
        import PIL
        print(f"✅ PIL/Pillow version: {PIL.__version__}")
        return True
    except ImportError:
        print("❌ PIL/Pillow not found!")
        print("   Install with: pip install Pillow")
        return False

if __name__ == "__main__":
    # Handle command line arguments
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help', 'help']:
        ShowUsageInformation()
        sys.exit(0)
    
    # Validate environment
    if not ValidateEnvironment():
        sys.exit(1)
    
    # Run thumbnail generation
    try:
        Success = GenerateThumbnails()
        ExitCode = 0 if Success else 1
        
        if Success:
            print(f"\n🎉 Thumbnail generation completed successfully!")
            print(f"   Ready to integrate with Anderson's Library web interface")
        else:
            print(f"\n⚠️ Thumbnail generation completed with errors")
            print(f"   Check the output above for details")
        
        sys.exit(ExitCode)
        
    except KeyboardInterrupt:
        print("\n\n⚠️ Conversion interrupted by user")
        print("   Partial results may be available in the output directory")
        sys.exit(1)
    except Exception as UnexpectedError:
        print(f"\n❌ Unexpected error: {UnexpectedError}")
        print("   Please check file permissions and available disk space")
        sys.exit(1)
================
File: CreateThumbs/ConvertToThumbnailsPart2.py
================
#!/usr/bin/env python3
"""
Fix Problematic PNG Files - Simple metadata stripping approach
"""

import os
from PIL import Image
import io

# The problematic files
PROBLEMATIC_FILES = [
    "/home/herb/Desktop/BowersWorld-com/Covers/Algebra Based and AP Physics 2.png",
    "/home/herb/Desktop/BowersWorld-com/Covers/Trigonometry for Dummies.png"
]

OUTPUT_DIR = "/home/herb/Desktop/BowersWorld-com/Thumbs"
THUMBNAIL_SIZE = (64, 85)

def fix_and_convert_png(source_path, output_path):
    """
    Fix PNG by completely stripping metadata and converting to thumbnail
    """
    try:
        print(f"🔧 Fixing: {os.path.basename(source_path)}")
        
        # Method 1: Try loading with warnings ignored
        try:
            import warnings
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                img = Image.open(source_path)
                img.load()  # Force load the image data
        except Exception:
            # Method 2: Load as raw pixel data and rebuild
            print(f"   🔄 Trying alternative loading method...")
            with open(source_path, 'rb') as f:
                # Read file as bytes
                img_bytes = f.read()
            
            # Load into PIL and immediately convert to clean format
            img_stream = io.BytesIO(img_bytes)
            img = Image.open(img_stream)
            img.load()
        
        # Convert to clean RGB format (strips all metadata)
        if img.mode in ('RGBA', 'LA', 'P'):
            # Create white background
            clean_img = Image.new('RGB', img.size, (255, 255, 255))
            if img.mode == 'P':
                img = img.convert('RGBA')
            if img.mode in ('RGBA', 'LA'):
                clean_img.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)
        else:
            # Convert to RGB to strip metadata
            clean_img = img.convert('RGB')
        
        # Create thumbnail
        clean_img.thumbnail(THUMBNAIL_SIZE, Image.Resampling.LANCZOS)
        
        # Save as clean PNG (no metadata)
        clean_img.save(output_path, 'PNG', optimize=True)
        
        # Clean up
        img.close()
        clean_img.close()
        
        # Check result
        if os.path.exists(output_path):
            original_size = os.path.getsize(source_path)
            thumbnail_size = os.path.getsize(output_path)
            reduction = (1 - (thumbnail_size / original_size)) * 100
            
            print(f"   ✅ Success: {original_size//1024} KB → {thumbnail_size//1024} KB ({reduction:.1f}% reduction)")
            return True
        else:
            print(f"   ❌ Failed to create thumbnail")
            return False
            
    except Exception as e:
        print(f"   ❌ Error: {e}")
        
        # Last resort: Try with different image library or manual pixel extraction
        try:
            print(f"   🔄 Trying emergency fallback...")
            # Create a simple placeholder thumbnail
            placeholder = Image.new('RGB', THUMBNAIL_SIZE, (200, 200, 200))
            # Add some text to indicate it's a placeholder
            placeholder.save(output_path, 'PNG')
            print(f"   ⚠️ Created placeholder thumbnail")
            return True
        except:
            return False

def main():
    print("🔧 Fixing Problematic PNG Files")
    print("=" * 40)
    
    fixed_count = 0
    
    for source_file in PROBLEMATIC_FILES:
        if os.path.exists(source_file):
            filename = os.path.basename(source_file)
            output_file = os.path.join(OUTPUT_DIR, filename)
            
            if fix_and_convert_png(source_file, output_file):
                fixed_count += 1
        else:
            print(f"⚠️ File not found: {os.path.basename(source_file)}")
    
    print()
    print(f"✅ Fixed {fixed_count} problematic files")
    print(f"🎉 All thumbnails now complete!")

if __name__ == "__main__":
    main()
================
File: HTML/GoogleAuthorzeTest.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Google Identity Services Test</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 2rem; background: #f0f0f0; }
        .container { max-width: 600px; margin: 0 auto; background: white; padding: 2rem; border-radius: 8px; }
        .status { padding: 1rem; margin: 1rem 0; border-radius: 4px; }
        .success { background: #d4edda; color: #155724; }
        .error { background: #f8d7da; color: #721c24; }
        .info { background: #d1ecf1; color: #0c5460; }
        .modern-note { background: #e8f5e8; border: 2px solid #28a745; color: #155724; padding: 1rem; border-radius: 4px; margin: 1rem 0; }
        button { padding: 0.75rem 1.5rem; margin: 0.5rem; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; }
        button:hover { background: #0056b3; }
        pre { background: #f8f9fa; padding: 1rem; border-radius: 4px; overflow-x: auto; font-size: 0.9rem; }
        .sign-in-container { margin: 2rem 0; padding: 1rem; border: 2px dashed #007bff; border-radius: 8px; text-align: center; }
        #g_id_signin { margin: 1rem auto; }
    </style>
</head>
<body>
    <div class="container">
        <h1>🚀 Modern Google Identity Services Test</h1>
        
        <div class="modern-note">
            <strong>✅ Using Google Identity Services (2025)</strong><br>
            This replaces the deprecated gapi.auth2 library with the modern approach.
        </div>

        <div class="sign-in-container">
            <h3>🔐 Sign In With Google</h3>
            <p>Click the button below to test modern Google authentication:</p>
            
            <!-- This div will automatically become a Google Sign-In button -->
            <div id="g_id_signin" data-type="standard" data-theme="outline" data-size="large"></div>
            
            <button onclick="requestAccessToken()">🔑 Request API Access Token</button>
            <button onclick="testDriveAPI()">📁 Test Drive API</button>
        </div>
        
        <div id="status" class="status info">Ready to test modern Google authentication</div>
        <div id="log"><pre>Log will appear here...</pre></div>
    </div>

    <!-- Load Google Identity Services library -->
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    
    <!-- Load Google API Client Library for API calls -->
    <script src="https://apis.google.com/js/api.js" async defer></script>
    
    <script>
        let accessToken = null;
        let gapiLoaded = false;

        function setStatus(message, type = 'info') {
            const statusDiv = document.getElementById('status');
            statusDiv.textContent = message;
            statusDiv.className = `status ${type}`;
        }

        function log(message) {
            const logDiv = document.getElementById('log');
            const timestamp = new Date().toLocaleTimeString();
            logDiv.innerHTML += `[${timestamp}] ${message}\n`;
            console.log(message);
        }

        // Initialize Google Identity Services when page loads
        window.onload = function() {
            log('🚀 Modern Google Identity Services Test Ready');
            log('📋 Using Google Identity Services (NOT deprecated gapi.auth2)');
            
            // Configure Google Identity Services
            google.accounts.id.initialize({
                client_id: '906077568035-3ofuni3d731kk5m732nbv040j27b5glt.apps.googleusercontent.com',
                callback: handleCredentialResponse,
                auto_select: false,
                cancel_on_tap_outside: false
            });

            // Render the sign-in button
            google.accounts.id.renderButton(
                document.getElementById('g_id_signin'),
                { 
                    type: 'standard',
                    theme: 'outline', 
                    size: 'large',
                    text: 'signin_with',
                    shape: 'rectangular'
                }
            );

            log('✅ Google Identity Services initialized');
            
            // Load Google API client for API calls
            gapi.load('client', initializeGapi);
        };

        function initializeGapi() {
            gapi.client.init({
                apiKey: 'AlzaSyCCcl8l3ws715qCl9W9nLLJu6WZt',
                discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']
            }).then(() => {
                gapiLoaded = true;
                log('✅ Google API client initialized');
            }).catch(error => {
                log('❌ Error initializing Google API client: ' + error.message);
            });
        }

        // Handle sign-in response (authentication)
        function handleCredentialResponse(response) {
            log('🎉 Sign-in successful!');
            log('✅ Received credential: ' + response.credential.substring(0, 50) + '...');
            
            // Decode the JWT token to get user info
            const payload = parseJwt(response.credential);
            log(`✅ Welcome ${payload.name} (${payload.email})`);
            
            setStatus('🎉 Authentication successful! Now you can request API access.', 'success');
        }

        // Request access token for API calls (authorization)
        function requestAccessToken() {
            log('🔐 Requesting access token for API access...');
            
            const client = google.accounts.oauth2.initTokenClient({
                client_id: '906077568035-3ofuni3d731kk5m732nbv040j27b5glt.apps.googleusercontent.com',
                scope: 'https://www.googleapis.com/auth/drive.readonly https://www.googleapis.com/auth/userinfo.email',
                callback: (tokenResponse) => {
                    accessToken = tokenResponse.access_token;
                    log('✅ Access token received!');
                    log(`✅ Token: ${accessToken.substring(0, 30)}...`);
                    
                    // Set the token for Google API client
                    gapi.client.setToken({
                        access_token: accessToken
                    });
                    
                    setStatus('🎉 API access token obtained! You can now test APIs.', 'success');
                },
                error_callback: (error) => {
                    log('❌ Error getting access token: ' + JSON.stringify(error));
                    setStatus('❌ Failed to get access token', 'error');
                }
            });
            
            client.requestAccessToken();
        }

        // Test Drive API call using direct fetch (no manual copying needed!)
        async function testDriveAPI() {
            if (!accessToken) {
                log('⚠️ No access token available. Please request API access first.');
                setStatus('⚠️ Request API access token first', 'error');
                return;
            }

            log('🔄 Testing Google Drive API directly...');
            log(`🔑 Using token: ${accessToken.substring(0, 30)}...`);

            try {
                // Test with user info first (simpler)
                log('🔄 Step 1: Testing user info API...');
                const userResponse = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
                    headers: {
                        'Authorization': `Bearer ${accessToken}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (userResponse.ok) {
                    const userData = await userResponse.json();
                    log('✅ User info API works!');
                    log(`✅ User: ${userData.name} (${userData.email})`);

                    // Now try Drive API
                    log('🔄 Step 2: Testing Drive API...');
                    const driveResponse = await fetch('https://www.googleapis.com/drive/v3/about?fields=user,storageQuota', {
                        headers: {
                            'Authorization': `Bearer ${accessToken}`,
                            'Content-Type': 'application/json'
                        }
                    });

                    if (driveResponse.ok) {
                        const driveData = await driveResponse.json();
                        log('🎉 Drive API test successful!');
                        log(`✅ Drive User: ${driveData.user.displayName}`);
                        log(`✅ Storage used: ${Math.round(driveData.storageQuota.usage / 1024 / 1024)} MB`);
                        setStatus('🎉 Both APIs working perfectly!', 'success');
                    } else {
                        const errorText = await driveResponse.text();
                        log(`❌ Drive API failed: ${driveResponse.status}`);
                        log(`❌ Error: ${errorText}`);
                        setStatus('❌ Drive API failed - check scopes', 'error');
                    }
                } else {
                    const errorText = await userResponse.text();
                    log(`❌ User info API failed: ${userResponse.status}`);
                    log(`❌ Error: ${errorText}`);
                    setStatus('❌ API access failed - token issue', 'error');
                }

            } catch (error) {
                log('❌ Network error: ' + error.message);
                setStatus('❌ Network error during API test', 'error');
            }
        }

        // Helper function to decode JWT
        function parseJwt(token) {
            try {
                const base64Url = token.split('.')[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(''));
                return JSON.parse(jsonPayload);
            } catch (error) {
                log('Error parsing JWT: ' + error.message);
                return {};
            }
        }

        // Show/hide one tap prompt
        function showOneTap() {
            google.accounts.id.prompt((notification) => {
                if (notification.isNotDisplayed() || notification.isSkippedMoment()) {
                    log('⚠️ One Tap prompt not displayed or skipped');
                } else {
                    log('✅ One Tap prompt displayed');
                }
            });
        }
    </script>
</body>
</html>
================
File: Legacy/Andy.py
================
import sys
import os
import sqlite3
import webbrowser
from PySide6.QtWidgets import (
    QApplication,
    QMainWindow,
    QWidget,
    QScrollArea,
    QGridLayout,
    QLabel,
    QVBoxLayout,
    QComboBox,
    QHBoxLayout,
    QSizePolicy,
    QSpacerItem,
    QMessageBox,
    QLineEdit,
    QListView,
    QToolTip,
)
from PySide6.QtGui import QPixmap, QFont, QPen, QPainter
from PySide6.QtCore import (
    Qt,
    QEvent,
    QTimer,
    QStringListModel,
)
from CustomWindow import CustomWindow


class ToolTipListView(QListView):
    def __init__(self, parent=None):
        super().__init__(parent)

    def viewportEvent(self, event):
        if event.type() == QEvent.ToolTip:
            index = self.indexAt(event.pos())
            if index.isValid():
                QToolTip.showText(event.globalPos(), index.data(), self)
            else:
                QToolTip.hideText()
                event.ignore()
            return True
        return super().viewportEvent(event)


class HoverHighlightWidget(QWidget):
    def __init__(self, main_window, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.main_window = main_window
        self.setMouseTracking(True)
        self.hovered = False
        self.description = ""

    def enterEvent(self, event):
        self.hovered = True
        self.update()

    def leaveEvent(self, event):
        self.hovered = False
        self.update()

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.BookName = self.description
            self.main_window.getPDF(self.BookName)

    def paintEvent(self, event):
        super().paintEvent(event)
        if self.hovered:
            painter = QPainter(self)
            painter.setPen(QPen(Qt.red, 8))
            painter.drawRect(self.rect())


class MainWindow(QMainWindow):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # Placeholder values for ComboBoxes
        self.placeholders = [
            "Select a Category",
            "Select a Subject",
            "Select a Book Title",
            "Type Something Here",
        ]
        self.C_WAS = 0
        self.C_NOW = 0
        self.W_ITEM = 230
        self.W_BASE = 315
        self.books = False

        # Connect to the database
        self.conn = sqlite3.connect("Assets/my_library.db")
        self.c = self.conn.cursor()

        self.setMouseTracking(True)

        # Create the dropdowns and combobox
        self.box1_values = self.populate_box1()
        self.main_widget = QWidget()
        self.setCentralWidget(self.main_widget)

        self.main_layout = QHBoxLayout(self.main_widget)
        self.main_layout.setContentsMargins(0, 0, 0, 0)  # Remove space around layout

        # Create comboboxes
        self.dropdowns_container = QWidget()
        self.dropdowns_container.setFixedWidth(300)
        self.main_layout.addWidget(self.dropdowns_container)
        self.dropdowns = QVBoxLayout(self.dropdowns_container)
        self.dropdowns.setContentsMargins(0, 0, 0, 0)  # Remove space around layout

        font = QFont("Aerial", 12)
        # font.setBold(True)  # Make the font bold
        heading = QLabel(
            "- - - O p t i o n s - - -  ", alignment=Qt.AlignmentFlag.AlignHCenter
        )
        heading.setFont(font)
        heading.setStyleSheet("color: #FCC419")  # ffd200")
        self.dropdowns.addWidget(heading)
        heading.setObjectName("heading")

        # Create a QFont object for the font size
        font = QFont()
        font.setPointSize(12)

        # Create comboboxes
        self.box1 = QComboBox()
        self.box1.setMaxVisibleItems(30)
        self.box1.setFont(font)
        view1 = ToolTipListView()
        view1.setFont(font)
        view1.setStyleSheet("QListView::item { height: 18px; }")
        view1.setTextElideMode(Qt.ElideRight)
        self.box1.setView(view1)
        self.reset(self.box1, 0)  # Set placeholder
        for category in self.box1_values:
            self.box1.addItem(category)
            self.box1.setItemData(self.box1.count() - 1, category, Qt.ToolTipRole)
        self.box1.currentTextChanged.connect(self.box1_callback)
        self.dropdowns.addWidget(self.box1)

        self.box2 = QComboBox()
        self.box2.setMaxVisibleItems(30)
        self.box2.setFont(font)
        view2 = ToolTipListView()
        view2.setFont(font)
        view2.setStyleSheet("QListView::item { height: 18px; }")
        view2.setTextElideMode(Qt.ElideRight)
        self.box2.setView(view2)
        self.reset(self.box2, 1)  # Set placeholder
        self.box2.currentTextChanged.connect(self.box2_callback)
        self.dropdowns.addWidget(self.box2)

        self.box3 = QComboBox()
        self.box3.setMaxVisibleItems(30)
        self.box3.setFont(font)
        view3 = ToolTipListView()
        view3.setFont(font)
        view3.setStyleSheet("QListView::item { height: 18px; }")
        view3.setTextElideMode(Qt.ElideRight)
        self.box3.setView(view3)
        self.reset(self.box3, 2)  # Set placeholder
        self.box3.currentTextChanged.connect(self.box3_callback)  # New connection
        self.dropdowns.addWidget(self.box3)

        # Increase the height of the QLineEdit
        self.line_edit = QLineEdit()
        self.line_edit.setMinimumHeight(18)  # Change this to adjust the height
        self.line_edit.setFont(font)  # This will increase the text size
        self.line_edit.installEventFilter(self)
        self.line_edit.setText("Type Something Here")  # Set the starting text

        # Increase the text size in the listbox
        self.list_view = ToolTipListView()
        self.list_view.setFont(font)  # This will increase the text size

        self.model = QStringListModel()
        self.list_view.setModel(self.model)
        self.line_edit.textChanged.connect(self.search_books)
        self.list_view.clicked.connect(self.item_clicked)

        self.dropdowns.addWidget(self.line_edit)
        self.dropdowns.addWidget(self.list_view)

        # Make the listbox expand to the status bar
        self.list_view.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Expanding)

        self.scroll_area = QScrollArea()
        self.main_layout.addWidget(self.scroll_area)

        self.scroll_widget = QWidget()
        self.scroll_area.setWidget(self.scroll_widget)
        self.scroll_area.setWidgetResizable(True)  # Make the scroll area resizable

        self.grid_layout = QGridLayout(self.scroll_widget)
        self.grid_layout.setContentsMargins(0, 0, 0, 0)  # Remove space around layout

        self.timer = QTimer(self)
        self.timer.timeout.connect(self.checkSize)  # Connect to checkSize method
        self.timer.start(100)  # Call checkSize every 2 seconds

    def reset(self, box, index):
        placeholder = self.placeholders[index]
        box.blockSignals(True)
        box.clear()
        box.addItem(placeholder)
        box.setCurrentIndex(0)
        box.blockSignals(False)

    def load_data(self):
        # Clear displayed widgets
        for i in reversed(range(self.grid_layout.count())):
            widget_to_remove = self.grid_layout.itemAt(i).widget()
            if widget_to_remove is not None:
                self.grid_layout.removeWidget(widget_to_remove)  # remove from layout
                widget_to_remove.setParent(None)  # remove from gui

        # Display selected widgets
        for i, (title,) in enumerate(self.books):
            image_path = os.path.join("Anderson eBooks\\Covers", title + ".png")
            item_widget = HoverHighlightWidget(self)

            item_widget.description = title
            item_layout = QHBoxLayout(item_widget)
            item_layout.setContentsMargins(3, 3, 5, 5)  # Remove space around the layout

            image_label = QLabel()
            pixmap = QPixmap(image_path)
            if pixmap.isNull():
                image_label.setText("Failed to load image")
            else:
                pixmap = pixmap.scaled(175 * 0.60, 225 * 0.60, Qt.KeepAspectRatio)
                image_label.setPixmap(pixmap)
            item_layout.addWidget(image_label)

            description_label = QLabel(title)
            font = QFont("Arial", 11)
            description_label.setFont(font)
            description_label.setWordWrap(True)
            description_label.setFixedSize(175 * 0.60, 225 * 0.60)  # Fixed size desc
            item_layout.addWidget(description_label)

            cols = self.C_NOW
            self.grid_layout.addWidget(item_widget, i // cols, i % cols)

        # Add spacers to push all widgets to the top left
        if self.books:
            self.grid_layout.addItem(
                QSpacerItem(0, 0, QSizePolicy.Expanding, QSizePolicy.Expanding),
                i // cols + 1,
                i % cols,
            )
            self.grid_layout.addItem(
                QSpacerItem(0, 0, QSizePolicy.Expanding, QSizePolicy.Expanding),
                i // cols,
                i % cols + 1,
            )

    def populate_box1(self):
        self.c.execute("SELECT DISTINCT category FROM categories ORDER BY category ASC")
        categories = self.c.fetchall()
        self.box1_values = []
        for category in categories:
            self.box1_values.append(category[0])
        return self.box1_values

    def box1_callback(self, choice):
        self.reset(self.box2, 1)
        self.reset(self.box3, 2)
        self.line_edit.clear()
        self.line_edit.setText("Type Something Here")

        # Fetch the subjects for category and populate box2
        self.c.execute(
            "SELECT DISTINCT subject FROM subjects WHERE category_id = (SELECT id FROM categories WHERE category = ?)",
            (choice,),
        )
        subjects = self.c.fetchall()
        self.box2.blockSignals(True)
        for subject in subjects:
            self.box2.addItem(subject[0])
        self.box2.blockSignals(False)

    def box2_callback(self, choice):
        self.reset(self.box3, 2)
        self.line_edit.clear()
        self.line_edit.setText("Type Something Here")
        # Fetch the books for subject and populate box3
        self.c.execute(
            "SELECT title FROM books WHERE subject_id = (SELECT id FROM subjects WHERE subject = ?)",
            (choice,) if isinstance(choice, str) else choice,
        )
        self.books = self.c.fetchall()
        self.box3.blockSignals(True)
        for book in self.books:
            self.box3.addItem(book[0])
        self.box3.blockSignals(False)
        self.load_data()

    def box3_callback(self, choice):  # New method
        self.BookName = choice
        self.getPDF(self.BookName)

    def item_clicked(self, index):
        self.BookName = index.data()
        self.getPDF(self.BookName)

    def getPDF(self, BookName):
        if BookName:
            image_path = os.path.join("Anderson eBooks\\Covers", BookName + ".png")
            pdf_path = os.path.join("Anderson eBooks", BookName + ".pdf")

            msgBox = QMessageBox()
            msgBox.setWindowTitle("Selected Book")
            msgBox.setText("Would you like to read:\n\n" + BookName)
            msgBox.setIconPixmap(QPixmap(image_path))
            msgBox.setStandardButtons(QMessageBox.Cancel | QMessageBox.Ok)
            msgBox.setDefaultButton(QMessageBox.Ok)

            # Set the stylesheet
            msgBox.setStyleSheet(
                """
                QLabel{
                    font-size: 24px;
                }
                QPushButton{
                    min-height: 30px;
                    min-width: 70px;
                    font-size: 16px;
                }
            """
            )

            returnValue = msgBox.exec()
            if returnValue == QMessageBox.Ok:
                webbrowser.open_new(pdf_path)

    def search_books(self, search_term):
        # Clear the list_view if there's no data in the entry
        if not search_term:
            self.model.setStringList([])
            return

        # Only load data if the length of search_term is greater than 1
        if len(search_term) > 1:
            self.c.execute(
                "SELECT title FROM books WHERE title LIKE ? ORDER BY title COLLATE NOCASE",
                ("%" + search_term + "%",),
            )
            self.books = self.c.fetchall()
            self.model.setStringList([title[0] for title in self.books])
            self.load_data()

    def eventFilter(self, source, event):
        if (source is self.line_edit) and (event.type() == QEvent.FocusIn):
            self.box3.clear()
            self.box1.setCurrentIndex(0)
            self.reset(self.box2, 1)
            self.reset(self.box3, 2)
            self.line_edit.setText("")
        return super(MainWindow, self).eventFilter(source, event)

    def checkSize(self):
        # print("check")
        if self.C_WAS != self.C_NOW:
            # print("change", self.C_WAS, self.C_NOW)
            self.C_WAS = self.C_NOW
            if self.books:
                self.load_data()

    def resizeEvent(self, event):  # 14	Widget's size changed (QResizeEvent).
        super().resizeEvent(event)
        size = event.size()
        width = size.width()
        height = size.height()
        self.C_NOW = int((width - self.W_BASE) / self.W_ITEM)
        window.get_status_bar().showMessage(f"{width} x {height}  C:{self.C_NOW}")


# Start the application
app = QApplication(sys.argv)
app.setStyleSheet(
    """
    * {
        background-color: qlineargradient(spread:repeat, x1:1, y1:0, x2:1, y2:1, stop:0.00480769 rgba(3, 50, 76, 255), stop:0.293269 rgba(6, 82, 125, 255), stop:0.514423 rgba(8, 117, 178, 255), stop:0.745192 rgba(7, 108, 164, 255), stop:1 rgba(3, 51, 77, 255));
        color: #FFFFFF;
        border: none;
    }

    QComboBox::down-arrow {
        image: url(Assets/arrow.png);
    }

    QComboBox::item:hover, QListView::item:hover {
        border: 3px solid red;
    }
    QToolTip { 
        color: #ffffff; 
        border: none; font-size: 16px; 
    }

"""
)

main_window = MainWindow()
window = CustomWindow("Anderson's Library", main_window)
window.showMaximized()
sys.exit(app.exec())

================
File: Legacy/CustomWindow.py
================
from PySide6.QtWidgets import (
    QApplication,
    QMainWindow,
    QLabel,
    QPushButton,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QSpacerItem,
    QStatusBar,
    QSizePolicy,
    QDialog,
)
from PySide6.QtGui import QPalette, QColor, QIcon, QPixmap, QFont, QMouseEvent, QCursor
from PySide6.QtCore import Qt, QEvent, QPoint, QSize


class CustomWindow(QMainWindow):
    def __init__(self, title, central_widget=None):
        super().__init__()

        self.setWindowTitle(title)
        self.setWindowFlags(Qt.FramelessWindowHint)

        # Create custom title bar
        self.title_bar = CustomTitleBar(self, title)

        # Create status bar and set it separately from the central widget
        self.status_bar = QStatusBar()
        self.status_bar.setStyleSheet("background-color: #780000; color: white;")
        self.setStatusBar(self.status_bar)

        # Create a widget for the title bar and set its background color
        self.title_bar_widget = QWidget()
        self.title_bar_widget.setStyleSheet("background-color: #780000;")
        self.title_bar_layout = QVBoxLayout()
        self.title_bar_widget.setLayout(self.title_bar_layout)

        # Add the custom title bar to the title bar widget
        self.title_bar_layout.addWidget(self.title_bar)

        # Set the title bar widget as the QMainWindow's menu bar
        self.setMenuWidget(self.title_bar_widget)

        # Add the passed widget to the layout
        if central_widget:
            self.setCentralWidget(central_widget)

        self.setMouseTracking(True)
        self.resize_origin = QPoint()

    def get_content_widget(self):
        return self.centralWidget()

    def get_status_bar(self):
        return self.status_bar

    def event(self, event):
        if (
            event.type() == QEvent.MouseButtonPress
            and event.buttons() == Qt.LeftButton
            and self.status_bar.underMouse()
        ):
            self.resize_origin = event.position()

        if (
            event.type() == QEvent.MouseMove
            and event.buttons() == Qt.LeftButton
            and self.resize_origin is not None
        ):
            delta = event.position() - self.resize_origin
            new_width = self.width() + delta.x()
            new_height = self.height() + delta.y()

            screen_size = QApplication.primaryScreen().availableSize()
            new_x = self.x() + new_width
            new_y = self.y() + new_height

            if new_x > screen_size.width():
                new_width = screen_size.width() - self.x()
            if new_y > screen_size.height():
                new_height = screen_size.height() - self.y()

            self.resize(new_width, new_height)
            self.resize_origin = event.position()

        if event.type() == QEvent.MouseButtonRelease:
            self.resize_origin = None

        return super().event(event)


class AboutDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)

        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Dialog)

        self.setStyleSheet("background-color: #780000;")

        self.label = QLabel(
            "Another Intuitive Product\nfrom the folks at\nBowersWorld.com"
        )
        self.label.setStyleSheet("color: #ffd200; font: bold 24px; text-align: center;")
        self.label.setAlignment(Qt.AlignCenter)

        pixmap = QPixmap("Assets/BowersWorld.png").scaled(170, 170, Qt.KeepAspectRatio)

        self.icon_label = QLabel()
        self.icon_label.setPixmap(pixmap)

        self.copyright_label = QLabel("\u00A9")
        self.copyright_label.setContentsMargins(0, 160, 0, 0)
        self.copyright_label.setStyleSheet(
            "color: #ffd200; font: bold 24px; text-align: center;"
        )

        self.icon_layout = QHBoxLayout()
        self.icon_layout.addWidget(QLabel("   "))
        self.icon_layout.addWidget(self.icon_label)
        self.icon_layout.addWidget(self.copyright_label)

        self.icon_layout.insertStretch(0, 1)
        self.icon_layout.insertStretch(4, 1)

        self.layout = QVBoxLayout()
        self.layout.setContentsMargins(15, 15, 15, 15)
        self.setLayout(self.layout)

        self.layout.addWidget(self.label)
        self.layout.addLayout(self.icon_layout)

    def showEvent(self, event):
        if self.parent() is not None:
            parent_rect = self.parent().frameGeometry()
            self.move(parent_rect.center() - self.rect().center())
        super().showEvent(event)


class IconLabel(QLabel):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.about_dialog = AboutDialog(self.window())
        self.setMouseTracking(True)

    def enterEvent(self, e):
        if e.type() == QEvent.Enter:
            self.about_dialog.move(QCursor.pos())
            self.about_dialog.show()

    def leaveEvent(self, e):
        if e.type() == QEvent.Leave:
            self.about_dialog.hide()


class CustomTitleBar(QWidget):
    def __init__(self, parent, title):
        super().__init__(parent)
        self.parent = parent
        self.setFixedHeight(24)
        self.setStyleSheet("background-color: #780000; color: white;")

        self.draggable = False
        self.draggable_offset = QPoint()

        self.layout = QHBoxLayout(self)
        self.layout.setContentsMargins(0, 0, 0, 0)

        self.icon_label = IconLabel(self)
        self.icon_label.setPixmap(
            QPixmap("Assets/icon.png").scaled(30, 30, Qt.KeepAspectRatio)
        )

        self.title_label = QLabel(self)
        self.title_label.setText(title)
        self.title_label.setStyleSheet("font: 12pt Arial;")

        self.spacer = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        # Tooltip styles for the buttons
        tooltip_stylesheet = """
        QToolTip {
            font-size: 16px;
        }
        """

        self.min_button = QPushButton(self)
        pixmap = QPixmap("Assets/hide.png").scaled(34, 34, Qt.KeepAspectRatio)
        self.min_button.setIcon(QIcon(pixmap))
        self.min_button.setIconSize(QSize(34, 34))
        self.min_button.setFixedSize(28, 28)
        self.min_button.clicked.connect(self.parent.showMinimized)

        self.min_button.setStyleSheet(
            """
        QPushButton {
            background-color: none;
        }
        QPushButton:hover {
            background-color: #FFFFFF;
        }
        QPushButton:pressed {
            background-color: #800000;
        }
        """
            + tooltip_stylesheet
        )
        self.min_button.setToolTip("Hide")

        self.max_button = QPushButton(self)
        pixmap = QPixmap("Assets/Max.png").scaled(30, 30, Qt.KeepAspectRatio)
        self.max_button.setIcon(QIcon(pixmap))
        self.max_button.setIconSize(QSize(30, 30))
        self.max_button.setFixedSize(28, 28)
        self.max_button.clicked.connect(self.toggle_maximize)
        self.max_button.setStyleSheet(
            """
        QPushButton {
            background-color: none;
        }
        QPushButton:hover {
            background-color: #FFFFFF;
        }
        QPushButton:pressed {
            background-color: #800000;
        }
        """
            + tooltip_stylesheet
        )
        self.max_button.setToolTip("Max/Min")

        self.exit_button = QPushButton(self)
        pixmap = QPixmap("Assets/exit.png").scaled(30, 30)
        self.exit_button.setIcon(QIcon(pixmap))
        self.exit_button.setIconSize(QSize(30, 24))
        self.exit_button.setFixedSize(30, 24)
        self.exit_button.clicked.connect(self.parent.close)
        self.exit_button.setStyleSheet(
            """
        QPushButton {s
            background-color: none;
        }
        QPushButton:hover {
            background-color: #FFFFFF;
        }
        QPushButton:pressed {
            background-color: #800000;
        }
        """
            + tooltip_stylesheet
        )
        self.exit_button.setToolTip("Exit")

        self.layout.addWidget(self.icon_label)
        self.layout.addWidget(self.title_label)
        self.layout.addItem(self.spacer)
        self.layout.addWidget(self.min_button)
        self.layout.addWidget(self.max_button)
        self.layout.addWidget(self.exit_button)

        self.normal_size = self.parent.size()

    def toggle_maximize(self):
        if self.parent.isFullScreen():
            self.parent.showNormal()
            self.parent.resize(self.normal_size)
        else:
            self.normal_size = self.parent.size()
            self.parent.showFullScreen()

    def mousePressEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.draggable = True
            self.draggable_offset = (
                event.globalPosition().toPoint() - self.parent.frameGeometry().topLeft()
            )

    def mouseMoveEvent(self, event: QMouseEvent):
        if self.draggable:
            new_position = event.globalPosition().toPoint() - self.draggable_offset
            self.parent.move(new_position)

    def mouseReleaseEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.draggable = False

    def mouseDoubleClickEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.toggle_maximize()


if __name__ == "__main__":
    import sys

    app = QApplication(sys.argv)

    # Increase size of tool tips
    app.setStyleSheet(
        """
    QToolTip {
        font-size: px;
    }
    """
    )

    window = CustomWindow("Test Window")
    window.showMaximized()
    sys.exit(app.exec())

================
File: README.md
================
# 📚 Anderson's Library - Professional Edition

**A modular, professional digital library management system built with Python and PySide6.**

## 🏔️ Project Himalaya - BowersWorld.com

*Generated: 2025-07-04*  
*Standard: AIDEV-PascalCase-1.8*

---

## ✨ Features

- 📖 **Digital Library Management** - Organize and browse thousands of PDF books
- 🔍 **Intelligent Search** - Find books by title, category, or subject  
- 📂 **Category Organization** - Hierarchical category and subject structure
- 🎨 **Beautiful Interface** - Custom-designed responsive interface
- 🏗️ **Modular Architecture** - Professional, maintainable code structure
- 🔒 **Data Integrity** - SQLite database with proper normalization

## 🚀 Quick Start

### Prerequisites
- Python 3.8+ 
- PySide6
- SQLite database with your book collection

### Installation
```bash
# Clone the repository
git clone https://github.com/YourUsername/andersons-library.git
cd andersons-library

# Install dependencies
pip install -r requirements.txt

# Run the application
python AndersonLibrary.py
```

## 🏗️ Architecture

### Modular Structure
```
Source/
├── Data/              # Data models and validation
├── Core/              # Business logic and services  
├── Interface/         # UI components and widgets
├── Utils/             # Utility functions
└── Framework/         # Reusable framework components
```

### Key Components
- **DatabaseManager** - Clean database operations
- **BookService** - Business logic for book operations
- **FilterPanel** - Category and search interface
- **BookGrid** - Responsive book display grid
- **MainWindow** - Application orchestrator

## 📊 Database Schema

The application uses a normalized SQLite database:
- **Categories** - Book categories (Programming, Science, etc.)
- **Subjects** - Subcategories within each category
- **Books** - Individual book records with metadata

## 🎯 Design Standards

This project follows **AIDEV-PascalCase-1.8** standards:
- ✅ PascalCase naming throughout
- ✅ Comprehensive file headers
- ✅ ~300 line module limit
- ✅ Single responsibility principle
- ✅ Proper error handling and logging

## 🧪 Testing

```bash
# Run unit tests
pytest Tests/Unit/

# Run integration tests  
pytest Tests/Integration/

# Run all tests with coverage
pytest --cov=Source Tests/
```

## 🔧 Development

### Adding New Features
1. Create focused modules in appropriate Source/ subdirectory
2. Follow Design Standard v1.8 naming and structure
3. Add comprehensive tests in Tests/ directory
4. Update documentation

### Code Quality
```bash
# Format code
black Source/

# Check style
flake8 Source/

# Type checking (future)
mypy Source/
```

## 📁 Project Structure

```
├── AndersonLibrary.py          # Main application entry point
├── Source/                     # Source code packages
│   ├── Data/                  # Data models and schemas  
│   ├── Core/                  # Business logic services
│   ├── Interface/             # UI components
│   ├── Utils/                 # Utility functions
│   └── Framework/             # Reusable framework
├── Assets/                    # Images, icons, resources
├── Config/                    # Configuration files
├── Data/                      # Database and data files
├── Scripts/                   # Utility and maintenance scripts
├── Tests/                     # Test suites
├── Docs/                      # Documentation
└── requirements.txt           # Python dependencies
```

## 🌟 Future Roadmap

- 🌐 **Web Interface** - Convert to web application
- 📱 **Mobile App** - Responsive mobile interface  
- 🔍 **Full-Text Search** - Search within PDF content
- 🤖 **AI Integration** - Intelligent book recommendations
- ☁️ **Cloud Sync** - Multi-device synchronization

## 📝 License

© 2025 BowersWorld.com - Project Himalaya  
Licensed under MIT License

## 🤝 Contributing

1. Fork the repository
2. Create feature branch (`git checkout -b feature/AmazingFeature`)
3. Follow Design Standard v1.8
4. Commit changes (`git commit -m 'Add AmazingFeature'`)
5. Push to branch (`git push origin feature/AmazingFeature`)
6. Open Pull Request

## 📞 Support

- **Documentation:** `/Docs` directory
- **Issues:** GitHub Issues
- **Contact:** BowersWorld.com

---

**Built with ❤️ using AIDEV-PascalCase-1.8 Standards**

================
File: Results.txt
================
(.venv) ~/Desktop/Andy$ /home/herb/Desktop/Andy/.venv/bin/python /home/herb/Desktop/Andy/Updates/final_import_fix.py
🏔️ Anderson's Library - Final Import Fix
==================================================
📦 Adding missing QSizePolicy import
💡 This should be the FINAL fix needed!
==================================================
🔧 Anderson's Library - Final Import Fix
==================================================
📦 Adding missing QSizePolicy import to MainWindow.py
🔍 Checking current imports...
✅ Added QSizePolicy to imports at line 17
✅ Import fix applied successfully!

🔍 Validating imports...
✅ All required imports found!

==================================================
🎉 FINAL IMPORT FIX SUCCESSFUL!
==================================================
🚀 Now try running: python AndersonLibrary.py
🎉 Anderson's Library should fully launch!
🏔️ Welcome to Professional Modular Architecture!

🔍 Checking for other potential import issues...
⚠️  Potentially missing imports: QPushButton, QTextEdit, QDialog, QFileDialog
(.venv) ~/Desktop/Andy$ /home/herb/Desktop/Andy/.venv/bin/python /home/herb/Desktop/Andy/AndersonLibrary.py
🏔️ Anderson's Library - Professional Edition
==================================================
📚 Digital Library Management System
🎯 Project Himalaya - BowersWorld.com
⚡ Modular Architecture - Design Standard v1.8
==================================================
📁 Checking file structure...
   ✅ Source/Data/DatabaseModels.py
   ✅ Source/Core/DatabaseManager.py
   ✅ Source/Core/BookService.py
   ✅ Source/Interface/FilterPanel.py
   ✅ Source/Interface/BookGrid.py
   ✅ Source/Interface/MainWindow.py
   ✅ Source/Interface/CustomWindow.py
📊 Files: 7 present, 0 missing
🗄️  Testing database connection...
   ✅ Found database: Assets/my_library.db
🐍 Testing Python imports...
   ✅ PySide6 available
==================================================
✅ ENVIRONMENT VALIDATION PASSED
🚀 Starting Anderson's Library...
==================================================
❌ Startup Error: invalid syntax (MainWindow.py, line 17)
ERROR:root:Application startup failed: invalid syntax (MainWindow.py, line 17)
(.venv) ~/Desktop/Andy$ 
================
File: RunAnderson.py
================
#!/usr/bin/env python3
# File: RunAnderson.py
# Path: RunAnderson.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  16:35PM
"""
Description: Anderson's Library - Professional Edition Launcher
Main entry point for the modular Anderson's Library application.
Provides clean startup and comprehensive error handling.

Purpose: Serves as the primary executable for Anderson's Library,
coordinating application startup and initialization with professional error handling.
"""

import sys
import os
import logging
from pathlib import Path
cdef SetupPythonPath():
    """Add Source directory to Python path for imports"""
    SourcePath = Path(__file__).parent / "Source"
    if SourcePath.exists():
        sys.path.insert(0, str(SourcePath))
        return True
    else:
        print(f"❌ Source directory not found: {SourcePath}")
        print("📁 Make sure the modular structure is set up correctly")
        return False

def ConfigureLogging():
    """Set up logging for the application"""
    try:
        # Create logs directory if it doesn't exist
        LogsDir = Path("Logs")
        LogsDir.mkdir(exist_ok=True)
        
        # Configure logging
        logging.basicConfig(
            level=logging.INFO,
            format='[%(asctime)s] %(name)s - %(levelname)s: %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler(LogsDir / 'anderson_library.log', mode='a')
            ]
        )
        
        return True
    except Exception as Error:
        print(f"⚠️ Could not configure logging: {Error}")
        # Continue without file logging
        logging.basicConfig(level=logging.INFO)
        return False

def ValidateEnvironment():
    """Validate the environment before starting"""
    Issues = []
    
    # Check for required directories
    RequiredDirs = ["Source", "Source/Data", "Source/Core", "Source/Interface"]
    for Dir in RequiredDirs:
        if not Path(Dir).exists():
            Issues.append(f"Missing directory: {Dir}")
    
    # Check for essential files
    EssentialFiles = [
        "Source/Data/DatabaseModels.py",
        "Source/Core/DatabaseManager.py",
        "Source/Core/BookService.py",
        "Source/Interface/MainWindow.py"
    ]
    
    for File in EssentialFiles:
        if not Path(File).exists():
            Issues.append(f"Missing file: {File}")
    
    # Check for database
    DatabasePaths = [
        "Assets/my_library.db",
        "Data/Databases/my_library.db",
        "my_library.db"
    ]
    
    DatabaseFound = any(Path(db).exists() for db in DatabasePaths)
    if not DatabaseFound:
        Issues.append("No database found at expected locations")
    
    return Issues

def ShowStartupBanner():
    """Display startup banner"""
    print("🏔️ Anderson's Library - Professional Edition")
    print("=" * 50)
    print("📚 Digital Library Management System")
    print("🎯 Project Himalaya - BowersWorld.com")
    print("⚡ Modular Architecture - Design Standard v1.8")
    print("=" * 50)

def Main() -> int:
    """
    Main application entry point with comprehensive error handling.
    
    Returns:
        Application exit code (0 for success, 1 for error)
    """
    try:
        # Show startup banner
        ShowStartupBanner()
        
        # Set up Python path
        if not SetupPythonPath():
            return 1
        
        # Configure logging
        ConfigureLogging()
        
        # Validate environment
        Issues = ValidateEnvironment()
        if Issues:
            print("❌ Environment validation failed:")
            for Issue in Issues:
                print(f"   • {Issue}")
            print("\n💡 Run TestImports.py to diagnose issues")
            return 1
        
        print("✅ Environment validation passed")
        print("🚀 Starting Anderson's Library...")
        print()
        
        # Import and run the application
        try:
            from Interface.MainWindow import RunApplication
        except ImportError as Error:
            print(f"❌ Failed to import MainWindow: {Error}")
            print("📝 Make sure all modules are in the correct locations")
            print("🧪 Run TestImports.py for detailed diagnostics")
            return 1
        
        # Run the application
        print("📖 Launching Anderson's Library interface...")
        ExitCode = RunApplication()
        
        print("\n👋 Anderson's Library closed successfully")
        logging.info("Application closed normally")
        return ExitCode
        
    except KeyboardInterrupt:
        print("\n⚠️ Application interrupted by user")
        logging.info("Application interrupted by user")
        return 0
        
    except Exception as Error:
        print(f"\n❌ Critical Error: {Error}")
        logging.exception("Critical application error")
        print("\n🔧 Troubleshooting suggestions:")
        print("   • Check that all module files are present")
        print("   • Verify database file exists and is accessible")
        print("   • Run TestImports.py for detailed diagnostics")
        print("   • Check the log file in Logs/anderson_library.log")
        return 1

def ShowUsage():
    """Show usage information"""
    print("📚 Anderson's Library - Professional Edition")
    print()
    print("USAGE:")
    print("  python RunAnderson.py")
    print()
    print("REQUIREMENTS:")
    print("  • Python 3.8+")
    print("  • PySide6")
    print("  • SQLite database (my_library.db)")
    print("  • Complete modular source structure")
    print()
    print("DIAGNOSTICS:")
    print("  python TestImports.py    - Test module imports")
    print()
    print("SETUP:")
    print("  python QuickSetup.py     - Create basic structure")
    print()
    print("For more information, see README.md")

if __name__ == "__main__":
    # Handle command line arguments
    if len(sys.argv) > 1:
        if sys.argv[1] in ['-h', '--help', 'help']:
            ShowUsage()
            sys.exit(0)
        elif sys.argv[1] in ['-v', '--version', 'version']:
            print("Anderson's Library Professional Edition v2.0")
            print("Built with Design Standard v1.8")
            sys.exit(0)
    
    # Run the application
    ExitCode = Main()
    sys.exit(ExitCode)

================
File: Scripts/Deployment/GitHubAutoUpdate.py
================
# GitHub Auto-Update Script for BowersWorld.com
# Author: Herb Bowers - Project Himalaya
# Created: 2025-06-22  17:15
# Path: /scripts/AutoUpdateGitHub.py

import os
import sys
import subprocess
import json
import time
from datetime import datetime
from pathlib import Path
import argparse


class GitHubAutoUpdater:
    def __init__(self, repo_path=None, remote_name="origin", branch="main"):
        """
        Initialize the GitHub auto-updater
        
        Args:
            repo_path: Path to your local repository (if None, uses current directory)
            remote_name: Git remote name (usually "origin")
            branch: Branch to push to (usually "main")
        """
        self.repo_path = Path(repo_path) if repo_path else Path.cwd()
        self.remote_name = remote_name
        self.branch = branch
        
        # Ensure we're in a git repository
        if not (self.repo_path / '.git').exists():
            raise Exception(f"Not a git repository: {self.repo_path}")
    
    def RunGitCommand(self, command):
        """Execute git command and return result"""
        try:
            result = subprocess.run(
                command,
                cwd=self.repo_path,
                shell=True,
                capture_output=True,
                text=True,
                check=True
            )
            return result.stdout.strip()
        except subprocess.CalledProcessError as e:
            print(f"Git command failed: {command}")
            print(f"Error: {e.stderr}")
            raise
    
    def CheckGitStatus(self):
        """Check if there are any changes to commit"""
        try:
            # Check for unstaged changes
            unstaged = self.RunGitCommand("git diff --name-only")
            
            # Check for staged changes
            staged = self.RunGitCommand("git diff --cached --name-only")
            
            # Check for untracked files
            untracked = self.RunGitCommand("git ls-files --others --exclude-standard")
            
            changes = {
                'unstaged': unstaged.split('\n') if unstaged else [],
                'staged': staged.split('\n') if staged else [],
                'untracked': untracked.split('\n') if untracked else []
            }
            
            return changes
        except Exception as e:
            print(f"Error checking git status: {e}")
            return None
    
    def AddFiles(self, files=None):
        """Add files to staging area"""
        if files:
            for file in files:
                self.RunGitCommand(f"git add {file}")
        else:
            # Add all changes
            self.RunGitCommand("git add .")
    
    def CreateCommit(self, message=None, auto_message=True):
        """Create a commit with given message"""
        if not message and auto_message:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            message = f"Auto-update: {timestamp}"
        elif not message:
            raise ValueError("Commit message required when auto_message=False")
        
        self.RunGitCommand(f'git commit -m "{message}"')
        return message
    
    def PushToGitHub(self):
        """Push changes to GitHub"""
        push_command = f"git push {self.remote_name} {self.branch}"
        self.RunGitCommand(push_command)
    
    def AutoUpdate(self, commit_message=None, files=None, verbose=True):
        """
        Complete auto-update workflow: add, commit, push
        
        Args:
            commit_message: Custom commit message (auto-generated if None)
            files: Specific files to add (all changes if None)
            verbose: Print status messages
        """
        if verbose:
            print("🔄 Starting GitHub auto-update...")
        
        try:
            # Check for changes
            changes = self.CheckGitStatus()
            if not changes:
                if verbose:
                    print("❌ Error checking repository status")
                return False
            
            total_changes = len(changes['unstaged']) + len(changes['staged']) + len(changes['untracked'])
            
            if total_changes == 0:
                if verbose:
                    print("✅ No changes detected. Repository is up to date.")
                return True
            
            if verbose:
                print(f"📁 Found {total_changes} changed/new files:")
                for file in changes['unstaged'] + changes['untracked']:
                    if file:  # Skip empty strings
                        print(f"   - {file}")
            
            # Add files
            if verbose:
                print("📤 Adding files to staging area...")
            self.AddFiles(files)
            
            # Create commit
            if verbose:
                print("💾 Creating commit...")
            commit_msg = self.CreateCommit(commit_message)
            
            # Push to GitHub
            if verbose:
                print("🚀 Pushing to GitHub...")
            self.PushToGitHub()
            
            if verbose:
                print(f"✅ Successfully updated GitHub!")
                print(f"   Commit: {commit_msg}")
                print(f"   Branch: {self.branch}")
                print("🌐 GitHub Pages will update in 5-10 minutes")
            
            return True
            
        except Exception as e:
            if verbose:
                print(f"❌ Error during auto-update: {e}")
            return False
    
    def SetupWatchMode(self, watch_directory=None, interval=30):
        """
        Watch for file changes and auto-update
        
        Args:
            watch_directory: Directory to watch (repo root if None)
            interval: Check interval in seconds
        """
        watch_dir = Path(watch_directory) if watch_directory else self.repo_path
        
        print(f"👀 Watching {watch_dir} for changes...")
        print(f"⏰ Check interval: {interval} seconds")
        print("Press Ctrl+C to stop")
        
        last_check = {}
        
        try:
            while True:
                current_check = {}
                changes_detected = False
                
                # Check modification times of files
                for file_path in watch_dir.rglob('*'):
                    if file_path.is_file() and not str(file_path).startswith('.git'):
                        try:
                            mtime = file_path.stat().st_mtime
                            current_check[str(file_path)] = mtime
                            
                            if str(file_path) in last_check:
                                if last_check[str(file_path)] != mtime:
                                    changes_detected = True
                            else:
                                changes_detected = True
                        except:
                            continue
                
                if changes_detected and last_check:  # Skip first run
                    print(f"\n🔔 Changes detected at {datetime.now().strftime('%H:%M:%S')}")
                    if self.AutoUpdate(verbose=True):
                        print("✅ Auto-update completed successfully\n")
                    else:
                        print("❌ Auto-update failed\n")
                
                last_check = current_check
                time.sleep(interval)
                
        except KeyboardInterrupt:
            print("\n👋 Watch mode stopped")


def CreateConfigFile(repo_path="."):
    """Create a configuration file for the auto-updater"""
    config = {
        "repository": {
            "path": str(Path(repo_path).absolute()),
            "remote": "origin",
            "branch": "main"
        },
        "auto_update": {
            "default_message_prefix": "Auto-update",
            "include_timestamp": True,
            "watch_interval": 30
        },
        "excluded_files": [
            ".git/*",
            "*.log",
            "*.tmp",
            "__pycache__/*",
            "node_modules/*"
        ]
    }
    
    config_path = Path(repo_path) / "auto_update_config.json"
    with open(config_path, 'w') as f:
        json.dump(config, f, indent=2)
    
    print(f"✅ Configuration file created: {config_path}")
    return config_path


def main():
    """Main function for command line usage"""
    parser = argparse.ArgumentParser(description="GitHub Auto-Update Script")
    parser.add_argument("--path", default=".", help="Repository path (default: current directory)")
    parser.add_argument("--message", "-m", help="Commit message")
    parser.add_argument("--watch", "-w", action="store_true", help="Watch mode for continuous updates")
    parser.add_argument("--interval", "-i", type=int, default=30, help="Watch interval in seconds")
    parser.add_argument("--setup", action="store_true", help="Create configuration file")
    parser.add_argument("--quiet", "-q", action="store_true", help="Quiet mode (less output)")
    
    args = parser.parse_args()
    
    try:
        if args.setup:
            CreateConfigFile(args.path)
            return
        
        # Initialize updater
        updater = GitHubAutoUpdater(repo_path=args.path)
        
        if args.watch:
            # Watch mode
            updater.SetupWatchMode(interval=args.interval)
        else:
            # Single update
            success = updater.AutoUpdate(
                commit_message=args.message,
                verbose=not args.quiet
            )
            sys.exit(0 if success else 1)
            
    except KeyboardInterrupt:
        print("\n👋 Goodbye!")
        sys.exit(0)
    except Exception as e:
        print(f"❌ Error: {e}")
        sys.exit(1)


# Usage examples and helper functions
class LibraryUpdater:
    """Specialized updater for Anderson's Library files"""
    
    def __init__(self, repo_path="."):
        self.updater = GitHubAutoUpdater(repo_path)
    
    def UpdateLibraryDatabase(self, db_path):
        """Update when library database changes"""
        return self.updater.AutoUpdate(
            commit_message=f"Update library database: {Path(db_path).name}",
            files=[db_path]
        )
    
    def UpdateLibraryPages(self):
        """Update library-specific pages"""
        library_files = [
            "library/index.html",
            "library/app/index.html", 
            "library/auth/*.html",
            "library/js/*.js",
            "library/css/*.css"
        ]
        
        return self.updater.AutoUpdate(
            commit_message="Update Anderson's Library interface",
            files=library_files
        )
    
    def QuickUpdate(self, message="Quick library update"):
        """Quick update of all changes"""
        return self.updater.AutoUpdate(commit_message=message)


if __name__ == "__main__":
    main()

================
File: Scripts/Deployment/GitHubUpdateSite.py
================
# Simple Auto-Update Script for BowersWorld.com
# Author: Herb Bowers - Project Himalaya  
# Created: 2025-06-22  17:30
# Path: /UpdateSite.py

import os
import subprocess
import sys
from datetime import datetime

def RunCommand(command, show_output=True):
    """Run a command and return result"""
    try:
        if show_output:
            print(f"🔄 Running: {command}")
        
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            if show_output and result.stdout:
                print(result.stdout)
            return True
        else:
            print(f"❌ Error: {result.stderr}")
            return False
    except Exception as e:
        print(f"❌ Command failed: {e}")
        return False

def UpdateSite(message=None):
    """Simple function to update GitHub Pages site"""
    
    print("🚀 BowersWorld.com Auto-Update Starting...")
    print("=" * 50)
    
    # Check if we're in a git repository
    if not os.path.exists('.git'):
        print("❌ Error: Not in a git repository")
        print("   Make sure you're in the BowersWorld-com directory")
        return False
    
    # Check for changes
    print("📋 Checking for changes...")
    result = subprocess.run("git status --porcelain", shell=True, capture_output=True, text=True)
    
    if not result.stdout.strip():
        print("✅ No changes detected. Site is up to date!")
        return True
    
    print("📁 Changes found:")
    changes = result.stdout.strip().split('\n')
    for change in changes:
        print(f"   {change}")
    
    # Create automatic commit message if none provided
    if not message:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message = f"Site update: {timestamp}"
    
    # Add all changes
    print("\n📤 Adding changes...")
    if not RunCommand("git add ."):
        return False
    
    # Commit changes
    print("💾 Creating commit...")
    commit_command = f'git commit -m "{message}"'
    if not RunCommand(commit_command):
        return False
    
    # Push to GitHub
    print("🚀 Pushing to GitHub...")
    if not RunCommand("git push origin main"):
        return False
    
    print("\n" + "=" * 50)
    print("✅ SUCCESS! Site updated successfully!")
    print("🌐 GitHub Pages will update in 5-10 minutes")
    print("🔗 View at: https://callmechewy.github.io/BowersWorld-com/")
    print("=" * 50)
    
    return True

def QuickUpdate():
    """Quick update with automatic message"""
    return UpdateSite()

def CustomUpdate():
    """Update with custom commit message"""
    print("📝 Enter a custom commit message:")
    message = input("Message: ").strip()
    
    if not message:
        print("Using automatic message...")
        return UpdateSite()
    
    return UpdateSite(message)

def main():
    """Main menu for the updater"""
    print("📚 BowersWorld.com Site Updater")
    print("=" * 40)
    print("1. Quick update (automatic message)")
    print("2. Custom update (enter your message)")
    print("3. Exit")
    print("=" * 40)
    
    while True:
        try:
            choice = input("Choose option (1-3): ").strip()
            
            if choice == "1":
                QuickUpdate()
                break
            elif choice == "2":
                CustomUpdate()
                break
            elif choice == "3":
                print("👋 Goodbye!")
                break
            else:
                print("❌ Invalid choice. Please enter 1, 2, or 3.")
        except KeyboardInterrupt:
            print("\n👋 Goodbye!")
            break
        except Exception as e:
            print(f"❌ Error: {e}")
            break

# Direct usage functions
def UpdateLibrary():
    """Update library-specific changes"""
    return UpdateSite("Update Anderson's Library")

def UpdateMainSite():
    """Update main site changes"""
    return UpdateSite("Update Project Himalaya site")

def UpdateDatabase():
    """Update when database changes"""
    return UpdateSite("Update library database")

if __name__ == "__main__":
    # Check for command line arguments
    if len(sys.argv) > 1:
        if sys.argv[1] == "--quick":
            QuickUpdate()
        elif sys.argv[1] == "--library":
            UpdateLibrary()
        elif sys.argv[1] == "--main":
            UpdateMainSite()
        elif sys.argv[1] == "--database":
            UpdateDatabase()
        elif sys.argv[1] == "--message" and len(sys.argv) > 2:
            UpdateSite(" ".join(sys.argv[2:]))
        else:
            print("Usage:")
            print("  python update_site.py               # Interactive menu")
            print("  python update_site.py --quick       # Quick update")
            print("  python update_site.py --library     # Library update")
            print("  python update_site.py --main        # Main site update")
            print("  python update_site.py --database    # Database update")
            print("  python update_site.py --message 'Your message'")
    else:
        # Run interactive menu
        main()

================
File: Scripts/Deployment/UpdatePopulate.py
================
# File: CliveJob.py
# Path: ProjectHimalaya/UpdateFiles.py
# Standard: AIDEV-PascalCase-1.7
# Created: 2025-06-05
# Last Modified: 2025-06-26  17:45 PM
"""
Description: Clive's Job – Himalaya-standard update/move/archive utility.
Processes Updates folder, reads header for intended path, enforces PascalCase for all
created directories and files (unless ecosystem exception), archives old copies,
generates audit/status report, with full error handling, logging, and audit trail.

Fixed: Now ignores base directory from header paths and uses relative paths from current directory.
Fixed: Regex now handles both comment-style (# Path:) and docstring-style (Path:) headers.
Fixed: Better handling of absolute paths with leading slashes.
"""

import os
import re
import shutil
import logging
from datetime import datetime

# --- CONSTANTS ---
UPDATES_DIR = 'Updates'
ARCHIVE_DIR = 'Archive'
DOCS_BASE = 'Docs'
DOCS_UPDATES = os.path.join(DOCS_BASE, 'Updates')
DATE_FMT = "%Y-%m-%d"
TS_FMT = "%Y-%m-%d_%H-%M-%S"

logging.basicConfig(
    level=logging.INFO,
    format='[CliveJob] %(levelname)s: %(message)s'
)

def ToPascalCase(Segment: str) -> str:
    """
    Converts any file or directory segment to Himalaya PascalCase.
    Preserves extension (lowercase), applies PascalCase to base.
    Preserves already-good PascalCase filenames.
    """
    # Ecosystem exceptions
    if Segment in ('__init__.py', 'setup.py'):
        return Segment

    # Handle file extension (only split at LAST dot)
    if '.' in Segment and not Segment.startswith('.'):
        Base, Ext = Segment.rsplit('.', 1)
        Ext = Ext.lower()
    else:
        Base, Ext = Segment, ''

    # Check if Base is already in good PascalCase format
    if IsAlreadyPascalCase(Base):
        logging.info(f"Preserving already-good PascalCase: '{Base}'")
        return f"{Base}.{Ext}" if Ext else Base

    # Remove all non-alphanumeric separators, PascalCase the rest
    Words = re.split(r'[\s_\-]+', Base)
    Pascal = ''.join(Word.capitalize() for Word in Words if Word)

    return f"{Pascal}.{Ext}" if Ext else Pascal

def IsAlreadyPascalCase(Text: str) -> bool:
    """
    Check if text is already in acceptable PascalCase format.
    Returns True if the text should be preserved as-is.
    """
    # Must start with uppercase letter
    if not Text or not Text[0].isupper():
        return False
    
    # Must be all alphanumeric
    if not Text.isalnum():
        return False
    
    # Check for reasonable PascalCase pattern:
    # - Starts with uppercase
    # - Has at least one more uppercase letter (indicating word boundaries)
    # - No consecutive uppercase letters (avoid ALL_CAPS)
    uppercase_count = sum(1 for c in Text if c.isupper())
    
    # If it's all one word (like "Script"), allow it
    if len(Text) <= 8 and uppercase_count == 1:
        return True
    
    # For longer names, require multiple uppercase letters (PascalCase pattern)
    # but not too many (avoid ALLCAPS)
    if uppercase_count >= 2 and uppercase_count <= len(Text) // 2:
        # Check for consecutive uppercase (avoid "XMLHTTPRequest" style)
        consecutive_upper = any(Text[i].isupper() and Text[i+1].isupper() 
                               for i in range(len(Text)-1))
        if not consecutive_upper:
            return True
    
    return False

def PascalCasePath(Path: str) -> str:
    """
    Applies ToPascalCase to every segment of a path (directories and filename).
    """
    Path = Path.replace('\\', '/')
    Segments = Path.split('/')
    PascalSegments = [ToPascalCase(Segment) for Segment in Segments if Segment]
    return '/'.join(PascalSegments)

def ReadHeaderTargetPath(FilePath: str) -> str:
    """
    Extracts intended path from file header ('Path: ...'), removes base directory,
    and PascalCases the remaining relative path.
    
    Example: 'Path: ProjectHimalaya/CliveJob.py' becomes './CliveJob.py'
    Example: 'Path: /BowersWorld-com/SetupSearchSystem_v2.py' becomes './SetupSearchSystem_v2.py'
    """
    try:
        with open(FilePath, 'r', encoding='utf-8') as File:
            for _ in range(15):  # Check first 15 lines for header (docstrings can be longer)
                Line = File.readline()
                if not Line:  # End of file
                    break
                    
                # Match both comment-style and docstring-style paths
                # Handles: # Path: ... OR Path: ... (without #)
                Match = re.match(r'(?:#\s*)?Path:\s*(.+)', Line.strip())
                if Match:
                    FullPath = Match.group(1).strip()
                    logging.info(f"Found header path: '{FullPath}' in {FilePath}")
                    
                    # Remove base directory and use relative path
                    RelativePath = StripBaseDirectory(FullPath)
                    
                    if RelativePath:
                        FinalPath = PascalCasePath(RelativePath)
                        logging.info(f"Processed path: '{FullPath}' -> '{RelativePath}' -> '{FinalPath}'")
                        return FinalPath
                    else:
                        logging.warning(f"Empty path after stripping base directory from: {FullPath}")
                        return None
    except Exception as Error:
        logging.warning(f"Error reading header from {FilePath}: {Error}")
    return None

def StripBaseDirectory(Path: str) -> str:
    """
    Removes the base directory from a path, returning the relative path.
    Handles both relative and absolute paths.
    
    Examples:
    - 'ProjectHimalaya/CliveJob.py' -> 'CliveJob.py'
    - '/BowersWorld-com/SetupSearchSystem_v2.py' -> 'SetupSearchSystem_v2.py' 
    - 'SomeProject/Scripts/AutoUpdate.py' -> 'Scripts/AutoUpdate.py'
    - 'SingleFile.py' -> 'SingleFile.py'
    """
    # Normalize path separators and remove leading/trailing slashes
    Path = Path.replace('\\', '/').strip('/')
    
    # Split into segments
    Segments = [Segment for Segment in Path.split('/') if Segment]
    
    if len(Segments) <= 1:
        # If only one segment (filename only), return as-is
        return Path
    else:
        # Remove first segment (base directory) and rejoin
        RelativeSegments = Segments[1:]
        RelativePath = '/'.join(RelativeSegments)
        logging.info(f"Stripped base directory: '{Path}' -> '{RelativePath}'")
        return RelativePath

def ArchiveExisting(TargetPath: str) -> str:
    """
    If file exists, moves it to Archive dir (PascalCase), adds timestamp.
    """
    if os.path.exists(TargetPath):
        ArchiveDir = os.path.join(ARCHIVE_DIR, os.path.dirname(TargetPath))
        os.makedirs(ArchiveDir, exist_ok=True)
        BaseName = os.path.basename(TargetPath)
        TimeStamp = datetime.now().strftime(TS_FMT)
        if '.' in BaseName and not BaseName.startswith('.'):
            Base, Ext = BaseName.rsplit('.', 1)
            Ext = Ext.lower()
        else:
            Base, Ext = BaseName, ''
        ArchiveName = f"{ToPascalCase(Base)}_{TimeStamp}{'.' + Ext if Ext else ''}"
        ArchivePath = os.path.join(ArchiveDir, ArchiveName)
        shutil.move(TargetPath, ArchivePath)
        logging.info(f"Archived old file: {TargetPath} → {ArchivePath}")
        return ArchivePath
    return None

def MoveOrCopyFile(SourcePath: str, DestPath: str) -> None:
    """
    Moves file, archiving old if needed, ensuring PascalCase on all dirs/files.
    """
    # Ensure destination directory exists
    DestDir = os.path.dirname(DestPath)
    if DestDir:  # Only create if there's a directory component
        os.makedirs(DestDir, exist_ok=True)
    
    # Archive existing file if it exists
    ArchiveExisting(DestPath)
    
    # Move the file
    shutil.move(SourcePath, DestPath)
    logging.info(f"Moved: {SourcePath} → {DestPath}")

def ProcessUpdates() -> None:
    """
    Processes all files in Updates folder with full Himalaya + PascalCase enforcement.
    Now correctly handles relative paths by stripping base directories from headers.
    """
    Today = datetime.now().strftime(DATE_FMT)
    StatusEntries = []
    os.makedirs(DOCS_UPDATES, exist_ok=True)

    # Check if Updates directory exists
    if not os.path.exists(UPDATES_DIR):
        logging.warning(f"Updates directory '{UPDATES_DIR}' does not exist!")
        return

    for FileName in os.listdir(UPDATES_DIR):
        SourcePath = os.path.join(UPDATES_DIR, FileName)
        if not os.path.isfile(SourcePath):
            continue
            
        HeaderPath = ReadHeaderTargetPath(SourcePath)
        FileExt = os.path.splitext(FileName)[1].lower()
        Status = {'File': FileName, 'Result': '', 'Detail': ''}
        
        try:
            # .md/.txt: move to Docs/YYYY-MM-DD/ (original name for doc provenance)
            if FileExt in ['.md', '.txt']:
                DocsDayDir = os.path.join(DOCS_BASE, Today)
                DestPath = os.path.join(DocsDayDir, FileName)
                MoveOrCopyFile(SourcePath, DestPath)
                Status['Result'] = 'Moved to Docs (dated, original filename)'
                Status['Detail'] = DestPath
                
            elif HeaderPath:
                # Use the relative path (base directory already stripped)
                DestPath = HeaderPath
                MoveOrCopyFile(SourcePath, DestPath)
                Status['Result'] = 'Moved by header path (base directory stripped, PascalCase applied)'
                Status['Detail'] = DestPath
                
            else:
                Status['Result'] = 'Skipped (no header path, not doc)'
                Status['Detail'] = f"Kept in: {SourcePath}"
                logging.warning(f"Skipped: {FileName} (no header path and not .md/.txt)")
                
        except Exception as Error:
            Status['Result'] = 'Error'
            Status['Detail'] = str(Error)
            logging.error(f"Failed processing {FileName}: {Error}")
            
        StatusEntries.append(Status)

    # Write status report
    ReportTimeStamp = datetime.now().strftime(TS_FMT)
    ReportPath = os.path.join(DOCS_UPDATES, f'Updates_{ReportTimeStamp}.md')
    
    with open(ReportPath, 'w', encoding='utf-8') as Report:
        Report.write(f"# Updates Status Report — {ReportTimeStamp}\n\n")
        Report.write(f"**Total files processed:** {len(StatusEntries)}\n\n")
        
        # Summary counts
        Moved = sum(1 for entry in StatusEntries if 'Moved' in entry['Result'])
        Skipped = sum(1 for entry in StatusEntries if 'Skipped' in entry['Result'])
        Errors = sum(1 for entry in StatusEntries if 'Error' in entry['Result'])
        
        Report.write(f"**Summary:**\n")
        Report.write(f"- ✅ Moved: {Moved}\n")
        Report.write(f"- ⏭️ Skipped: {Skipped}\n")
        Report.write(f"- ❌ Errors: {Errors}\n\n")
        Report.write(f"**Details:**\n\n")
        
        for Entry in StatusEntries:
            # Add emoji based on result
            if 'Moved' in Entry['Result']:
                Emoji = '✅'
            elif 'Skipped' in Entry['Result']:
                Emoji = '⏭️'
            elif 'Error' in Entry['Result']:
                Emoji = '❌'
            else:
                Emoji = '❓'
                
            Report.write(f"- {Emoji} **{Entry['File']}**: {Entry['Result']}  \n")
            Report.write(f"    `{Entry['Detail']}`\n\n")
            
    print(f"\n[CliveJob] Status report written: {ReportPath}")
    print(f"[CliveJob] Summary - Moved: {Moved}, Skipped: {Skipped}, Errors: {Errors}")

if __name__ == "__main__":
    print("[CliveJob] Himalaya file processor starting...")
    print("[CliveJob] Fixed version - now strips base directories from header paths")
    ProcessUpdates()
    print("[CliveJob] All done. Review status report for details.")

================
File: Scripts/Development/QuickSetup.py
================
#!/usr/bin/env python3
# File: QuickSetup.py
# Path: QuickSetup.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  16:20PM
"""
Description: Quick Setup for Anderson's Library Migration
Fast setup script to create minimal structure for immediate migration testing.
Gets you running with the new modular architecture in under 60 seconds.

Purpose: Creates just the essential directories and __init__.py files needed
to test the new modular architecture right away.
"""

import os
from pathlib import Path


def CreateQuickStructure():
    """Create minimal structure for immediate testing"""
    print("🚀 Anderson's Library - Quick Migration Setup")
    print("=" * 50)
    
    # Essential directories
    Directories = [
        "Source",
        "Source/Data", 
        "Source/Core",
        "Source/Interface"
    ]
    
    # Create directories
    print("📁 Creating directories...")
    for Dir in Directories:
        Path(Dir).mkdir(parents=True, exist_ok=True)
        print(f"   ✅ {Dir}")
    
    # Create essential __init__.py files
    print("\n📄 Creating __init__.py files...")
    InitFiles = [
        "Source/__init__.py",
        "Source/Data/__init__.py", 
        "Source/Core/__init__.py",
        "Source/Interface/__init__.py"
    ]
    
    for InitFile in InitFiles:
        with open(InitFile, 'w') as f:
            f.write('# Anderson\'s Library Package\n')
        print(f"   ✅ {InitFile}")
    
    # Create simple entry point
    print("\n🎯 Creating entry point...")
    EntryPoint = '''#!/usr/bin/env python3
"""Anderson's Library - Quick Start"""

import sys
from pathlib import Path

# Add Source to path
sys.path.insert(0, str(Path(__file__).parent / "Source"))

try:
    from Interface.MainWindow import RunApplication
    sys.exit(RunApplication())
except ImportError as e:
    print(f"❌ Import Error: {e}")
    print("📝 Make sure you've copied all the module files to Source/")
    sys.exit(1)
'''
    
    with open("RunAnderson.py", 'w') as f:
        f.write(EntryPoint)
    
    # Make executable
    if os.name != 'nt':
        os.chmod("RunAnderson.py", 0o755)
    
    print("   ✅ RunAnderson.py")
    
    print("\n🎉 QUICK SETUP COMPLETE!")
    print("\n📋 NEXT STEPS:")
    print("1. Copy the 6 module files to their locations:")
    print("   • DatabaseModels.py     → Source/Data/")
    print("   • DatabaseManager.py    → Source/Core/")
    print("   • BookService.py        → Source/Core/")
    print("   • FilterPanel.py        → Source/Interface/")
    print("   • BookGrid.py           → Source/Interface/")
    print("   • MainWindow.py         → Source/Interface/")
    print("2. Copy CustomWindow.py    → Source/Interface/")
    print("3. Run: python RunAnderson.py")
    print("\n🚀 Ready to test the new architecture!")


if __name__ == "__main__":
    CreateQuickStructure()

================
File: Scripts/Maintenance/generate_thumbnails.py
================
import sqlite3
import os
import logging
from PIL import Image
import fitz  # PyMuPDF

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def generate_thumbnails():
    logging.info(f"Current working directory: {os.getcwd()}")
    db_path = 'Assets/my_library.db'
    thumbnails_base_dir = 'Data/Thumbs/'
    books_base_dir = 'Data/Books/'

    if not os.path.exists(db_path):
        logging.error(f"Database file not found at {db_path}")
        return

    os.makedirs(thumbnails_base_dir, exist_ok=True)

    conn = None
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        cursor.execute("SELECT id, title, FilePath, ThumbnailPath FROM books")
        books = cursor.fetchall()

        logging.info(f"Found {len(books)} books in the database. Generating missing thumbnails...")

        for book_id, title, file_path, thumbnail_path in books:
            if not file_path:
                logging.warning(f"Skipping thumbnail generation for '{title}' due to missing FilePath.")
                continue

            # Construct full paths. Assuming file_path and thumbnail_path are relative to project root.
            # If they are already absolute, os.path.join will handle it correctly.
            full_pdf_path = os.path.join(os.getcwd(), file_path)
            full_thumbnail_path = os.path.join(os.getcwd(), thumbnail_path)

            logging.info(f"Checking PDF: {full_pdf_path}")
            logging.info(f"Checking Thumbnail: {full_thumbnail_path}")

            if not os.path.exists(full_pdf_path):
                logging.warning(f"PDF file not found for '{title}' at {full_pdf_path}. Skipping thumbnail generation.")
                continue

            if os.path.exists(full_thumbnail_path):
                logging.info(f"Thumbnail already exists for '{title}'. Skipping.")
                continue

            try:
                doc = fitz.open(full_pdf_path)
                page = doc.load_page(0)  # Get the first page
                pix = page.get_pixmap() # default resolution
                img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)

                # Resize image to a common thumbnail size (e.g., 164x220 as in BookTile)
                thumbnail_size = (164, 220)
                img.thumbnail(thumbnail_size, Image.Resampling.LANCZOS)

                # Ensure the directory for the thumbnail exists
                os.makedirs(os.path.dirname(full_thumbnail_path), exist_ok=True)
                img.save(full_thumbnail_path, "PNG")
                logging.info(f"Generated thumbnail for '{title}' at {full_thumbnail_path}")

            except Exception as e:
                logging.error(f"Error generating thumbnail for '{title}' ({full_pdf_path}): {e}", exc_info=True)
            finally:
                if 'doc' in locals() and doc:
                    doc.close()

    except (sqlite3.Error, IOError) as e:
        logging.error(f"An error occurred: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

if __name__ == '__main__':
    generate_thumbnails()
================
File: Scripts/Migration/add_authors.py
================
'''
# File: add_authors.py
# Path: Scripts/Migration/add_authors.py
# Description: Adds author information to the database from a CSV file.

import csv
import sqlite3
import os

def add_authors_to_database():
    """Reads author data from a CSV and updates the database."""
    db_path = 'Assets/my_library.db'
    csv_path = 'Data/Spreadsheets/AndersonLibrary_PDFMetadata.csv'

    if not os.path.exists(db_path):
        print(f"Error: Database file not found at {db_path}")
        return

    if not os.path.exists(csv_path):
        print(f"Error: CSV file not found at {csv_path}")
        return

    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # Add author column if it doesn't exist
        try:
            cursor.execute("ALTER TABLE books ADD COLUMN author TEXT")
            print("Added 'author' column to 'books' table.")
        except sqlite3.OperationalError as e:
            if "duplicate column name" in str(e):
                print("'author' column already exists.")
            else:
                raise

        # Read CSV and update database
        with open(csv_path, 'r', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                filename = row.get('filename')
                author = row.get('pdf_author')

                if filename and author:
                    # We need to get the title from the filename
                    title = os.path.splitext(filename)[0]
                    cursor.execute("UPDATE books SET author = ? WHERE title = ?", (author, title))

        conn.commit()
        print("Successfully updated authors in the database.")

    except (sqlite3.Error, IOError) as e:
        print(f"An error occurred: {e}")
    finally:
        if conn:
            conn.close()

if __name__ == '__main__':
    add_authors_to_database()
'''
================
File: Scripts/Migration/add_authors_v2.py
================
# File: add_authors_v2.py
# Path: Scripts/Migration/add_authors_v2.py
# Description: Adds author information to the database from a CSV file.

import csv
import sqlite3
import os
import logging

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def add_authors_to_database():
    """Reads author data from a CSV and updates the database."""
    db_path = 'Assets/my_library.db'
    csv_path = 'Data/Spreadsheets/AndersonLibrary_PDFMetadata.csv'

    if not os.path.exists(db_path):
        logging.error(f"Database file not found at {db_path}")
        return

    if not os.path.exists(csv_path):
        logging.error(f"CSV file not found at {csv_path}")
        return

    conn = None
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # Check if the column already exists
        cursor.execute("PRAGMA table_info(books)")
        columns = [column[1] for column in cursor.fetchall()]
        if 'author' not in columns:
            logging.info("Adding 'author' column to 'books' table.")
            cursor.execute("ALTER TABLE books ADD COLUMN author TEXT")
        else:
            logging.info("'author' column already exists.")

        # Read CSV and update database
        logging.info(f"Reading data from {csv_path}")
        updated_count = 0
        with open(csv_path, 'r', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                filename = row.get('filename')
                author = row.get('pdf_author')

                if filename and author:
                    title = os.path.splitext(filename)[0]
                    # Use a case-insensitive match for the title
                    cursor.execute("UPDATE books SET author = ? WHERE lower(title) = ?", (author, title.lower()))
                    if cursor.rowcount > 0:
                        updated_count += 1

        conn.commit()
        logging.info(f"Successfully updated {updated_count} authors in the database.")

    except (sqlite3.Error, IOError) as e:
        logging.error(f"An error occurred: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

if __name__ == '__main__':
    add_authors_to_database()

================
File: Scripts/Migration/add_filepath_thumbnailpath.py
================
import sqlite3
import os
import logging
import csv

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def add_filepath_thumbnailpath():
    db_path = 'Assets/my_library.db'
    csv_path = 'Data/Spreadsheets/AndersonLibrary_PDFMetadata.csv'
    thumbnails_dir = 'Data/Thumbs/'
    books_dir = 'Data/Books/'

    if not os.path.exists(db_path):
        logging.error(f"Database file not found at {db_path}")
        return

    if not os.path.exists(csv_path):
        logging.error(f"CSV file not found at {csv_path}")
        return

    conn = None
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # Add FilePath column if it doesn't exist
        cursor.execute("PRAGMA table_info(books)")
        columns = [col[1] for col in cursor.fetchall()]
        if 'FilePath' not in columns:
            logging.info("Adding 'FilePath' column to 'books' table.")
            cursor.execute("ALTER TABLE books ADD COLUMN FilePath TEXT")
        else:
            logging.info("'FilePath' column already exists.")

        # Add ThumbnailPath column if it doesn't exist
        cursor.execute("PRAGMA table_info(books)")
        columns = [col[1] for col in cursor.fetchall()]
        if 'ThumbnailPath' not in columns:
            logging.info("Adding 'ThumbnailPath' column to 'books' table.")
            cursor.execute("ALTER TABLE books ADD COLUMN ThumbnailPath TEXT")
        else:
            logging.info("'ThumbnailPath' column already exists.")

        # Read CSV and update database
        logging.info(f"Reading data from {csv_path}")
        updated_count = 0
        with open(csv_path, 'r', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                filename = row.get('filename')
                
                if filename:
                    title = os.path.splitext(filename)[0]
                    file_path = os.path.join(books_dir, filename)
                    thumbnail_path = os.path.join(thumbnails_dir, f"{title}.png") # Assuming PNG thumbnails

                    cursor.execute("UPDATE books SET FilePath = ?, ThumbnailPath = ? WHERE lower(title) = ?", 
                                   (file_path, thumbnail_path, title.lower()))
                    if cursor.rowcount > 0:
                        updated_count += 1

        conn.commit()
        logging.info(f"Successfully updated {updated_count} FilePath and ThumbnailPath entries in the database.")

    except (sqlite3.Error, IOError) as e:
        logging.error(f"An error occurred: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

if __name__ == '__main__':
    add_filepath_thumbnailpath()
================
File: Scripts/System/BackupProject.py
================
#!/usr/bin/env python3
"""
Project backup script that respects .gitignore files
"""

import os
import shutil
import sys
from datetime import datetime
from pathlib import Path
import fnmatch


def parse_gitignore(gitignore_path):
    """Parse .gitignore file and return patterns to ignore"""
    patterns = []
    if os.path.exists(gitignore_path):
        with open(gitignore_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    patterns.append(line)
    return patterns


def should_ignore(file_path, ignore_patterns, base_path):
    """Check if a file/directory should be ignored based on gitignore patterns"""
    relative_path = os.path.relpath(file_path, base_path)
    
    for pattern in ignore_patterns:
        # Handle directory patterns ending with /
        if pattern.endswith('/'):
            if os.path.isdir(file_path):
                dir_pattern = pattern.rstrip('/')
                if fnmatch.fnmatch(relative_path, dir_pattern) or fnmatch.fnmatch(os.path.basename(file_path), dir_pattern):
                    return True
        else:
            # Handle file patterns
            if fnmatch.fnmatch(relative_path, pattern) or fnmatch.fnmatch(os.path.basename(file_path), pattern):
                return True
            # Check if any parent directory matches the pattern
            path_parts = relative_path.split(os.sep)
            for part in path_parts[:-1]:  # Exclude the file itself
                if fnmatch.fnmatch(part, pattern):
                    return True
    
    return False


def copy_with_gitignore(src, dst, ignore_patterns):
    """Copy directory tree while respecting gitignore patterns"""
    if not os.path.exists(dst):
        os.makedirs(dst)
    
    for item in os.listdir(src):
        src_path = os.path.join(src, item)
        dst_path = os.path.join(dst, item)
        
        if should_ignore(src_path, ignore_patterns, src):
            print(f"Ignoring: {src_path}")
            continue
        
        if os.path.isdir(src_path):
            copy_with_gitignore(src_path, dst_path, ignore_patterns)
        else:
            shutil.copy2(src_path, dst_path)


def backup_project(project_name=None):
    """Backup the current project, respecting .gitignore if present"""
    # Get project name
    if not project_name:
        project_name = os.path.basename(os.getcwd())
    
    # Setup backup directory
    backup_dir = os.path.join(os.path.expanduser("~"), "Desktop", "Projects_Backup")
    date_stamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"{project_name}_{date_stamp}"
    backup_path = os.path.join(backup_dir, backup_name)
    
    # Create backup directory
    os.makedirs(backup_dir, exist_ok=True)
    
    # Get source directory (current directory)
    src_dir = os.getcwd()
    
    # Parse .gitignore if it exists
    gitignore_path = os.path.join(src_dir, '.gitignore')
    ignore_patterns = parse_gitignore(gitignore_path)
    
    # Always ignore .git directory
    ignore_patterns.append('.git/')
    
    print(f"Backing up project: {project_name}")
    if ignore_patterns:
        print(f"Using .gitignore patterns: {len(ignore_patterns)} patterns found")
    
    # Copy project with gitignore filtering
    try:
        copy_with_gitignore(src_dir, backup_path, ignore_patterns)
        print(f"Project backed up to: {backup_path}")
        return backup_path
    except Exception as e:
        print(f"Error during backup: {e}")
        return None


def main():
    """Main entry point"""
    project_name = None
    if len(sys.argv) > 1:
        project_name = sys.argv[1]
    
    backup_project(project_name)


if __name__ == "__main__":
    main()
================
File: Scripts/System/CodebaseSum.py
================

"""
File: CodebaseSum.py
Path: BowersWorld-com/Scripts/CodebaseSum.py
Created: 2025-06-25
Description: Generate a comprehensive codebase snapshot in a structured format
"""

import os
import subprocess
import tempfile
from datetime import datetime
from pathlib import Path
import shutil
import fnmatch
import PyPDF2
from PyPDF2 import PdfReader

def get_gitignore_patterns(gitignore_path=".gitignore"):
    patterns = set()
    if os.path.exists(gitignore_path):
        with open(gitignore_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    # Normalize patterns: remove leading / and trailing / if not needed
                    if line.startswith('/'):
                        line = line[1:]
                    patterns.add(line)
    return patterns

def is_ignored(path, gitignore_patterns):
    """
    Checks if a given path should be ignored based on .gitignore patterns.
    This is a simplified implementation and may not cover all gitignore complexities.
    """
    path_str = str(path)
    # Check if the path directly matches any pattern
    for pattern in gitignore_patterns:
        # Handle directory patterns (ending with /)
        if pattern.endswith('/'):
            if path.is_dir() and fnmatch.fnmatch(path_str + '/', pattern):
                return True
            elif path.is_file() and fnmatch.fnmatch(path_str, pattern[:-1]): # Match files within ignored dirs
                return True
        elif fnmatch.fnmatch(path_str, pattern):
            return True
        # Handle patterns that are just directory names without leading/trailing slashes
        if path.is_dir() and fnmatch.fnmatch(path.name, pattern):
            return True
    return False

def main():
    # Create timestamp for the output filename
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"CodebaseSummary_{timestamp}.txt"
    
    # Check if the tree command is available
    if not shutil.which('tree'):
        print("Error: The 'tree' command is required but not found. Please install it first.")
        return 1
    
    print(f"Generating codebase summary to {output_file}...")
    
    # Create temp directory for building the summary
    with tempfile.TemporaryDirectory() as temp_dir:
        header_file = os.path.join(temp_dir, "header.txt")
        structure_file = os.path.join(temp_dir, "structure.txt")
        files_list = os.path.join(temp_dir, "files_list.txt")
        files_content = os.path.join(temp_dir, "files_content.txt")
        
        # Create the header
        header_content = """This file is a comprehensive codebase snapshot for the BowersWorld-com project, generated to facilitate analysis and development.

================================================================
File Summary
================================================================

Purpose:
--------
This document provides a consolidated view of the project's source code, scripts,
HTML, and text files, excluding any files specified in the .gitignore file. 
It serves as a reference for developers, making it easier to understand the 
codebase structure and functionality in a single document.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
5. List of Program files
6. List of Documents

"""
        
        with open(header_file, 'w') as f:
            f.write(header_content)
        
        # Generate directory structure using tree
        print("Generating directory structure...")
        # Get exclusion patterns from .gitignore for tree command
        gitignore_patterns_for_tree = get_gitignore_patterns()
        # Convert patterns to a format suitable for tree's -I option
        # Tree's -I uses fnmatch, so we can directly use the patterns.
        # We need to explicitly include some common system-level ignores for tree
        common_tree_excludes = [
            '.git', '__pycache__', '.venv', 'venv', 'ENV', '.idea', '.vscode',
            'Temp', 'Logs', 'build', 'dist', 'env', 'lib', 'lib64', 'parts', 
            'sdist', 'var', 'downloads', 'eggs', '.eggs', 'develop-eggs',
            'Covers', 'Thumbs', 'Html', 'Docs', 'node_modules'
        ]
        tree_ignore_patterns = list(set(common_tree_excludes).union(gitignore_patterns_for_tree))
        
        tree_cmd = ['tree', '-f', '-I', '|'.join(tree_ignore_patterns), '.']
        with open(structure_file, 'w') as f:
            subprocess.run(tree_cmd, stdout=f)
        
        # Create the files section header
        with open(files_content, 'w') as f:
            f.write("================================================================\n")
            f.write("Files\n")
            f.write("================================================================\n")
            f.write("\n")
        
        # Get exclusion patterns from .gitignore for os.walk
        gitignore_patterns_for_walk = get_gitignore_patterns()

        # Define common directories to exclude for os.walk based on gitignore and common patterns
        # These are explicit directories that should always be skipped by os.walk,
        # in addition to those matched by gitignore patterns.
        explicit_exclude_dirs_walk = {
            '.git', '__pycache__', '.venv', 'venv', 'ENV', '.idea', '.vscode',
            'Temp', 'Logs', 'build', 'dist', 'env', 'lib', 'lib64', 'parts',
            'sdist', 'var', 'downloads', 'eggs', '.eggs', 'develop-eggs',
            'Covers', 'Thumbs', 'Html', 'Docs', 'node_modules'
        }

        # Find relevant project files
        print("Finding relevant project files (.py, .sh, .md, .html, .txt, .pdf)...")
        file_extensions = {'.py', '.sh', '.md', '.html', '.txt', '.pdf'}
        relevant_files = []

        for root, dirs, files in os.walk('.'):
            # Filter directories in-place to avoid walking into excluded ones
            dirs_to_keep = []
            for d in list(dirs): # Iterate over a copy because we modify 'dirs'
                current_dir_path = Path(root) / d
                rel_dir_path = current_dir_path.relative_to('.')
                
                # Check explicit excludes first
                if d in explicit_exclude_dirs_walk:
                    dirs.remove(d)
                    continue
                
                # Check against gitignore patterns
                if is_ignored(rel_dir_path, gitignore_patterns_for_walk):
                    dirs.remove(d)
                else:
                    dirs_to_keep.append(d)
            dirs[:] = dirs_to_keep # Update dirs for the current walk iteration

            for file in files:
                file_path = Path(root) / file
                rel_file_path = file_path.relative_to('.')
                
                # Skip .gitignore file itself
                if file == '.gitignore':
                    continue

                # Check if file has relevant extension
                if file_path.suffix in file_extensions:
                    # Check if the file path should be ignored by gitignore patterns
                    if is_ignored(rel_file_path, gitignore_patterns_for_walk):
                        continue
                    
                    relevant_files.append(rel_file_path)
        
        # Sort files for consistent output
        relevant_files.sort(key=str) # Sort Path objects by their string representation
        
        # Write files list
        with open(files_list, 'w') as f:
            for file_path in relevant_files:
                f.write(f"{file_path}\n")
        
        # Process each file found
        print("Processing files...")
        with open(files_content, 'a') as fc:
            for p_obj in relevant_files: # Iterate over Path objects
                file_path_str = str(p_obj) # Get string representation for os.path.isfile
                if os.path.isfile(file_path_str):
                    current_file_path = Path(file_path_str) # Convert back to Path object for .suffix
                    fc.write("================\n")
                    fc.write(f"File: {current_file_path}\n")
                    fc.write("================\n")
                    try:
                        if current_file_path.suffix == '.pdf':
                            pdf_content = ""
                            with open(current_file_path, 'rb') as pdf_file:
                                pdf_reader = PdfReader(pdf_file)
                                for page_num in range(len(pdf_reader.pages)):
                                    page = pdf_reader.pages[page_num]
                                    text = page.extract_text()
                                    if text: # Only add if text is extracted
                                        pdf_content += text + "\n"
                            if pdf_content:
                                fc.write(pdf_content)
                            else:
                                fc.write("[PDF file: No extractable text content]\n")
                        else:
                            with open(current_file_path, 'r', encoding='utf-8') as f:
                                fc.write(f.read())
                    except Exception as e: # Catch all exceptions for reading files, including PDFs
                        fc.write(f"[Error reading content: {e} - content not displayed]\n")
                    fc.write("\n")
        
        # Combine all parts into the final file
        with open(output_file, 'w') as output:
            # Write header
            with open(header_file, 'r') as f:
                output.write(f.read())
            
            # Write directory structure
            output.write("================================================================\n")
            output.write("Directory Structure\n")
            output.write("================================================================\n")
            with open(structure_file, 'r') as f:
                output.write(f.read())
            output.write("\n")
            
            # Write files content
            with open(files_content, 'r') as f:
                output.write(f.read())
            
            # Write file list
            output.write("\n")
            output.write("================================================================\n")
            output.write("List of Included Files\n")
            output.write("================================================================\n")
            output.write("\n")
            output.write("Files included:\n")
            with open(files_list, 'r') as f:
                output.write(f.read())
            
            num_files = len(relevant_files)
            output.write(f"\nThere are {num_files} files included in the Files section of the CodebaseSummary document.\n")
    
    print(f"Codebase summary generated: {output_file}")
    print(f"It contains {len(relevant_files)} files.")
    
    return 0

if __name__ == "__main__":
    exit(main())

================
File: Scripts/System/GPU OCR Speed Test.py
================
#!/usr/bin/env python3
"""
GPU OCR Speed Test - Compare CPU vs GPU OCR performance
"""

import time
import torch
from pathlib import Path
import fitz  # PyMuPDF
from pdf2image import convert_from_path
import tempfile

def test_gpu_availability():
    """Test if CUDA GPU is available"""
    print("🔍 GPU AVAILABILITY CHECK")
    print("=" * 40)
    
    # Check CUDA
    cuda_available = torch.cuda.is_available()
    print(f"CUDA Available: {cuda_available}")
    
    if cuda_available:
        gpu_count = torch.cuda.device_count()
        gpu_name = torch.cuda.get_device_name(0)
        gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
        
        print(f"GPU Count: {gpu_count}")
        print(f"GPU Name: {gpu_name}")
        print(f"GPU Memory: {gpu_memory:.1f} GB")
        
        return True
    else:
        print("❌ CUDA not available")
        return False

def test_easyocr_speed(pdf_path):
    """Test EasyOCR speed with GPU"""
    try:
        import easyocr
        
        print("\n🚀 TESTING EASYOCR (GPU)")
        print("=" * 40)
        
        # Initialize EasyOCR with GPU
        reader = easyocr.Reader(['en'], gpu=True)
        
        # Convert first page to image
        with tempfile.TemporaryDirectory() as temp_dir:
            pages = convert_from_path(pdf_path, first_page=1, last_page=1, dpi=300)
            
            if pages:
                start_time = time.time()
                
                # Perform OCR
                results = reader.readtext(pages[0])
                
                end_time = time.time()
                processing_time = end_time - start_time
                
                # Extract text
                extracted_text = ' '.join([result[1] for result in results])
                
                print(f"⏱️ Processing time: {processing_time:.2f} seconds")
                print(f"📄 Text extracted: {len(extracted_text)} characters")
                print(f"📝 Sample: {extracted_text[:200]}...")
                
                return processing_time, len(extracted_text)
                
    except ImportError:
        print("❌ EasyOCR not installed. Install with: pip install easyocr")
        return None, None
    except Exception as e:
        print(f"❌ EasyOCR test failed: {e}")
        return None, None

def test_tesseract_speed(pdf_path):
    """Test current Tesseract speed for comparison"""
    try:
        import pytesseract
        
        print("\n🐌 TESTING TESSERACT (CPU)")
        print("=" * 40)
        
        # Convert first page to image
        with tempfile.TemporaryDirectory() as temp_dir:
            pages = convert_from_path(pdf_path, first_page=1, last_page=1, dpi=300)
            
            if pages:
                start_time = time.time()
                
                # Perform OCR
                extracted_text = pytesseract.image_to_string(pages[0])
                
                end_time = time.time()
                processing_time = end_time - start_time
                
                print(f"⏱️ Processing time: {processing_time:.2f} seconds")
                print(f"📄 Text extracted: {len(extracted_text)} characters")
                print(f"📝 Sample: {extracted_text[:200]}...")
                
                return processing_time, len(extracted_text)
                
    except Exception as e:
        print(f"❌ Tesseract test failed: {e}")
        return None, None

def test_paddleocr_speed(pdf_path):
    """Test PaddleOCR speed with GPU"""
    try:
        from paddleocr import PaddleOCR
        
        print("\n⚡ TESTING PADDLEOCR (GPU)")
        print("=" * 40)
        
        # Initialize PaddleOCR with GPU
        ocr = PaddleOCR(use_angle_cls=True, lang='en', use_gpu=True)
        
        # Convert first page to image
        with tempfile.TemporaryDirectory() as temp_dir:
            pages = convert_from_path(pdf_path, first_page=1, last_page=1, dpi=300)
            
            if pages:
                # Save image temporarily
                img_path = f"{temp_dir}/test_page.png"
                pages[0].save(img_path)
                
                start_time = time.time()
                
                # Perform OCR
                results = ocr.ocr(img_path, cls=True)
                
                end_time = time.time()
                processing_time = end_time - start_time
                
                # Extract text
                extracted_text = ''
                if results and results[0]:
                    extracted_text = ' '.join([line[1][0] for line in results[0]])
                
                print(f"⏱️ Processing time: {processing_time:.2f} seconds")
                print(f"📄 Text extracted: {len(extracted_text)} characters")
                print(f"📝 Sample: {extracted_text[:200]}...")
                
                return processing_time, len(extracted_text)
                
    except ImportError:
        print("❌ PaddleOCR not installed. Install with: pip install paddlepaddle-gpu paddleocr")
        return None, None
    except Exception as e:
        print(f"❌ PaddleOCR test failed: {e}")
        return None, None

def main():
    """Main speed test function"""
    print("🚀 GPU OCR SPEED TEST FOR RTX 4070")
    print("=" * 50)
    
    # Test GPU availability
    gpu_available = test_gpu_availability()
    
    if not gpu_available:
        print("\n❌ No GPU acceleration available")
        return
    
    # Find a test PDF
    pdf_dir = Path("/home/herb/Desktop/Not Backed Up/Anderson's Library/Andy/Anderson eBooks")
    test_pdfs = list(pdf_dir.glob("*.pdf"))[:3]  # Test first 3 PDFs
    
    if not test_pdfs:
        print("❌ No test PDFs found")
        return
    
    print(f"\n📚 Testing with: {test_pdfs[0].name}")
    
    # Test each OCR method
    results = {}
    
    # Test Tesseract (current method)
    tesseract_time, tesseract_chars = test_tesseract_speed(test_pdfs[0])
    if tesseract_time:
        results['Tesseract (CPU)'] = tesseract_time
    
    # Test EasyOCR
    easyocr_time, easyocr_chars = test_easyocr_speed(test_pdfs[0])
    if easyocr_time:
        results['EasyOCR (GPU)'] = easyocr_time
    
    # Test PaddleOCR
    paddleocr_time, paddleocr_chars = test_paddleocr_speed(test_pdfs[0])
    if paddleocr_time:
        results['PaddleOCR (GPU)'] = paddleocr_time
    
    # Show comparison
    print("\n📊 SPEED COMPARISON RESULTS")
    print("=" * 50)
    
    if results:
        fastest_method = min(results.items(), key=lambda x: x[1])
        
        for method, time_taken in results.items():
            speedup = tesseract_time / time_taken if tesseract_time and method != 'Tesseract (CPU)' else 1.0
            status = "🏆" if method == fastest_method[0] else "⚡" if speedup > 1 else "🐌"
            
            print(f"{status} {method}: {time_taken:.2f}s (×{speedup:.1f} speedup)")
        
        print(f"\n🎯 RECOMMENDATION:")
        print(f"   Fastest method: {fastest_method[0]} ({fastest_method[1]:.2f}s)")
        
        if fastest_method[1] < tesseract_time:
            total_speedup = tesseract_time / fastest_method[1]
            new_total_time = 6 * 60 / total_speedup  # 6 hours in minutes
            print(f"   Total processing speedup: ×{total_speedup:.1f}")
            print(f"   Estimated new total time: {new_total_time:.0f} minutes ({new_total_time/60:.1f} hours)")
    
    print("\n" + "=" * 50)

if __name__ == "__main__":
    main()

================
File: Scripts/System/ListFilesByDate.py
================



import os
import datetime

def list_files_and_dates():
    """
    Lists all files in the current directory and their last modification dates.
    """
    files_with_dates = []
    for item in os.listdir('.'):
        if os.path.isfile(item):
            try:
                timestamp = os.path.getmtime(item)
                files_with_dates.append((timestamp, item))
            except Exception as e:
                print(f"Warning: Could not retrieve date for {item} ({e})")

    files_with_dates.sort() # Sort by timestamp (oldest first)

    print("Files and their last modification dates in the current directory (oldest first):")
    for timestamp, item in files_with_dates:
        dt_object = datetime.datetime.fromtimestamp(timestamp)
        print(f"- {dt_object.strftime('%Y-%m-%d %H:%M:%S')}: {item}")

if __name__ == "__main__":
    list_files_and_dates()

================
File: Scripts/System/MarkdownToText.py
================
# File: MarkdownToText.py
# Path: MarkdownToText.py
# Standard: AIDEV-PascalCase-1.7
# Created: 2025-06-21
# Last Modified: 2025-06-21  09:30 AM
# Author: Claude Code Assistant
"""
Description: Himalaya Markdown to Text Converter Utility
Converts .md files to plain text format by stripping Markdown syntax while preserving
content structure and readability. Handles headers, lists, code blocks, links, and
other common Markdown elements. Follows AIDEV-PascalCase-1.7 standard with comprehensive
error handling, logging, and audit trail generation.

Core Features:
- PascalCase naming convention enforcement
- Comprehensive Markdown syntax removal
- Batch directory processing capabilities
- Detailed logging and status reporting
- Error handling with graceful degradation
"""

import os
import re
import sys
import logging
from datetime import datetime
from typing import Optional

# --- CONSTANTS ---
DOCS_DIR = 'Docs'
TEXT_OUTPUT_DIR = 'TextOutput'
DATE_FMT = "%Y-%m-%d"
TS_FMT = "%Y-%m-%d_%H-%M-%S"

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='[MarkdownToText] %(levelname)s: %(message)s'
)

def ProcessMarkdownToText(MarkdownContent: str) -> str:
    """
    Processes Markdown content and converts to clean plain text.
    Removes all Markdown syntax while preserving content structure and readability.
    Follows Himalaya text processing standards.
    
    Args:
        MarkdownContent: Raw markdown content as string
        
    Returns:
        Plain text with all Markdown syntax removed
    """
    ProcessedText = MarkdownContent
    
    # Remove code blocks (```code```)
    ProcessedText = re.sub(r'```[\s\S]*?```', '', ProcessedText)
    
    # Remove inline code (`code`)
    ProcessedText = re.sub(r'`([^`]+)`', r'\1', ProcessedText)
    
    # Convert headers (# ## ### etc.) to plain text with spacing
    ProcessedText = re.sub(r'^#{1,6}\s*(.+)$', r'\1', ProcessedText, flags=re.MULTILINE)
    
    # Remove bold/italic markers (**text**, *text*, __text__, _text_)
    ProcessedText = re.sub(r'\*\*([^*]+)\*\*', r'\1', ProcessedText)
    ProcessedText = re.sub(r'\*([^*]+)\*', r'\1', ProcessedText)
    ProcessedText = re.sub(r'__([^_]+)__', r'\1', ProcessedText)
    ProcessedText = re.sub(r'_([^_]+)_', r'\1', ProcessedText)
    
    # Convert links [text](url) to just text
    ProcessedText = re.sub(r'\[([^\]]+)\]\([^)]+\)', r'\1', ProcessedText)
    
    # Remove reference-style links [text]: url
    ProcessedText = re.sub(r'^\s*\[[^\]]+\]:\s*.+$', '', ProcessedText, flags=re.MULTILINE)
    
    # Convert unordered lists (- * +) to plain text with indentation
    ProcessedText = re.sub(r'^(\s*)[-*+]\s+(.+)$', r'\1\2', ProcessedText, flags=re.MULTILINE)
    
    # Convert ordered lists (1. 2. etc.) to plain text with indentation
    ProcessedText = re.sub(r'^(\s*)\d+\.\s+(.+)$', r'\1\2', ProcessedText, flags=re.MULTILINE)
    
    # Remove blockquotes (>)
    ProcessedText = re.sub(r'^>\s*(.*)$', r'\1', ProcessedText, flags=re.MULTILINE)
    
    # Remove horizontal rules (--- or ***)
    ProcessedText = re.sub(r'^[-*]{3,}$', '', ProcessedText, flags=re.MULTILINE)
    
    # Clean up extra whitespace while preserving paragraph breaks
    ProcessedText = re.sub(r'\n{3,}', '\n\n', ProcessedText)
    ProcessedText = re.sub(r'[ \t]+', ' ', ProcessedText)
    
    # Remove leading/trailing whitespace from lines
    CleanedLines = [Line.strip() for Line in ProcessedText.split('\n')]
    ProcessedText = '\n'.join(CleanedLines)
    
    return ProcessedText.strip()

def ConvertSingleMarkdownFile(SourcePath: str, DestinationPath: Optional[str] = None) -> bool:
    """
    Converts a single Markdown file to plain text with full error handling.
    Follows Himalaya file processing standards with comprehensive logging.
    
    Args:
        SourcePath: Path to source .md file
        DestinationPath: Optional output path, defaults to source path with .txt extension
        
    Returns:
        True if conversion successful, False otherwise
    """
    try:
        # Validate source file existence
        if not os.path.exists(SourcePath):
            logging.error(f"Source file not found: {SourcePath}")
            return False
            
        if not SourcePath.lower().endswith('.md'):
            logging.warning(f"Source file is not a Markdown file: {SourcePath}")
        
        # Determine destination path with PascalCase naming
        if DestinationPath is None:
            BaseFileName = os.path.splitext(os.path.basename(SourcePath))[0]
            DestinationPath = f"{BaseFileName}.txt"
        
        # Ensure destination directory exists
        DestinationDir = os.path.dirname(DestinationPath)
        if DestinationDir and not os.path.exists(DestinationDir):
            os.makedirs(DestinationDir, exist_ok=True)
            logging.info(f"Created destination directory: {DestinationDir}")
        
        # Read markdown content with encoding validation
        with open(SourcePath, 'r', encoding='utf-8') as SourceFile:
            MarkdownContent = SourceFile.read()
        
        # Process markdown to plain text
        ConvertedText = ProcessMarkdownToText(MarkdownContent)
        
        # Write output file with UTF-8 encoding
        with open(DestinationPath, 'w', encoding='utf-8') as DestinationFile:
            DestinationFile.write(ConvertedText)
        
        logging.info(f"Successfully converted: {SourcePath} → {DestinationPath}")
        return True
        
    except Exception as ProcessingError:
        logging.error(f"Failed to convert {SourcePath}: {ProcessingError}")
        return False

def ProcessMarkdownDirectory(SourceDirectory: str, DestinationDirectory: Optional[str] = None) -> int:
    """
    Processes all .md files in a directory to .txt files with batch processing.
    Generates comprehensive status report and audit trail.
    
    Args:
        SourceDirectory: Path to directory containing .md files
        DestinationDirectory: Optional output directory, defaults to same as source
        
    Returns:
        Number of files successfully converted
    """
    if not os.path.isdir(SourceDirectory):
        logging.error(f"Source directory not found: {SourceDirectory}")
        return 0
    
    SuccessfulConversions = 0
    ProcessingErrors = 0
    MarkdownFileList = [FileName for FileName in os.listdir(SourceDirectory) if FileName.lower().endswith('.md')]
    
    if not MarkdownFileList:
        logging.warning(f"No .md files found in directory: {SourceDirectory}")
        return 0
    
    logging.info(f"Found {len(MarkdownFileList)} Markdown files to process")
    
    for FileName in MarkdownFileList:
        SourceFilePath = os.path.join(SourceDirectory, FileName)
        
        if DestinationDirectory:
            os.makedirs(DestinationDirectory, exist_ok=True)
            BaseFileName = os.path.splitext(FileName)[0]
            DestinationFilePath = os.path.join(DestinationDirectory, f"{BaseFileName}.txt")
        else:
            DestinationFilePath = None
        
        if ConvertSingleMarkdownFile(SourceFilePath, DestinationFilePath):
            SuccessfulConversions += 1
        else:
            ProcessingErrors += 1
    
    logging.info(f"Batch processing completed: {SuccessfulConversions} successful, {ProcessingErrors} errors")
    logging.info(f"Directory processing summary: {SourceDirectory} → {DestinationDirectory or 'same directory'}")
    return SuccessfulConversions

def ExecuteMarkdownConversion():
    """
    Main execution function for command-line usage.
    Handles both single file and directory batch processing with comprehensive error handling.
    
    Usage: python MarkdownToText.py <source_file_or_directory> [destination_path]
    
    Examples:
        python MarkdownToText.py Document.md
        python MarkdownToText.py Document.md ConvertedDocument.txt
        python MarkdownToText.py ./MarkdownFiles/
        python MarkdownToText.py ./MarkdownFiles/ ./TextFiles/
    """
    if len(sys.argv) < 2:
        print("Usage: python MarkdownToText.py <source_file_or_directory> [destination_path]")
        print("Examples:")
        print("  python MarkdownToText.py Document.md")
        print("  python MarkdownToText.py Document.md ConvertedDocument.txt")
        print("  python MarkdownToText.py ./SourceDocs/")
        print("  python MarkdownToText.py ./SourceDocs/ ./ConvertedText/")
        print("\nHimalaya Markdown to Text Converter - AIDEV-PascalCase-1.7")
        sys.exit(1)
    
    SourcePath = sys.argv[1]
    DestinationPath = sys.argv[2] if len(sys.argv) > 2 else None
    
    print(f"[MarkdownToText] Himalaya conversion process starting...")
    ExecutionStartTime = datetime.now()
    
    if os.path.isfile(SourcePath):
        ConversionSuccess = ConvertSingleMarkdownFile(SourcePath, DestinationPath)
        if ConversionSuccess:
            print(f"[MarkdownToText] Single file conversion completed successfully")
        else:
            print(f"[MarkdownToText] Single file conversion failed - check logs for details")
            sys.exit(1)
    elif os.path.isdir(SourcePath):
        ProcessedFileCount = ProcessMarkdownDirectory(SourcePath, DestinationPath)
        print(f"[MarkdownToText] Directory batch processing completed: {ProcessedFileCount} files converted")
        if ProcessedFileCount == 0:
            print(f"[MarkdownToText] Warning: No files were successfully converted")
    else:
        print(f"[MarkdownToText] Error: Source path not found: {SourcePath}")
        sys.exit(1)
    
    ExecutionEndTime = datetime.now()
    TotalDuration = (ExecutionEndTime - ExecutionStartTime).total_seconds()
    print(f"[MarkdownToText] Total execution time: {TotalDuration:.2f} seconds")
    print(f"[MarkdownToText] Himalaya conversion process completed successfully")

if __name__ == "__main__":
    ExecuteMarkdownConversion()
================
File: Scripts/temp_db_inspector.py
================
import sqlite3
import os

def inspect_db():
    db_path = 'Assets/my_library.db'

    if not os.path.exists(db_path):
        print(f"Error: Database file not found at {db_path}")
        return

    conn = None
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # Get column names
        cursor.execute("PRAGMA table_info(books)")
        columns = [col[1] for col in cursor.fetchall()]
        print(f"Columns in 'books' table: {columns}")

        # Select a few sample books to check FilePath and ThumbnailPath
        cursor.execute("SELECT title, FilePath, ThumbnailPath FROM books LIMIT 5")
        sample_books = cursor.fetchall()

        print("\nSample Book Data (Title, FilePath, ThumbnailPath):")
        for book in sample_books:
            print(book)

    except sqlite3.Error as e:
        print(f"An error occurred: {e}")
    finally:
        if conn:
            conn.close()

if __name__ == '__main__':
    inspect_db()
================
File: Source/Core/BookService.py
================
# File: BookService.py
# Path: Source/Core/BookService.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04 06:30PM
"""
Description: Anderson's Library Book Service
Business logic for book operations including filtering, opening, and management.
Separates book-related logic from UI components for better modularity.

Purpose: Provides high-level book operations and business rules while maintaining
separation between data access and user interface components.
"""

import os
import webbrowser
import logging
from typing import List, Optional, Dict, Any, Callable
from pathlib import Path

from .DatabaseManager import DatabaseManager
from ..Data.DatabaseModels import Book, Category, Subject, SearchCriteria, SearchResult, LibraryStatistics


class BookService:
    """
    Handles all business logic related to book operations.
    Provides clean interface for book filtering, opening, and management.
    """
    
    def __init__(self, DatabaseManager: DatabaseManager):
        """
        Initialize book service with database manager.
        
        Args:
            DatabaseManager: Database manager instance for data access
        """
        self.Database = DatabaseManager
        self.Logger = logging.getLogger(__name__)
        
        self.Logger.info("BookService initialized successfully")
    
    def GetAllCategories(self) -> List[Category]:
        """
        Get all available categories.
        
        Returns:
            List of Category objects sorted alphabetically
        """
        return self.Database.GetAllCategories()

    def GetAuthors(self) -> List[str]:
        """
        Get all unique author names.

        Returns:
            List of author name strings.
        """
        # This will return an empty list if the author column doesn't exist,
        # which is handled in the DatabaseManager.
        return self.Database.GetAllAuthors()
    
    def SearchBooks(self, Criteria: SearchCriteria) -> SearchResult:
        """
        Search books based on the provided criteria.

        Args:
            Criteria: SearchCriteria object with all filter and sort options.

        Returns:
            SearchResult object with the list of books and search metadata.
        """
        try:
            # This search is simplified and only uses the text search for now.
            # A more complete implementation would build a dynamic query based on all criteria.
            Books = self.Database.SearchBooks(Criteria.SearchText)
            return SearchResult(Books=Books, Success=True)
        except Exception as e:
            self.Logger.error(f"Error searching books: {e}")
            return SearchResult(Success=False, ErrorMessage=str(e))

    def GetAllBooks(self) -> SearchResult:
        """
        Get all books from the library.

        Returns:
            SearchResult object with all books.
        """
        try:
            Books = self.Database.GetAllBooks()
            return SearchResult(Books=Books, Success=True)
        except Exception as e:
            self.Logger.error(f"Error getting all books: {e}")
            return SearchResult(Success=False, ErrorMessage=str(e))

    def GetLibraryStatistics(self) -> LibraryStatistics:
        """
        Get comprehensive library statistics.
        
        Returns:
            LibraryStatistics object with various statistics about the library
        """
        try:
            DbStats = self.Database.GetDatabaseStats()
            Authors = self.GetAuthors()
            return LibraryStatistics(
                TotalBooks=DbStats.get('Books', 0),
                TotalCategories=DbStats.get('Categories', 0),
                TotalAuthors=len(Authors),
            )
        except Exception as e:
            self.Logger.error(f"Error getting library statistics: {e}")
            return LibraryStatistics()

    def UpdateLastAccessed(self, BookId: int):
        """
        Updates the last accessed time for a book.

        Args:
            BookId: The ID of the book to update.
        """
        # This is a placeholder for now. In a real application, you would
        # have a method in DatabaseManager to update the LastAccessed field.
        self.Logger.info(f"Updating last accessed time for book {BookId}")

================
File: Source/Core/DatabaseManager.py
================
# File: DatabaseManager.py
# Path: Source/Core/DatabaseManager.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04 06:25PM
"""
Description: Anderson's Library Database Manager
Centralized SQLite database operations with connection management and error handling.
Returns clean model objects instead of raw database tuples.

Purpose: Provides single point of database access for all Anderson's Library operations.
Handles connection lifecycle, transactions, and data conversion to model objects.
"""

import sqlite3
import os
import logging
from typing import List, Optional, Tuple, Any, Dict
from contextlib import contextmanager
from pathlib import Path

# Import our data models
from ..Data.DatabaseModels import Book, Category, Subject, CreateBookFromRow, CreateCategoryFromRow, CreateSubjectFromRow


class DatabaseManager:
    """
    Manages all SQLite database operations for Anderson's Library.
    Provides clean interface with model objects and proper error handling.
    """
    
    def __init__(self, DatabasePath: str = "Assets/my_library.db"):
        """
        Initialize database manager with connection path.
        
        Args:
            DatabasePath: Path to SQLite database file
        """
        self.DatabasePath = DatabasePath
        self.ConnectionPool = {}
        self.Logger = logging.getLogger(__name__)
        
        # Validate database exists
        if not os.path.exists(DatabasePath):
            raise FileNotFoundError(f"Database not found: {DatabasePath}")
        
        # Test connection on initialization
        self._TestConnection()
    
    def _TestConnection(self) -> bool:
        """Test database connection and basic functionality"""
        try:
            with self.GetConnection() as Connection:
                Cursor = Connection.cursor()
                Cursor.execute("SELECT COUNT(*) FROM sqlite_master WHERE type='table'")
                TableCount = Cursor.fetchone()[0]
                
                if TableCount == 0:
                    raise ValueError("Database appears to be empty (no tables found)")
                
                self.Logger.info(f"Database connection successful: {TableCount} tables found")
                return True
                
        except Exception as Error:
            self.Logger.error(f"Database connection test failed: {Error}")
            raise
    
    @contextmanager
    def GetConnection(self):
        """
        Get database connection with automatic cleanup.
        Uses context manager for proper resource management.
        """
        Connection = None
        try:
            Connection = sqlite3.connect(self.DatabasePath)
            Connection.row_factory = sqlite3.Row  # Enable column access by name
            yield Connection
        except sqlite3.Error as Error:
            if Connection:
                Connection.rollback()
            self.Logger.error(f"Database error: {Error}")
            raise
        finally:
            if Connection:
                Connection.close()
    
    def ExecuteQuery(self, Query: str, Parameters: Tuple = ()) -> List[sqlite3.Row]:
        """
        Execute SELECT query and return results.
        
        Args:
            Query: SQL SELECT statement
            Parameters: Query parameters for safe substitution
            
        Returns:
            List of database rows
        """
        try:
            with self.GetConnection() as Connection:
                Cursor = Connection.cursor()
                Cursor.execute(Query, Parameters)
                return Cursor.fetchall()
                
        except sqlite3.Error as Error:
            self.Logger.error(f"Query execution failed: {Query} - {Error}")
            raise
    
    def ExecuteNonQuery(self, Query: str, Parameters: Tuple = ()) -> int:
        """
        Execute INSERT/UPDATE/DELETE query.
        
        Args:
            Query: SQL statement
            Parameters: Query parameters for safe substitution
            
        Returns:
            Number of affected rows
        """
        try:
            with self.GetConnection() as Connection:
                Cursor = Connection.cursor()
                Cursor.execute(Query, Parameters)
                Connection.commit()
                return Cursor.rowcount
                
        except sqlite3.Error as Error:
            self.Logger.error(f"Non-query execution failed: {Query} - {Error}")
            raise
    
    # =================================================================
    # CATEGORY OPERATIONS
    # =================================================================
    
    def GetAllCategories(self) -> List[Category]:
        """
        Get all categories ordered alphabetically.
        
        Returns:
            List of Category objects
        """
        Query = "SELECT id, category FROM categories ORDER BY category ASC"
        Rows = self.ExecuteQuery(Query)
        
        Categories = []
        for Row in Rows:
            # Corrected instantiation of CategoryInfo (aliased as Category)
            CategoryObj = Category(Name=Row['category'])
            Categories.append(CategoryObj)
        
        return Categories
    
    def GetCategoryById(self, CategoryId: int) -> Optional[Category]:
        """
        Get category by ID.
        
        Args:
            CategoryId: Category identifier
            
        Returns:
            Category object or None if not found
        """
        Query = "SELECT id, category FROM categories WHERE id = ?"
        Rows = self.ExecuteQuery(Query, (CategoryId,))
        
        if Rows:
            Row = Rows[0]
            return Category(Name=Row['category'])
        
        return None
    
    def GetCategoryByName(self, CategoryName: str) -> Optional[Category]:
        """
        Get category by name (case-insensitive).
        
        Args:
            CategoryName: Category name to search for
            
        Returns:
            Category object or None if not found
        """
        Query = "SELECT id, category FROM categories WHERE LOWER(category) = LOWER(?)"
        Rows = self.ExecuteQuery(Query, (CategoryName,))
        
        if Rows:
            Row = Rows[0]
            return Category(Name=Row['category'])
        
        return None

    def GetAllAuthors(self) -> List[str]:
        """
        Get all unique author names ordered alphabetically.
        This method assumes an 'author' column exists. If not, it will fail.
        
        Returns:
            List of author name strings
        """
        # This query will fail if the 'author' column does not exist.
        # The calling code should handle this gracefully.
        try:
            Query = "SELECT DISTINCT author FROM books WHERE author IS NOT NULL ORDER BY author ASC"
            Rows = self.ExecuteQuery(Query)
            return [Row['author'] for Row in Rows]
        except sqlite3.Error as e:
            if "no such column: author" in str(e):
                self.Logger.warning("The 'books' table does not have an 'author' column. Author filtering will be disabled.")
                return []
            raise

    # =================================================================
    # SUBJECT OPERATIONS  
    # =================================================================
    
    def GetSubjectsByCategory(self, CategoryName: str) -> List[Subject]:
        """
        Get all subjects for a specific category.
        
        Args:
            CategoryName: Category name to filter by
            
        Returns:
            List of Subject objects
        """
        Query = """
            SELECT s.id, s.category_id, s.subject, c.category 
            FROM subjects s
            JOIN categories c ON s.category_id = c.id
            WHERE c.category = ?
            ORDER BY s.subject ASC
        """
        Rows = self.ExecuteQuery(Query, (CategoryName,))
        
        Subjects = []
        for Row in Rows:
            SubjectObj = Subject(
                Name=Row['subject']
            )
            Subjects.append(SubjectObj)
        
        return Subjects
    
    def GetSubjectById(self, SubjectId: int) -> Optional[Subject]:
        """
        Get subject by ID with category information.
        
        Args:
            SubjectId: Subject identifier
            
        Returns:
            Subject object or None if not found
        """
        Query = """
            SELECT s.id, s.category_id, s.subject, c.category 
            FROM subjects s
            LEFT JOIN categories c ON s.category_id = c.id
            WHERE s.id = ?
        """
        Rows = self.ExecuteQuery(Query, (SubjectId,))
        
        if Rows:
            Row = Rows[0]
            return Subject(Name=Row['subject'])
        
        return None
    
    def GetAllSubjects(self) -> List[Subject]:
        """
        Get all subjects with category information.
        
        Returns:
            List of Subject objects ordered by category then subject
        """
        Query = """
            SELECT s.id, s.category_id, s.subject, c.category 
            FROM subjects s
            LEFT JOIN categories c ON s.category_id = c.id
            ORDER BY c.category ASC, s.subject ASC
        """
        Rows = self.ExecuteQuery(Query)
        
        Subjects = []
        for Row in Rows:
            SubjectObj = Subject(Name=Row['subject'])
            Subjects.append(SubjectObj)
        
        return Subjects
    
    # =================================================================
    # BOOK OPERATIONS
    # =================================================================
    
    def GetBooksBySubject(self, SubjectName: str) -> List[Book]:
        """
        Get all books for a specific subject.
        
        Args:
            SubjectName: Subject name to filter by
            
        Returns:
            List of Book objects
        """
        Query = """
            SELECT b.id, b.title, b.author, b.category_id, b.subject_id, b.FilePath, b.ThumbnailPath,
                   c.category, s.subject
            FROM books b
            LEFT JOIN categories c ON b.category_id = c.id
            LEFT JOIN subjects s ON b.subject_id = s.id
            WHERE s.subject = ?
            ORDER BY b.title ASC
        """
        Rows = self.ExecuteQuery(Query, (SubjectName,))
        
        return self._ConvertRowsToBooks(Rows)
    
    def SearchBooks(self, SearchTerm: str) -> List[Book]:
        """
        Search books by title (case-insensitive).
        
        Args:
            SearchTerm: Search text to match against titles
            
        Returns:
            List of Book objects matching search criteria
        """
        Query = """
            SELECT b.id, b.title, b.author, b.category_id, b.subject_id, b.FilePath, b.ThumbnailPath,
                   c.category, s.subject
            FROM books b
            LEFT JOIN categories c ON b.category_id = c.id
            LEFT JOIN subjects s ON b.subject_id = s.id
            WHERE b.title LIKE ? 
            ORDER BY b.title COLLATE NOCASE ASC
        """
        SearchPattern = f"%{SearchTerm}%"
        Rows = self.ExecuteQuery(Query, (SearchPattern,))
        
        return self._ConvertRowsToBooks(Rows)
    
    def GetAllBooks(self) -> List[Book]:
        """
        Get all books with category and subject information.
        
        Returns:
            List of all Book objects
        """
        Query = """
            SELECT b.id, b.title, b.author, b.category_id, b.subject_id, b.FilePath, b.ThumbnailPath,
                   c.category, s.subject
            FROM books b
            LEFT JOIN categories c ON b.category_id = c.id
            LEFT JOIN subjects s ON b.subject_id = s.id
            ORDER BY b.title ASC
        """
        Rows = self.ExecuteQuery(Query)
        
        return self._ConvertRowsToBooks(Rows)
    
    def GetBookById(self, BookId: int) -> Optional[Book]:
        """
        Get book by ID with full category and subject information.
        
        Args:
            BookId: Book identifier
            
        Returns:
            Book object or None if not found
        """
        Query = """
            SELECT b.id, b.title, b.author, b.category_id, b.subject_id, b.FilePath, b.ThumbnailPath,
                   c.category, s.subject
            FROM books b
            LEFT JOIN categories c ON b.category_id = c.id
            LEFT JOIN subjects s ON b.subject_id = s.id
            WHERE b.id = ?
        """
        Rows = self.ExecuteQuery(Query, (BookId,))
        
        if Rows:
            Books = self._ConvertRowsToBooks(Rows)
            return Books[0] if Books else None
        
        return None
    
    def GetBookByTitle(self, Title: str) -> Optional[Book]:
        """
        Get book by exact title match.
        
        Args:
            Title: Exact book title
            
        Returns:
            Book object or None if not found
        """
        Query = """
            SELECT b.id, b.title, b.author, b.category_id, b.subject_id, b.FilePath, b.ThumbnailPath,
                   c.category, s.subject
            FROM books b
            LEFT JOIN categories c ON b.category_id = c.id
            LEFT JOIN subjects s ON b.subject_id = s.id
            WHERE b.title = ?
        """
        Rows = self.ExecuteQuery(Query, (Title,))
        
        if Rows:
            Books = self._ConvertRowsToBooks(Rows)
            return Books[0] if Books else None
        
        return None
    
    # =================================================================
    # UTILITY METHODS
    # =================================================================
    
    def _ConvertRowsToBooks(self, Rows: List[sqlite3.Row]) -> List[Book]:
        """
        Convert database rows to Book objects with enhanced filename generation.
        
        Args:
            Rows: Database rows from book queries
            
        Returns:
            List of Book objects
        """
        Books = []
        # Check if 'author' column exists from the first row
        has_author = Rows and 'author' in Rows[0].keys()
        has_filepath = Rows and 'FilePath' in Rows[0].keys()
        has_thumbnailpath = Rows and 'ThumbnailPath' in Rows[0].keys()

        for Row in Rows:
            # Generate filename from title if not stored in database
            FileName = self._GenerateFilenameFromTitle(Row['title'])
            
            BookObj = Book(
                Id=Row['id'],
                Title=Row['title'],
                Author=Row['author'] if has_author and Row['author'] is not None else "",
                Category=Row['category'] or "",
                Subject=Row['subject'] or "",
                FileName=FileName,
                FilePath=Row['FilePath'] if has_filepath else "",
                ThumbnailPath=Row['ThumbnailPath'] if has_thumbnailpath else ""
            )
            Books.append(BookObj)
        
        return Books
    
    def _GenerateFilenameFromTitle(self, Title: str) -> str:
        """
        Generate PDF filename from book title.
        Assumes title matches filename without .pdf extension.
        
        Args:
            Title: Book title
            
        Returns:
            Generated filename with .pdf extension
        """
        if not Title:
            return ""
        
        # For now, assume title equals filename (current database structure)
        # Future enhancement: store actual filenames in database
        return f"{Title}.pdf"
    
    def GetDatabaseStats(self) -> Dict[str, int]:
        """
        Get database statistics for dashboard display.
        
        Returns:
            Dictionary with counts of categories, subjects, books
        """
        Stats = {}
        
        try:
            # Get category count
            CategoryRows = self.ExecuteQuery("SELECT COUNT(*) FROM categories")
            Stats['Categories'] = CategoryRows[0][0] if CategoryRows else 0
            
            # Get subject count
            SubjectRows = self.ExecuteQuery("SELECT COUNT(*) FROM subjects")
            Stats['Subjects'] = SubjectRows[0][0] if SubjectRows else 0
            
            # Get book count
            BookRows = self.ExecuteQuery("SELECT COUNT(*) FROM books")
            Stats['Books'] = BookRows[0][0] if BookRows else 0
            
        except Exception as Error:
            self.Logger.error(f"Failed to get database stats: {Error}")
            Stats = {'Categories': 0, 'Subjects': 0, 'Books': 0}
        
        return Stats
    
    def ValidateDatabase(self) -> List[str]:
        """
        Validate database integrity and return list of issues found.
        
        Returns:
            List of validation error messages (empty if no issues)
        """
        Issues = []
        
        try:
            # Check for required tables
            RequiredTables = ['categories', 'subjects', 'books']
            Query = "SELECT name FROM sqlite_master WHERE type='table'"
            Rows = self.ExecuteQuery(Query)
            ExistingTables = [Row['name'] for Row in Rows]
            
            for Table in RequiredTables:
                if Table not in ExistingTables:
                    Issues.append(f"Missing required table: {Table}")
            
            # Check for orphaned records
            OrphanQuery = """
                SELECT COUNT(*) FROM subjects s 
                LEFT JOIN categories c ON s.category_id = c.id 
                WHERE c.id IS NULL
            """
            OrphanRows = self.ExecuteQuery(OrphanQuery)
            OrphanCount = OrphanRows[0][0] if OrphanRows else 0
            
            if OrphanCount > 0:
                Issues.append(f"Found {OrphanCount} orphaned subjects")
            
        except Exception as Error:
            Issues.append(f"Database validation failed: {Error}")
        
        return Issues
================
File: Source/Core/__init__.py
================
# File: __init__.py
# Path: Source/__init__.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  14:09PM
"""
Description: Anderson's Library Source Package
Main source code package for Anderson's Library application.

Purpose: Package initialization for Source module. Provides clean
import interfaces and package-level configuration.
"""

# Package version and metadata
__version__ = "2.0.0"
__author__ = "Herb Bowers - Project Himalaya"
__email__ = "HimalayaProject1@gmail.com"

# Package-level imports can be added here as needed
# Example:
# from .module_name import ClassName

__all__ = [
    # Add public interface exports here
]

================
File: Source/DADs/CompatibilityPatch.py
================
#!/usr/bin/env python3
# File: CompatibilityPatch.py
# Path: CompatibilityPatch.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  05:25PM
"""
Description: Compatibility Patch for Anderson's Library DatabaseModels
Adds missing legacy compatibility functions to DatabaseModels.py to support
the transition from old monolithic code to new modular architecture.
"""

import os
import sys
from pathlib import Path

def ApplyCompatibilityPatch():
    """Apply compatibility patch to DatabaseModels.py"""
    
    print("🔧 Anderson's Library - Compatibility Patch")
    print("=" * 50)
    print("📄 Adding legacy function support to DatabaseModels.py")
    
    DatabaseModelsPath = "Source/Data/DatabaseModels.py"
    
    # Check if file exists
    if not os.path.exists(DatabaseModelsPath):
        print(f"❌ File not found: {DatabaseModelsPath}")
        return False
    
    # Read current content
    try:
        with open(DatabaseModelsPath, 'r', encoding='utf-8') as File:
            Content = File.read()
    except Exception as Error:
        print(f"❌ Error reading file: {Error}")
        return False
    
    # Check if already patched
    if "CreateCategoryFromRow" in Content and "def CreateCategoryFromRow" in Content:
        print("✅ Already patched - compatibility functions found")
        return True
    
    # Compatibility functions to add
    CompatibilityFunctions = '''

# ================================================================
# LEGACY COMPATIBILITY FUNCTIONS
# ================================================================
# These functions provide compatibility with the old monolithic code
# that expects specific function names and signatures.

def CreateCategoryFromRow(Data: Dict[str, Any]) -> CategoryInfo:
    """
    Legacy compatibility function to create CategoryInfo from database row.
    Maps old database row format to new CategoryInfo dataclass.
    """
    try:
        return CategoryInfo(
            Name=str(Data.get('Name', Data.get('Category', Data.get('name', '')))),
            BookCount=int(Data.get('BookCount', Data.get('Count', Data.get('count', 0)))),
            ParentCategory=str(Data.get('ParentCategory', Data.get('parent', ''))),
            Description=str(Data.get('Description', Data.get('description', ''))),
            DisplayOrder=int(Data.get('DisplayOrder', Data.get('order', 0)))
        )
    except Exception as Error:
        logging.error(f"Error creating CategoryInfo from data: {Error}")
        return CategoryInfo()


def CreateSubjectFromRow(Data: Dict[str, Any]) -> CategoryInfo:
    """
    Legacy compatibility function to create Subject (CategoryInfo) from database row.
    Subjects are treated as categories in the new architecture.
    """
    try:
        return CategoryInfo(
            Name=str(Data.get('Subject', Data.get('Name', Data.get('subject', '')))),
            BookCount=int(Data.get('BookCount', Data.get('Count', Data.get('count', 0)))),
            ParentCategory=str(Data.get('ParentSubject', Data.get('parent', ''))),
            Description=str(Data.get('Description', Data.get('description', ''))),
            DisplayOrder=int(Data.get('DisplayOrder', Data.get('order', 0)))
        )
    except Exception as Error:
        logging.error(f"Error creating Subject from data: {Error}")
        return CategoryInfo()


def CreateAuthorFromRow(Data: Dict[str, Any]) -> str:
    """
    Legacy compatibility function to extract author name from database row.
    Returns the author name as a simple string.
    """
    try:
        return str(Data.get('Author', Data.get('author', Data.get('Name', '')))
    except Exception as Error:
        logging.error(f"Error extracting author from data: {Error}")
        return ""


def GetBookById(BookId: int, Books: List[BookRecord]) -> Optional[BookRecord]:
    """
    Legacy compatibility function to find a book by ID.
    Searches through a list of BookRecord objects.
    """
    try:
        for Book in Books:
            if Book.Id == BookId:
                return Book
        return None
    except Exception as Error:
        logging.error(f"Error finding book by ID {BookId}: {Error}")
        return None


def GetBooksByCategory(Category: str, Books: List[BookRecord]) -> List[BookRecord]:
    """
    Legacy compatibility function to filter books by category.
    Returns all books matching the specified category.
    """
    try:
        return [Book for Book in Books if Book.Category.lower() == Category.lower()]
    except Exception as Error:
        logging.error(f"Error filtering books by category {Category}: {Error}")
        return []


def GetBooksByAuthor(Author: str, Books: List[BookRecord]) -> List[BookRecord]:
    """
    Legacy compatibility function to filter books by author.
    Returns all books by the specified author.
    """
    try:
        return [Book for Book in Books if Author.lower() in Book.Author.lower()]
    except Exception as Error:
        logging.error(f"Error filtering books by author {Author}: {Error}")
        return []


def FormatFileSize(SizeBytes: int) -> str:
    """
    Legacy compatibility function for file size formatting.
    Alias for BookRecord.GetFileSizeFormatted() method.
    """
    try:
        if SizeBytes < 1024:
            return f"{SizeBytes} bytes"
        elif SizeBytes < 1024 * 1024:
            return f"{SizeBytes / 1024:.1f} KB"
        elif SizeBytes < 1024 * 1024 * 1024:
            return f"{SizeBytes / (1024 * 1024):.1f} MB"
        else:
            return f"{SizeBytes / (1024 * 1024 * 1024):.1f} GB"
    except Exception as Error:
        logging.error(f"Error formatting file size {SizeBytes}: {Error}")
        return "Unknown"


def ValidateBookData(Data: Dict[str, Any]) -> bool:
    """
    Legacy compatibility function to validate book data dictionary.
    Checks if required fields are present and valid.
    """
    try:
        RequiredFields = ['Title', 'FileName', 'FilePath']
        for Field in RequiredFields:
            if Field not in Data or not Data[Field]:
                return False
        return True
    except Exception as Error:
        logging.error(f"Error validating book data: {Error}")
        return False


# ================================================================
# ADDITIONAL COMPATIBILITY ALIASES
# ================================================================

# Function aliases for different naming conventions
CreateBookFromDict = CreateBookRecordFromDict  # Alternative alias
CreateCategoryFromDict = CreateCategoryFromRow  # Dict vs Row naming
CreateSubjectFromDict = CreateSubjectFromRow    # Dict vs Row naming

# Class aliases for old naming conventions  
BookData = BookRecord           # Alternative class name
CategoryData = CategoryInfo     # Alternative class name
SubjectData = CategoryInfo      # Alternative class name
LibraryStats = LibraryStatistics # Shorter alias

# Legacy constants that might be expected
DEFAULT_CATEGORY = "Uncategorized"
DEFAULT_LANGUAGE = "English"
DEFAULT_FILE_FORMAT = "PDF"
MAX_RATING = 5
MIN_RATING = 0
'''

    # Add the compatibility functions to the end of the file
    NewContent = Content + CompatibilityFunctions
    
    # Write back to file
    try:
        with open(DatabaseModelsPath, 'w', encoding='utf-8') as File:
            File.write(NewContent)
        
        print("✅ Compatibility patch applied successfully!")
        print("📝 Added the following legacy functions:")
        print("   • CreateCategoryFromRow")
        print("   • CreateSubjectFromRow") 
        print("   • CreateAuthorFromRow")
        print("   • GetBookById")
        print("   • GetBooksByCategory")
        print("   • GetBooksByAuthor")
        print("   • FormatFileSize")
        print("   • ValidateBookData")
        print("📝 Added compatibility aliases:")
        print("   • CreateBookFromDict")
        print("   • CreateCategoryFromDict")
        print("   • CreateSubjectFromDict")
        print("   • BookData, CategoryData, SubjectData")
        print("   • LibraryStats")
        
        return True
        
    except Exception as Error:
        print(f"❌ Error writing patched file: {Error}")
        return False


def ValidatePatch():
    """Validate that the patch was applied correctly"""
    print("\n🔍 Validating patch...")
    
    DatabaseModelsPath = "Source/Data/DatabaseModels.py"
    
    try:
        with open(DatabaseModelsPath, 'r', encoding='utf-8') as File:
            Content = File.read()
        
        # Check for key functions
        RequiredFunctions = [
            "def CreateCategoryFromRow",
            "def CreateSubjectFromRow", 
            "def CreateAuthorFromRow",
            "CreateBookFromRow =",  # Alias
            "BookData =",           # Alias
        ]
        
        Missing = []
        for Function in RequiredFunctions:
            if Function not in Content:
                Missing.append(Function)
        
        if Missing:
            print("⚠️  Some functions may be missing:")
            for Func in Missing:
                print(f"   • {Func}")
            return False
        else:
            print("✅ All compatibility functions verified!")
            return True
            
    except Exception as Error:
        print(f"❌ Error validating patch: {Error}")
        return False


def BackupOriginal():
    """Create backup of original file"""
    DatabaseModelsPath = "Source/Data/DatabaseModels.py"
    BackupPath = "Source/Data/DatabaseModels_backup.py"
    
    try:
        if os.path.exists(DatabaseModelsPath) and not os.path.exists(BackupPath):
            import shutil
            shutil.copy2(DatabaseModelsPath, BackupPath)
            print(f"💾 Backup created: {BackupPath}")
            return True
    except Exception as Error:
        print(f"⚠️  Could not create backup: {Error}")
        return False


def Main():
    """Main patch application"""
    print("🏔️ Anderson's Library - Compatibility Patch")
    print("=" * 50)
    print("🎯 Adding legacy function support for smooth migration")
    print("=" * 50)
    
    # Create backup first
    BackupOriginal()
    
    # Apply patch
    if ApplyCompatibilityPatch():
        # Validate patch
        if ValidatePatch():
            print("\n" + "=" * 50)
            print("🎉 PATCH APPLIED SUCCESSFULLY!")
            print("=" * 50)
            print("🚀 Now try running: python AndersonLibrary.py")
            print("💡 Your legacy code should now work with the new modular architecture!")
            return 0
        else:
            print("\n⚠️  Patch applied but validation failed")
            return 1
    else:
        print("\n❌ Patch application failed")
        return 1


if __name__ == "__main__":
    sys.exit(Main())
================
File: Source/DADs/CustomWindowFix.py
================
#!/usr/bin/env python3
# File: CustomWindowFix.py
# Path: CustomWindowFix.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  05:35PM
"""
Description: CustomWindow Parameter Fix for Anderson's Library
Fixes the missing 'title' parameter issue in MainWindow.py when calling CustomWindow.__init__()
"""

import os
import sys
import re

def FixCustomWindowInit():
    """Fix the CustomWindow initialization in MainWindow.py"""
    
    print("🔧 Anderson's Library - CustomWindow Fix")
    print("=" * 50)
    print("🛠️  Fixing CustomWindow title parameter in MainWindow.py")
    
    MainWindowPath = "Source/Interface/MainWindow.py"
    
    # Check if file exists
    if not os.path.exists(MainWindowPath):
        print(f"❌ File not found: {MainWindowPath}")
        return False
    
    # Read current content
    try:
        with open(MainWindowPath, 'r', encoding='utf-8') as File:
            Content = File.read()
    except Exception as Error:
        print(f"❌ Error reading file: {Error}")
        return False
    
    # Find the CustomWindow class definition line
    Lines = Content.split('\n')
    Fixed = False
    
    for i, Line in enumerate(Lines):
        LineNum = i + 1
        
        # Look for the class definition
        if 'class AndersonMainWindow(CustomWindow):' in Line:
            print(f"✅ Found class definition at line {LineNum}")
            
            # Look for the __init__ method in the next few lines
            for j in range(i, min(i + 20, len(Lines))):
                if 'def __init__(self):' in Lines[j]:
                    print(f"✅ Found __init__ method at line {j + 1}")
                    
                    # Look for super().__init__() call in the next few lines
                    for k in range(j, min(j + 15, len(Lines))):
                        if 'super().__init__()' in Lines[k]:
                            # Replace with title parameter
                            Lines[k] = Lines[k].replace(
                                'super().__init__()', 
                                'super().__init__("Anderson\'s Library - Professional Edition")'
                            )
                            print(f"✅ Fixed line {k + 1}: Added title parameter to super().__init__()")
                            Fixed = True
                            break
                        elif 'super(AndersonMainWindow, self).__init__()' in Lines[k]:
                            # Alternative super() syntax
                            Lines[k] = Lines[k].replace(
                                'super(AndersonMainWindow, self).__init__()', 
                                'super(AndersonMainWindow, self).__init__("Anderson\'s Library - Professional Edition")'
                            )
                            print(f"✅ Fixed line {k + 1}: Added title parameter to super() call")
                            Fixed = True
                            break
                    
                    if Fixed:
                        break
            
            if Fixed:
                break
    
    if not Fixed:
        # Try a more general approach - look for any super().__init__() calls
        for i, Line in enumerate(Lines):
            if 'super().__init__()' in Line and 'AndersonMainWindow' in Lines[max(0, i-10):i+1]:
                Lines[i] = Line.replace(
                    'super().__init__()', 
                    'super().__init__("Anderson\'s Library - Professional Edition")'
                )
                print(f"✅ Fixed line {i + 1}: Added title parameter to super().__init__()")
                Fixed = True
                break
    
    if Fixed:
        # Write back to file
        try:
            NewContent = '\n'.join(Lines)
            with open(MainWindowPath, 'w', encoding='utf-8') as File:
                File.write(NewContent)
            
            print("✅ CustomWindow fix applied successfully!")
            return True
            
        except Exception as Error:
            print(f"❌ Error writing fixed file: {Error}")
            return False
    else:
        print("⚠️  Could not automatically fix the issue")
        print("💡 Manual fix needed:")
        print("   1. Open Source/Interface/MainWindow.py")
        print("   2. Find line with super().__init__()")
        print("   3. Change it to: super().__init__(\"Anderson's Library - Professional Edition\")")
        return False


def AlternativeFix():
    """Alternative fix: Modify CustomWindow to make title optional"""
    print("\n🔧 Alternative Fix: Making CustomWindow title optional")
    
    CustomWindowPath = "Source/Interface/CustomWindow.py"
    
    if not os.path.exists(CustomWindowPath):
        print(f"❌ File not found: {CustomWindowPath}")
        return False
    
    try:
        with open(CustomWindowPath, 'r', encoding='utf-8') as File:
            Content = File.read()
        
        # Look for __init__ method and make title optional
        if 'def __init__(self, title):' in Content:
            Content = Content.replace(
                'def __init__(self, title):',
                'def __init__(self, title="Application"):'
            )
            print("✅ Made title parameter optional in CustomWindow")
            
            with open(CustomWindowPath, 'w', encoding='utf-8') as File:
                File.write(Content)
            
            return True
        elif 'def __init__(self, title,' in Content:
            # More complex constructor - need to be more careful
            Lines = Content.split('\n')
            for i, Line in enumerate(Lines):
                if 'def __init__(self, title,' in Line and 'title=' not in Line:
                    Lines[i] = Line.replace('title,', 'title="Application",')
                    print(f"✅ Made title parameter optional in CustomWindow at line {i + 1}")
                    
                    NewContent = '\n'.join(Lines)
                    with open(CustomWindowPath, 'w', encoding='utf-8') as File:
                        File.write(NewContent)
                    
                    return True
        
        print("⚠️  Could not automatically modify CustomWindow constructor")
        return False
        
    except Exception as Error:
        print(f"❌ Error modifying CustomWindow: {Error}")
        return False


def ValidateFix():
    """Validate that the fix works by checking syntax"""
    print("\n🔍 Validating fix...")
    
    try:
        # Try to import the modules to see if they work
        import subprocess
        Result = subprocess.run([
            sys.executable, '-c', 
            'import sys; sys.path.insert(0, "."); from Source.Interface.MainWindow import AndersonMainWindow'
        ], capture_output=True, text=True, cwd='.')
        
        if Result.returncode == 0:
            print("✅ Import test passed!")
            return True
        else:
            print(f"❌ Import test failed: {Result.stderr}")
            return False
            
    except Exception as Error:
        print(f"❌ Validation error: {Error}")
        return False


def Main():
    """Main fix application"""
    print("🏔️ Anderson's Library - CustomWindow Fix")
    print("=" * 50)
    print("🛠️  Fixing CustomWindow title parameter issue")
    print("=" * 50)
    
    # Try primary fix first
    if FixCustomWindowInit():
        print("✅ Primary fix applied (added title to super().__init__)")
    else:
        # Try alternative fix
        if AlternativeFix():
            print("✅ Alternative fix applied (made title optional)")
        else:
            print("❌ Both automatic fixes failed")
            print("\n💡 Manual Fix Instructions:")
            print("   Option 1: Edit Source/Interface/MainWindow.py")
            print("   Find: super().__init__()")
            print("   Replace: super().__init__(\"Anderson's Library\")")
            print("\n   Option 2: Edit Source/Interface/CustomWindow.py")
            print("   Find: def __init__(self, title):")
            print("   Replace: def __init__(self, title=\"Application\"):")
            return 1
    
    # Validate the fix
    if ValidateFix():
        print("\n" + "=" * 50)
        print("🎉 CUSTOMWINDOW FIX SUCCESSFUL!")
        print("=" * 50)
        print("🚀 Now try running: python AndersonLibrary.py")
        print("🎉 Anderson's Library should launch!")
        return 0
    else:
        print("\n⚠️  Fix applied but validation failed")
        print("💡 Try running manually: python AndersonLibrary.py")
        return 1


if __name__ == "__main__":
    sys.exit(Main())
================
File: Source/DADs/FinalImportFix.py
================
#!/usr/bin/env python3
# File: FinalImportFix.py
# Path: FinalImportFix.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  05:55PM
"""
Description: Final Import Fix for Anderson's Library
Adds missing QSizePolicy import to MainWindow.py - the final fix needed!
"""

import os
import sys
import re

def AddMissingImports():
    """Add missing QSizePolicy import to MainWindow.py"""
    
    print("🔧 Anderson's Library - Final Import Fix")
    print("=" * 50)
    print("📦 Adding missing QSizePolicy import to MainWindow.py")
    
    MainWindowPath = "Source/Interface/MainWindow.py"
    
    # Check if file exists
    if not os.path.exists(MainWindowPath):
        print(f"❌ File not found: {MainWindowPath}")
        return False
    
    # Read current content
    try:
        with open(MainWindowPath, 'r', encoding='utf-8') as File:
            Content = File.read()
    except Exception as Error:
        print(f"❌ Error reading file: {Error}")
        return False
    
    # Check if QSizePolicy is already imported
    if 'QSizePolicy' in Content and 'from PySide6.QtWidgets import' in Content:
        print("🔍 Checking current imports...")
        
        Lines = Content.split('\n')
        Fixed = False
        
        # Find the QtWidgets import line and add QSizePolicy
        for i, Line in enumerate(Lines):
            if 'from PySide6.QtWidgets import' in Line and 'QSizePolicy' not in Line:
                # Add QSizePolicy to the import
                if Line.endswith(')'):
                    # Multi-line import - add before the closing parenthesis
                    Lines[i] = Line.replace(')', ', QSizePolicy)')
                else:
                    # Single line import - add at the end
                    Lines[i] = Line + ', QSizePolicy'
                
                print(f"✅ Added QSizePolicy to imports at line {i + 1}")
                Fixed = True
                break
        
        # If we couldn't find a single line, look for multi-line imports
        if not Fixed:
            for i, Line in enumerate(Lines):
                if 'from PySide6.QtWidgets import (' in Line:
                    # This is the start of a multi-line import
                    # Find the end and add QSizePolicy before the closing )
                    for j in range(i, min(i + 10, len(Lines))):
                        if ')' in Lines[j] and 'QSizePolicy' not in Lines[j]:
                            Lines[j] = Lines[j].replace(')', ', QSizePolicy)')
                            print(f"✅ Added QSizePolicy to multi-line imports at line {j + 1}")
                            Fixed = True
                            break
                    break
        
        if Fixed:
            # Write back to file
            try:
                NewContent = '\n'.join(Lines)
                with open(MainWindowPath, 'w', encoding='utf-8') as File:
                    File.write(NewContent)
                
                print("✅ Import fix applied successfully!")
                return True
                
            except Exception as Error:
                print(f"❌ Error writing fixed file: {Error}")
                return False
        else:
            print("⚠️  Could not automatically add QSizePolicy to imports")
            return False
    else:
        print("❌ Could not find PySide6.QtWidgets import line")
        return False


def ValidateImports():
    """Validate that all required imports are present"""
    print("\n🔍 Validating imports...")
    
    MainWindowPath = "Source/Interface/MainWindow.py"
    
    try:
        with open(MainWindowPath, 'r', encoding='utf-8') as File:
            Content = File.read()
        
        RequiredImports = [
            'QApplication', 'QMainWindow', 'QWidget', 'QMenuBar', 
            'QStatusBar', 'QToolBar', 'QMessageBox', 'QProgressBar',
            'QLabel', 'QSplitter', 'QSizePolicy'
        ]
        
        MissingImports = []
        for Import in RequiredImports:
            if Import not in Content:
                MissingImports.append(Import)
        
        if MissingImports:
            print(f"⚠️  Still missing imports: {', '.join(MissingImports)}")
            return False
        else:
            print("✅ All required imports found!")
            return True
            
    except Exception as Error:
        print(f"❌ Validation error: {Error}")
        return False


def CheckForOtherMissingImports():
    """Check MainWindow.py for any other potentially missing imports"""
    print("\n🔍 Checking for other potential import issues...")
    
    MainWindowPath = "Source/Interface/MainWindow.py"
    
    try:
        with open(MainWindowPath, 'r', encoding='utf-8') as File:
            Content = File.read()
        
        # Common PySide6 classes that might be missing
        PotentialMissing = []
        
        # Check for Qt classes used but not imported
        QtClasses = [
            'QVBoxLayout', 'QHBoxLayout', 'QPushButton', 'QComboBox',
            'QLineEdit', 'QTextEdit', 'QDialog', 'QFileDialog',
            'QScrollArea', 'QFrame', 'QGroupBox', 'QCheckBox',
            'QRadioButton', 'QSlider', 'QSpinBox', 'QDateEdit',
            'QListWidget', 'QTreeWidget', 'QTableWidget'
        ]
        
        for ClassName in QtClasses:
            if ClassName in Content and f'import.*{ClassName}' not in Content:
                # This class is used but might not be imported
                if 'from PySide6.QtWidgets import' in Content:
                    # Check if it's in the QtWidgets import line
                    ImportLines = [line for line in Content.split('\n') if 'from PySide6.QtWidgets import' in line]
                    ImportText = ' '.join(ImportLines)
                    if ClassName not in ImportText:
                        PotentialMissing.append(ClassName)
        
        if PotentialMissing:
            print(f"⚠️  Potentially missing imports: {', '.join(PotentialMissing[:5])}")  # Show first 5
            return PotentialMissing
        else:
            print("✅ No obvious missing imports detected")
            return []
            
    except Exception as Error:
        print(f"❌ Error checking imports: {Error}")
        return []


def Main():
    """Main import fix"""
    print("🏔️ Anderson's Library - Final Import Fix")
    print("=" * 50)
    print("📦 Adding missing QSizePolicy import")
    print("💡 This should be the FINAL fix needed!")
    print("=" * 50)
    
    # Apply the fix
    if AddMissingImports():
        # Validate imports
        if ValidateImports():
            print("\n" + "=" * 50)
            print("🎉 FINAL IMPORT FIX SUCCESSFUL!")
            print("=" * 50)
            print("🚀 Now try running: python AndersonLibrary.py")
            print("🎉 Anderson's Library should fully launch!")
            print("🏔️ Welcome to Professional Modular Architecture!")
            
            # Check for any other potential issues
            CheckForOtherMissingImports()
            
            return 0
        else:
            print("\n⚠️  Import fix applied but validation shows other missing imports")
            return 1
    else:
        print("\n❌ Could not automatically fix imports")
        print("💡 Manual fix:")
        print("   Edit Source/Interface/MainWindow.py")
        print("   Add QSizePolicy to the PySide6.QtWidgets import line")
        print("   Example: from PySide6.QtWidgets import (..., QSizePolicy)")
        return 1


if __name__ == "__main__":
    sys.exit(Main())
================
File: Source/DADs/MigrateToModular.py
================
#!/usr/bin/env python3
# File: MigrateToModular.py
# Path: MigrateToModular.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  04:12PM
"""
Description: Anderson's Library Migration Helper
Automates the migration from monolithic Andy.py to the new modular architecture.
Handles file copying, structure creation, and validation.
"""

import os
import shutil
import sys
from pathlib import Path
from datetime import datetime

class MigrationHelper:
    """Helps migrate Anderson's Library to modular architecture"""
    
    def __init__(self):
        self.BaseDir = Path(".")
        self.RequiredDirs = [
            "Source",
            "Source/Data", 
            "Source/Core",
            "Source/Interface",
            "Source/Utils",
            "Source/Framework"
        ]
        
        self.RequiredFiles = {
            # Source files that should exist
            "Source/Data/DatabaseModels.py": "Data models and structures",
            "Source/Core/DatabaseManager.py": "Database operations",
            "Source/Core/BookService.py": "Business logic",
            "Source/Interface/FilterPanel.py": "Search and filter UI",
            "Source/Interface/BookGrid.py": "Book display grid",
            "Source/Interface/MainWindow.py": "Main application window"
        }
        
        self.InitFiles = [
            "Source/__init__.py",
            "Source/Data/__init__.py", 
            "Source/Core/__init__.py",
            "Source/Interface/__init__.py",
            "Source/Utils/__init__.py",
            "Source/Framework/__init__.py"
        ]
    
    def PrintHeader(self):
        """Print migration header"""
        print("🏔️ Anderson's Library - Modular Migration")
        print("=" * 50)
        print("📚 Migrating to Professional Architecture")
        print("🎯 Design Standard v1.8 Compliant")
        print("⚡ From Monolithic to Modular")
        print("=" * 50)
    
    def CreateDirectories(self):
        """Create required directory structure"""
        print("\n📁 Creating directory structure...")
        
        for Dir in self.RequiredDirs:
            DirPath = self.BaseDir / Dir
            if not DirPath.exists():
                DirPath.mkdir(parents=True, exist_ok=True)
                print(f"   ✅ Created: {Dir}")
            else:
                print(f"   ✅ Exists: {Dir}")
    
    def CreateInitFiles(self):
        """Create __init__.py files for Python packages"""
        print("\n📄 Creating __init__.py files...")
        
        InitContents = {
            "Source/__init__.py": '''"""Anderson's Library Source Package"""
__version__ = "1.0.0"
__author__ = "Herb Bowers"
''',
            "Source/Data/__init__.py": '''"""Data Layer Package"""
from .DatabaseModels import BookRecord, SearchCriteria, SearchResult
__all__ = ['BookRecord', 'SearchCriteria', 'SearchResult']
''',
            "Source/Core/__init__.py": '''"""Core Services Package"""
from .DatabaseManager import DatabaseManager
from .BookService import BookService
__all__ = ['DatabaseManager', 'BookService']
''',
            "Source/Interface/__init__.py": '''"""User Interface Package"""
from .MainWindow import AndersonMainWindow, RunApplication
__all__ = ['AndersonMainWindow', 'RunApplication']
''',
            "Source/Utils/__init__.py": '''"""Utilities Package"""
__all__ = []
''',
            "Source/Framework/__init__.py": '''"""Framework Package"""
__all__ = []
'''
        }
        
        for InitFile in self.InitFiles:
            InitPath = self.BaseDir / InitFile
            if not InitPath.exists():
                Content = InitContents.get(InitFile, '"""Package init file"""')
                InitPath.write_text(Content)
                print(f"   ✅ Created: {InitFile}")
            else:
                print(f"   ✅ Exists: {InitFile}")
    
    def CopyCustomWindow(self):
        """Copy existing CustomWindow.py to new location"""
        print("\n🪟 Copying CustomWindow.py...")
        
        # Look for existing CustomWindow.py
        PossiblePaths = [
            "CustomWindow.py",
            "./CustomWindow.py", 
            "../CustomWindow.py"
        ]
        
        SourcePath = None
        for Path in PossiblePaths:
            if os.path.exists(Path):
                SourcePath = Path
                break
        
        if SourcePath:
            DestPath = "Source/Interface/CustomWindow.py"
            try:
                shutil.copy2(SourcePath, DestPath)
                print(f"   ✅ Copied: {SourcePath} → {DestPath}")
                
                # Update the header in the copied file
                self.UpdateFileHeader(DestPath)
                
            except Exception as Error:
                print(f"   ❌ Failed to copy: {Error}")
                return False
        else:
            print("   ⚠️  CustomWindow.py not found in current directory")
            print("   💡 Please copy it manually to Source/Interface/CustomWindow.py")
            return False
        
        return True
    
    def UpdateFileHeader(self, FilePath):
        """Update file header to match Design Standard v1.8"""
        try:
            with open(FilePath, 'r', encoding='utf-8') as File:
                Content = File.read()
            
            # Simple header update - just add if missing
            if "# File:" not in Content and "# Path:" not in Content:
                FileName = os.path.basename(FilePath)
                HeaderComment = f'''# File: {FileName}
# Path: {FilePath}
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  04:12PM
"""
Description: {FileName.replace('.py', '')} - BowersWorld Framework Component
Migrated from monolithic architecture to modular design.
"""

'''
                Content = HeaderComment + Content
                
                with open(FilePath, 'w', encoding='utf-8') as File:
                    File.write(Content)
                
                print(f"   📝 Updated header in {FileName}")
                
        except Exception as Error:
            print(f"   ⚠️  Could not update header: {Error}")
    
    def ValidateStructure(self):
        """Validate the migrated structure"""
        print("\n🔍 Validating migration...")
        
        Issues = []
        
        # Check directories
        for Dir in self.RequiredDirs:
            if not (self.BaseDir / Dir).exists():
                Issues.append(f"Missing directory: {Dir}")
        
        # Check required files (that should have been created by artifacts)
        for File, Description in self.RequiredFiles.items():
            if not (self.BaseDir / File).exists():
                Issues.append(f"Missing file: {File} ({Description})")
        
        # Check CustomWindow
        if not (self.BaseDir / "Source/Interface/CustomWindow.py").exists():
            Issues.append("Missing CustomWindow.py - copy manually")
        
        # Check database
        DatabasePaths = [
            "Assets/my_library.db",
            "Data/my_library.db",
            "Data/Databases/my_library.db" 
        ]
        
        DatabaseFound = any(os.path.exists(Path) for Path in DatabasePaths)
        if not DatabaseFound:
            Issues.append("Database file not found")
        
        if Issues:
            print("   ❌ Validation Issues:")
            for Issue in Issues:
                print(f"      • {Issue}")
            return False
        else:
            print("   ✅ Migration validation passed!")
            return True
    
    def CreateEntryPoint(self):
        """Create the new entry point script"""
        print("\n🚀 Creating entry point...")
        
        EntryScript = "AndersonLibrary.py"
        if not os.path.exists(EntryScript):
            print(f"   ⚠️  {EntryScript} not found")
            print("   💡 Use the AndersonLibrary.py artifact from this session")
        else:
            print(f"   ✅ Entry point ready: {EntryScript}")
    
    def PrintNextSteps(self):
        """Print next steps for user"""
        print("\n" + "=" * 50)
        print("✅ MIGRATION HELPER COMPLETE")
        print("=" * 50)
        print("📋 Next Steps:")
        print("   1. Copy the 4 main module files from the artifacts:")
        print("      • DatabaseModels.py → Source/Data/")
        print("      • FilterPanel.py → Source/Interface/")
        print("      • BookGrid.py → Source/Interface/")
        print("      • MainWindow.py → Source/Interface/")
        print("   2. Copy AndersonLibrary.py to project root")
        print("   3. Install dependencies: pip install -r requirements.txt")
        print("   4. Run: python AndersonLibrary.py")
        print("=" * 50)
        print("🎉 Welcome to Professional Architecture!")
    
    def RunMigration(self):
        """Run the complete migration process"""
        self.PrintHeader()
        
        # Create structure
        self.CreateDirectories()
        self.CreateInitFiles()
        
        # Copy existing files
        self.CopyCustomWindow()
        
        # Create entry point
        self.CreateEntryPoint()
        
        # Validate
        IsValid = self.ValidateStructure()
        
        # Print next steps
        self.PrintNextSteps()
        
        return IsValid

def Main():
    """Main migration entry point"""
    try:
        Helper = MigrationHelper()
        Success = Helper.RunMigration()
        return 0 if Success else 1
        
    except Exception as Error:
        print(f"❌ Migration failed: {Error}")
        return 1

if __name__ == "__main__":
    sys.exit(Main())
================
File: Source/DADs/PySide6ImportFix.py
================
#!/usr/bin/env python3
# File: PySide6ImportFix.py
# Path: PySide6ImportFix.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  04:12PM
"""
Description: PySide6 Import Fix for Anderson's Library
Quick fix for PySide6 import issues where QAction moved from QtWidgets to QtGui.
"""

import os
import re

def FixPySide6Imports():
    """Fix PySide6 import issues in the modular files"""
    
    print("🔧 Fixing PySide6 import issues...")
    
    # Files to fix
    FilesToFix = [
        "Source/Interface/MainWindow.py",
        "Source/Interface/BookGrid.py",
        "Source/Interface/FilterPanel.py"
    ]
    
    # Import fixes
    Fixes = [
        # Move QAction from QtWidgets to QtGui
        {
            "pattern": r"from PySide6\.QtWidgets import \((.*?)QAction(.*?)\)",
            "replacement": lambda m: f"from PySide6.QtWidgets import ({m.group(1).replace('QAction, ', '').replace(', QAction', '')}{m.group(2)})"
        },
        # Add QAction to QtGui imports
        {
            "pattern": r"from PySide6\.QtGui import (.*?)(?=\n)",
            "replacement": lambda m: f"from PySide6.QtGui import {m.group(1).rstrip()}, QAction" if "QAction" not in m.group(1) else m.group(0)
        },
        # Fix pyqtSignal to Signal
        {
            "pattern": r"pyqtSignal",
            "replacement": "Signal"
        },
        # Add QApplication import to BookGrid if missing
        {
            "pattern": r"from PySide6\.QtWidgets import \((.*?)\)(?=.*BookGrid)",
            "replacement": lambda m: f"from PySide6.QtWidgets import ({m.group(1).rstrip()}, QApplication)" if "QApplication" not in m.group(1) else m.group(0)
        }
    ]
    
    for FilePath in FilesToFix:
        if os.path.exists(FilePath):
            print(f"   🔧 Fixing {FilePath}...")
            
            try:
                # Read file
                with open(FilePath, 'r', encoding='utf-8') as File:
                    Content = File.read()
                
                OriginalContent = Content
                
                # Apply specific fixes for each file
                if "MainWindow.py" in FilePath:
                    # Fix MainWindow imports
                    Content = re.sub(
                        r"from PySide6\.QtWidgets import \(QApplication, QMainWindow, QHBoxLayout, QVBoxLayout,\s*QWidget, QMenuBar, QStatusBar, QToolBar, QAction,",
                        "from PySide6.QtWidgets import (QApplication, QMainWindow, QHBoxLayout, QVBoxLayout, \n                               QWidget, QMenuBar, QStatusBar, QToolBar,",
                        Content
                    )
                    
                    Content = re.sub(
                        r"from PySide6\.QtGui import QIcon, QPixmap, QFont, QKeySequence, QShortcut\n",
                        "from PySide6.QtGui import QIcon, QPixmap, QFont, QKeySequence, QShortcut, QAction\n",
                        Content
                    )
                
                elif "BookGrid.py" in FilePath:
                    # Fix BookGrid imports
                    if "QApplication" not in Content and "QApplication.processEvents()" in Content:
                        Content = re.sub(
                            r"from PySide6\.QtWidgets import \((.*?QGroupBox)\)",
                            r"from PySide6.QtWidgets import (\1,\n                               QApplication)",
                            Content
                        )
                    
                    # Fix pyqtSignal
                    Content = Content.replace("pyqtSignal", "Signal")
                    Content = Content.replace(", pyqtSignal,", ",")
                
                # Write back if changed
                if Content != OriginalContent:
                    with open(FilePath, 'w', encoding='utf-8') as File:
                        File.write(Content)
                    print(f"      ✅ Fixed imports in {FilePath}")
                else:
                    print(f"      ➡️  No changes needed in {FilePath}")
                    
            except Exception as Error:
                print(f"      ❌ Error fixing {FilePath}: {Error}")
        else:
            print(f"   ❌ File not found: {FilePath}")
    
    print("✅ PySide6 import fixes complete!")

def Main():
    """Main entry point"""
    print("🏔️ Anderson's Library - PySide6 Import Fix")
    print("=" * 50)
    
    FixPySide6Imports()
    
    print("\n🚀 Try running Anderson's Library again:")
    print("python AndersonLibrary.py")

if __name__ == "__main__":
    Main()

================
File: Source/DADs/database_models_fix.py
================
# Add this to the end of your Source/Data/DatabaseModels.py file:

# Complete the COMMON_QUERIES section (it was cut off)
COMMON_QUERIES = {
    "SELECT_ALL": "SELECT * FROM Books",
    "SELECT_BY_ID": "SELECT * FROM Books WHERE Id = ?",
    "SELECT_BY_TITLE": "SELECT * FROM Books WHERE Title LIKE ?",
    "SELECT_BY_AUTHOR": "SELECT * FROM Books WHERE Author LIKE ?",
    "COUNT_TOTAL": "SELECT COUNT(*) FROM Books",
    "GET_CATEGORIES": "SELECT DISTINCT Category FROM Books WHERE Category IS NOT NULL ORDER BY Category",
    "GET_AUTHORS": "SELECT DISTINCT Author FROM Books WHERE Author IS NOT NULL ORDER BY Author",
    "GET_SUBJECTS": "SELECT DISTINCT Subject FROM Books WHERE Subject IS NOT NULL ORDER BY Subject"
}

# Legacy compatibility - add aliases for old class names AND function names
Book = BookRecord  # Compatibility alias
Category = CategoryInfo  # Compatibility alias  
Subject = CategoryInfo  # Compatibility alias for subjects
CreateBookFromRow = CreateBookRecordFromDict  # Compatibility alias for old function name
================
File: Source/Data/DatabaseModels.py
================
# File: DatabaseModels.py
# Path: Source/Data/DatabaseModels.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  05:15PM
"""
Description: Data Models for Anderson's Library
Contains all data model classes and structures for managing library books,
including database table representations, search results, and book metadata.
"""

import os
import logging
from datetime import datetime
from dataclasses import dataclass, field
from typing import List, Dict, Optional, Any, Tuple
from pathlib import Path


@dataclass
class BookRecord:
    """
    Represents a complete book record from the database.
    Contains all metadata and file information for a single book.
    """
    
    # Primary identifiers
    Id: int = 0
    Title: str = ""
    Author: Optional[str] = None
    
    # File information
    FileName: str = ""
    FilePath: str = ""
    FileSize: int = 0
    
    # Metadata
    Subject: str = ""
    Publisher: str = ""
    PublishDate: str = ""
    Keywords: str = ""
    Description: str = ""
    
    # File properties
    PageCount: int = 0
    CreationDate: str = ""
    ModificationDate: str = ""
    
    # Library classification
    Category: str = ""
    Subcategory: str = ""
    Language: str = "English"
    
    # Status and tracking
    DateAdded: str = ""
    LastAccessed: str = ""
    Rating: int = 0
    ReadStatus: str = "Unread"
    
    # Technical details
    FileFormat: str = "PDF"
    FileHash: str = ""
    ThumbnailPath: str = ""
    
    # Additional metadata
    ISBN: str = ""
    Edition: str = ""
    Series: str = ""
    Volume: str = ""
    
    def __post_init__(self):
        """Post-initialization validation and cleanup"""
        # Ensure required fields have defaults
        if not self.DateAdded:
            self.DateAdded = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Clean up file paths
        if self.FilePath:
            self.FilePath = os.path.normpath(self.FilePath)
        
        # Validate rating range
        if self.Rating < 0:
            self.Rating = 0
        elif self.Rating > 5:
            self.Rating = 5
    
    def GetDisplayTitle(self) -> str:
        """Get formatted title for display"""
        if len(self.Title) > 50:
            return self.Title[:47] + "..."
        return self.Title
    
    def GetDisplayAuthor(self) -> str:
        """Get formatted author for display"""
        if self.Author is None:
            return ""
        if len(self.Author) > 30:
            return self.Author[:27] + "..."
        return self.Author
    
    def GetFileSizeFormatted(self) -> str:
        """Get human-readable file size"""
        if self.FileSize < 1024:
            return f"{self.FileSize} bytes"
        elif self.FileSize < 1024 * 1024:
            return f"{self.FileSize / 1024:.1f} KB"
        elif self.FileSize < 1024 * 1024 * 1024:
            return f"{self.FileSize / (1024 * 1024):.1f} MB"
        else:
            return f"{self.FileSize / (1024 * 1024 * 1024):.1f} GB"
    
    def FileExists(self) -> bool:
        """Check if the book file actually exists"""
        if not self.FilePath:
            return False
        return os.path.exists(self.FilePath)
    
    def GetFullPath(self, BasePath: str = "") -> str:
        """Get complete file path, optionally with base path"""
        if BasePath and not os.path.isabs(self.FilePath):
            return os.path.join(BasePath, self.FilePath)
        return self.FilePath


@dataclass
class SearchCriteria:
    """
    Represents search and filter criteria for book queries.
    Used by the interface to communicate search parameters to the database layer.
    """
    
    # Text search fields
    SearchText: str = ""
    SearchTitle: bool = True
    SearchAuthor: bool = True
    SearchSubject: bool = True
    SearchKeywords: bool = True
    SearchDescription: bool = False
    
    # Filter criteria
    Categories: List[str] = field(default_factory=list)
    Authors: List[str] = field(default_factory=list)
    Subjects: List[str] = field(default_factory=list)
    Languages: List[str] = field(default_factory=list)
    
    # Date ranges
    DateAddedFrom: Optional[str] = None
    DateAddedTo: Optional[str] = None
    PublishDateFrom: Optional[str] = None
    PublishDateTo: Optional[str] = None
    
    # Numeric filters
    MinPageCount: Optional[int] = None
    MaxPageCount: Optional[int] = None
    MinRating: int = 0
    MaxRating: int = 5
    
    # File properties
    FileFormats: List[str] = field(default_factory=list)
    MinFileSize: Optional[int] = None
    MaxFileSize: Optional[int] = None
    
    # Status filters
    ReadStatuses: List[str] = field(default_factory=list)
    HasThumbnail: Optional[bool] = None
    FileExists: Optional[bool] = None
    
    # Sort options
    SortBy: str = "Title"
    SortOrder: str = "ASC"
    
    # Pagination
    Limit: Optional[int] = None
    Offset: int = 0
    
    def IsEmpty(self) -> bool:
        """Check if search criteria is empty (no filters applied)"""
        return (not self.SearchText and
                not self.Categories and
                not self.Authors and
                not self.Subjects and
                not self.Languages and
                not self.DateAddedFrom and
                not self.DateAddedTo and
                not self.PublishDateFrom and
                not self.PublishDateTo and
                self.MinPageCount is None and
                self.MaxPageCount is None and
                self.MinRating == 0 and
                self.MaxRating == 5 and
                not self.FileFormats and
                self.MinFileSize is None and
                self.MaxFileSize is None and
                not self.ReadStatuses and
                self.HasThumbnail is None and
                self.FileExists is None)
    
    def GetSummary(self) -> str:
        """Get human-readable summary of active filters"""
        Filters = []
        
        if self.SearchText:
            Filters.append(f"Text: '{self.SearchText}'")
        
        if self.Categories:
            Filters.append(f"Categories: {', '.join(self.Categories)}")
        
        if self.Authors:
            Filters.append(f"Authors: {', '.join(self.Authors)}")
        
        if self.Subjects:
            Filters.append(f"Subjects: {', '.join(self.Subjects)}")
        
        if self.MinRating > 0 or self.MaxRating < 5:
            Filters.append(f"Rating: {self.MinRating}-{self.MaxRating}")
        
        if not Filters:
            return "No filters active"
        
        return "; ".join(Filters)


@dataclass 
class SearchResult:
    """
    Represents the result of a database search operation.
    Contains the found books plus metadata about the search.
    """
    
    Books: List[BookRecord] = field(default_factory=list)
    TotalCount: int = 0
    FilteredCount: int = 0
    SearchTime: float = 0.0
    SearchCriteria: Optional[SearchCriteria] = None
    
    # Error handling
    Success: bool = True
    ErrorMessage: str = ""
    
    def __post_init__(self):
        """Post-initialization calculations"""
        if not self.TotalCount:
            self.TotalCount = len(self.Books)
        
        if not self.FilteredCount:
            self.FilteredCount = len(self.Books)
    
    def HasResults(self) -> bool:
        """Check if search returned any results"""
        return len(self.Books) > 0
    
    def GetResultSummary(self) -> str:
        """Get human-readable result summary"""
        if not self.Success:
            return f"Search failed: {self.ErrorMessage}"
        
        if not self.HasResults():
            return "No books found"
        
        if self.FilteredCount == self.TotalCount:
            return f"Found {self.TotalCount} books"
        else:
            return f"Found {self.FilteredCount} of {self.TotalCount} books"


@dataclass
class CategoryInfo:
    """
    Represents category information for filtering and display.
    Used to populate filter dropdowns and category statistics.
    """
    
    Name: str = ""
    BookCount: int = 0
    ParentCategory: str = ""
    Description: str = ""
    DisplayOrder: int = 0
    
    def GetDisplayName(self) -> str:
        """Get formatted display name with count"""
        return f"{self.Name} ({self.BookCount})"


@dataclass
class LibraryStatistics:
    """
    Represents overall library statistics for dashboard display.
    Contains counts, file sizes, and other summary information.
    """
    
    TotalBooks: int = 0
    TotalSize: int = 0
    TotalAuthors: int = 0
    TotalCategories: int = 0
    
    # File type breakdown
    FileTypeCounts: Dict[str, int] = field(default_factory=dict)
    
    # Rating statistics
    AverageRating: float = 0.0
    RatedBooks: int = 0
    
    # Date statistics
    OldestBook: str = ""
    NewestBook: str = ""
    BooksAddedThisMonth: int = 0
    BooksAddedThisYear: int = 0
    
    # File status
    MissingFiles: int = 0
    BooksWithThumbnails: int = 0
    
    def GetFormattedTotalSize(self) -> str:
        """Get human-readable total library size"""
        if self.TotalSize < 1024 * 1024 * 1024:
            return f"{self.TotalSize / (1024 * 1024):.1f} MB"
        else:
            return f"{self.TotalSize / (1024 * 1024 * 1024):.1f} GB"
    
    def GetSummary(self) -> str:
        """Get brief library summary"""
        return (f"{self.TotalBooks} books, {self.TotalAuthors} authors, "
                f"{self.GetFormattedTotalSize()}")


# Legacy compatibility - add aliases for old class names
Book = BookRecord  # Compatibility alias
Category = CategoryInfo  # Compatibility alias  
Subject = CategoryInfo  # Compatibility alias for subjects


def CreateBookRecordFromDict(Data: Dict[str, Any]) -> BookRecord:
    """
    Factory function to create BookRecord from database row dictionary.
    Handles type conversion and missing fields gracefully.
    """
    try:
        # Handle None values and type conversions
        SafeData = {}
        for Key, Value in Data.items():
            if Value is None:
                SafeData[Key] = ""
            else:
                SafeData[Key] = Value
        
        return BookRecord(
            Id=int(SafeData.get('Id', 0)),
            Title=str(SafeData.get('Title', '')),
            Author=SafeData.get('Author'),
            FileName=str(SafeData.get('FileName', '')),
            FilePath=str(SafeData.get('FilePath', '')),
            FileSize=int(SafeData.get('FileSize', 0)),
            Subject=str(SafeData.get('Subject', '')),
            Publisher=str(SafeData.get('Publisher', '')),
            PublishDate=str(SafeData.get('PublishDate', '')),
            Keywords=str(SafeData.get('Keywords', '')),
            Description=str(SafeData.get('Description', '')),
            PageCount=int(SafeData.get('PageCount', 0)),
            CreationDate=str(SafeData.get('CreationDate', '')),
            ModificationDate=str(SafeData.get('ModificationDate', '')),
            Category=str(SafeData.get('Category', '')),
            Subcategory=str(SafeData.get('Subcategory', '')),
            Language=str(SafeData.get('Language', 'English')),
            DateAdded=str(SafeData.get('DateAdded', '')),
            LastAccessed=str(SafeData.get('LastAccessed', '')),
            Rating=int(SafeData.get('Rating', 0)),
            ReadStatus=str(SafeData.get('ReadStatus', 'Unread')),
            FileFormat=str(SafeData.get('FileFormat', 'PDF')),
            FileHash=str(SafeData.get('FileHash', '')),
            ThumbnailPath=str(SafeData.get('ThumbnailPath', '')),
            ISBN=str(SafeData.get('ISBN', '')),
            Edition=str(SafeData.get('Edition', '')),
            Series=str(SafeData.get('Series', '')),
            Volume=str(SafeData.get('Volume', ''))
        )
        
    except Exception as Error:
        logging.error(f"Error creating BookRecord from data: {Error}")
        logging.error(f"Data: {Data}")
        return BookRecord()


def ValidateBookRecord(Book: BookRecord) -> Tuple[bool, List[str]]:
    """
    Validate a BookRecord for completeness and correctness.
    Returns (IsValid, ErrorMessages).
    """
    Errors = []
    
    # Required fields
    if not Book.Title.strip():
        Errors.append("Title is required")
    
    if not Book.FileName.strip():
        Errors.append("File name is required")
    
    if not Book.FilePath.strip():
        Errors.append("File path is required")
    
    # File existence
    if Book.FilePath and not os.path.exists(Book.FilePath):
        Errors.append(f"File does not exist: {Book.FilePath}")
    
    # Value ranges
    if Book.Rating < 0 or Book.Rating > 5:
        Errors.append("Rating must be between 0 and 5")
    
    if Book.PageCount < 0:
        Errors.append("Page count cannot be negative")
    
    if Book.FileSize < 0:
        Errors.append("File size cannot be negative")
    
    return len(Errors) == 0, Errors


# Database table structure definitions
DATABASE_SCHEMA = {
    "Books": {
        "Id": "INTEGER PRIMARY KEY AUTOINCREMENT",
        "Title": "TEXT NOT NULL",
        "Author": "TEXT",
        "FileName": "TEXT NOT NULL",
        "FilePath": "TEXT NOT NULL",
        "FileSize": "INTEGER DEFAULT 0",
        "Subject": "TEXT",
        "Publisher": "TEXT", 
        "PublishDate": "TEXT",
        "Keywords": "TEXT",
        "Description": "TEXT",
        "PageCount": "INTEGER DEFAULT 0",
        "CreationDate": "TEXT",
        "ModificationDate": "TEXT",
        "Category": "TEXT",
        "Subcategory": "TEXT",
        "Language": "TEXT DEFAULT 'English'",
        "DateAdded": "TEXT DEFAULT CURRENT_TIMESTAMP",
        "LastAccessed": "TEXT",
        "Rating": "INTEGER DEFAULT 0",
        "ReadStatus": "TEXT DEFAULT 'Unread'",
        "FileFormat": "TEXT DEFAULT 'PDF'",
        "FileHash": "TEXT",
        "ThumbnailPath": "TEXT",
        "ISBN": "TEXT",
        "Edition": "TEXT",
        "Series": "TEXT",
        "Volume": "TEXT"
    }
}

# Common SQL queries as constants
COMMON_QUERIES = {
    "SELECT_ALL": "SELECT * FROM Books",
    "SELECT_BY_ID": "SELECT * FROM Books WHERE Id = ?",
    "SELECT_BY_TITLE": "SELECT * FROM Books WHERE Title LIKE ?",
    "SELECT_BY_AUTHOR": "SELECT * FROM Books WHERE Author LIKE ?",
    "COUNT_TOTAL": "SELECT COUNT(*) FROM Books",
    "GET_CATEGORIES": "SELECT DISTINCT Category FROM Books WHERE Category IS NOT NULL ORDER BY Category",
    "GET_AUTHORS": "SELECT DISTINCT Author FROM Books WHERE Author IS NOT NULL ORDER BY Author",
    "GET_SUBJECTS": "SELECT DISTINCT Subject FROM Books WHERE Subject IS NOT NULL ORDER BY Subject"
}

# Legacy compatibility - add aliases for old class names AND function names
Book = BookRecord  # Compatibility alias
Category = CategoryInfo  # Compatibility alias  
Subject = CategoryInfo  # Compatibility alias for subjects
CreateBookFromRow = CreateBookRecordFromDict  # Compatibility alias for old function name

# ================================================================
# LEGACY COMPATIBILITY FUNCTIONS
# ================================================================
# These functions provide compatibility with the old monolithic code
# that expects specific function names and signatures.

def CreateCategoryFromRow(Data: Dict[str, Any]) -> CategoryInfo:
    """
    Legacy compatibility function to create CategoryInfo from database row.
    Maps old database row format to new CategoryInfo dataclass.
    """
    try:
        return CategoryInfo(
            Name=str(Data.get('Name', Data.get('Category', Data.get('name', '')))),
            BookCount=int(Data.get('BookCount', Data.get('Count', Data.get('count', 0)))),
            ParentCategory=str(Data.get('ParentCategory', Data.get('parent', ''))),
            Description=str(Data.get('Description', Data.get('description', ''))),
            DisplayOrder=int(Data.get('DisplayOrder', Data.get('order', 0)))
        )
    except Exception as Error:
        logging.error(f"Error creating CategoryInfo from data: {Error}")
        return CategoryInfo()


def CreateSubjectFromRow(Data: Dict[str, Any]) -> CategoryInfo:
    """
    Legacy compatibility function to create Subject (CategoryInfo) from database row.
    Subjects are treated as categories in the new architecture.
    """
    try:
        return CategoryInfo(
            Name=str(Data.get('Subject', Data.get('Name', Data.get('subject', '')))),
            BookCount=int(Data.get('BookCount', Data.get('Count', Data.get('count', 0)))),
            ParentCategory=str(Data.get('ParentSubject', Data.get('parent', ''))),
            Description=str(Data.get('Description', Data.get('description', ''))),
            DisplayOrder=int(Data.get('DisplayOrder', Data.get('order', 0)))
        )
    except Exception as Error:
        logging.error(f"Error creating Subject from data: {Error}")
        return CategoryInfo()


def CreateAuthorFromRow(Data: Dict[str, Any]) -> str:
    """
    Legacy compatibility function to extract author name from database row.
    Returns the author name as a simple string.
    """
    try:
        return str(Data.get('Author', Data.get('author', Data.get('Name', ''))))
    except Exception as Error:
        logging.error(f"Error extracting author from data: {Error}")
        return ""


def GetBookById(BookId: int, Books: List[BookRecord]) -> Optional[BookRecord]:
    """
    Legacy compatibility function to find a book by ID.
    Searches through a list of BookRecord objects.
    """
    try:
        for Book in Books:
            if Book.Id == BookId:
                return Book
        return None
    except Exception as Error:
        logging.error(f"Error finding book by ID {BookId}: {Error}")
        return None


def GetBooksByCategory(Category: str, Books: List[BookRecord]) -> List[BookRecord]:
    """
    Legacy compatibility function to filter books by category.
    Returns all books matching the specified category.
    """
    try:
        return [Book for Book in Books if Book.Category.lower() == Category.lower()]
    except Exception as Error:
        logging.error(f"Error filtering books by category {Category}: {Error}")
        return []


def GetBooksByAuthor(Author: str, Books: List[BookRecord]) -> List[BookRecord]:
    """
    Legacy compatibility function to filter books by author.
    Returns all books by the specified author.
    """
    try:
        return [Book for Book in Books if Author.lower() in Book.Author.lower()]
    except Exception as Error:
        logging.error(f"Error filtering books by author {Author}: {Error}")
        return []


def FormatFileSize(SizeBytes: int) -> str:
    """
    Legacy compatibility function for file size formatting.
    Alias for BookRecord.GetFileSizeFormatted() method.
    """
    try:
        if SizeBytes < 1024:
            return f"{SizeBytes} bytes"
        elif SizeBytes < 1024 * 1024:
            return f"{SizeBytes / 1024:.1f} KB"
        elif SizeBytes < 1024 * 1024 * 1024:
            return f"{SizeBytes / (1024 * 1024):.1f} MB"
        else:
            return f"{SizeBytes / (1024 * 1024 * 1024):.1f} GB"
    except Exception as Error:
        logging.error(f"Error formatting file size {SizeBytes}: {Error}")
        return "Unknown"


def ValidateBookData(Data: Dict[str, Any]) -> bool:
    """
    Legacy compatibility function to validate book data dictionary.
    Checks if required fields are present and valid.
    """
    try:
        RequiredFields = ['Title', 'FileName', 'FilePath']
        for Field in RequiredFields:
            if Field not in Data or not Data[Field]:
                return False
        return True
    except Exception as Error:
        logging.error(f"Error validating book data: {Error}")
        return False


# ================================================================
# ADDITIONAL COMPATIBILITY ALIASES
# ================================================================

# Function aliases for different naming conventions
CreateBookFromDict = CreateBookRecordFromDict  # Alternative alias
CreateCategoryFromDict = CreateCategoryFromRow  # Dict vs Row naming
CreateSubjectFromDict = CreateSubjectFromRow    # Dict vs Row naming

# Class aliases for old naming conventions  
BookData = BookRecord           # Alternative class name
CategoryData = CategoryInfo     # Alternative class name
SubjectData = CategoryInfo      # Alternative class name
LibraryStats = LibraryStatistics # Shorter alias

# Legacy constants that might be expected
DEFAULT_CATEGORY = "Uncategorized"
DEFAULT_LANGUAGE = "English"
DEFAULT_FILE_FORMAT = "PDF"
MAX_RATING = 5
MIN_RATING = 0

================
File: Source/Data/DatabaseModels_backup.py
================
# File: DatabaseModels.py
# Path: Source/Data/DatabaseModels.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  05:15PM
"""
Description: Data Models for Anderson's Library
Contains all data model classes and structures for managing library books,
including database table representations, search results, and book metadata.
"""

import os
import logging
from datetime import datetime
from dataclasses import dataclass, field
from typing import List, Dict, Optional, Any, Tuple
from pathlib import Path


@dataclass
class BookRecord:
    """
    Represents a complete book record from the database.
    Contains all metadata and file information for a single book.
    """
    
    # Primary identifiers
    Id: int = 0
    Title: str = ""
    Author: str = ""
    
    # File information
    FileName: str = ""
    FilePath: str = ""
    FileSize: int = 0
    
    # Metadata
    Subject: str = ""
    Publisher: str = ""
    PublishDate: str = ""
    Keywords: str = ""
    Description: str = ""
    
    # File properties
    PageCount: int = 0
    CreationDate: str = ""
    ModificationDate: str = ""
    
    # Library classification
    Category: str = ""
    Subcategory: str = ""
    Language: str = "English"
    
    # Status and tracking
    DateAdded: str = ""
    LastAccessed: str = ""
    Rating: int = 0
    ReadStatus: str = "Unread"
    
    # Technical details
    FileFormat: str = "PDF"
    FileHash: str = ""
    ThumbnailPath: str = ""
    
    # Additional metadata
    ISBN: str = ""
    Edition: str = ""
    Series: str = ""
    Volume: str = ""
    
    def __post_init__(self):
        """Post-initialization validation and cleanup"""
        # Ensure required fields have defaults
        if not self.DateAdded:
            self.DateAdded = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Clean up file paths
        if self.FilePath:
            self.FilePath = os.path.normpath(self.FilePath)
        
        # Validate rating range
        if self.Rating < 0:
            self.Rating = 0
        elif self.Rating > 5:
            self.Rating = 5
    
    def GetDisplayTitle(self) -> str:
        """Get formatted title for display"""
        if len(self.Title) > 50:
            return self.Title[:47] + "..."
        return self.Title
    
    def GetDisplayAuthor(self) -> str:
        """Get formatted author for display"""
        if len(self.Author) > 30:
            return self.Author[:27] + "..."
        return self.Author
    
    def GetFileSizeFormatted(self) -> str:
        """Get human-readable file size"""
        if self.FileSize < 1024:
            return f"{self.FileSize} bytes"
        elif self.FileSize < 1024 * 1024:
            return f"{self.FileSize / 1024:.1f} KB"
        elif self.FileSize < 1024 * 1024 * 1024:
            return f"{self.FileSize / (1024 * 1024):.1f} MB"
        else:
            return f"{self.FileSize / (1024 * 1024 * 1024):.1f} GB"
    
    def FileExists(self) -> bool:
        """Check if the book file actually exists"""
        if not self.FilePath:
            return False
        return os.path.exists(self.FilePath)
    
    def GetFullPath(self, BasePath: str = "") -> str:
        """Get complete file path, optionally with base path"""
        if BasePath and not os.path.isabs(self.FilePath):
            return os.path.join(BasePath, self.FilePath)
        return self.FilePath


@dataclass
class SearchCriteria:
    """
    Represents search and filter criteria for book queries.
    Used by the interface to communicate search parameters to the database layer.
    """
    
    # Text search fields
    SearchText: str = ""
    SearchTitle: bool = True
    SearchAuthor: bool = True
    SearchSubject: bool = True
    SearchKeywords: bool = True
    SearchDescription: bool = False
    
    # Filter criteria
    Categories: List[str] = field(default_factory=list)
    Authors: List[str] = field(default_factory=list)
    Subjects: List[str] = field(default_factory=list)
    Languages: List[str] = field(default_factory=list)
    
    # Date ranges
    DateAddedFrom: Optional[str] = None
    DateAddedTo: Optional[str] = None
    PublishDateFrom: Optional[str] = None
    PublishDateTo: Optional[str] = None
    
    # Numeric filters
    MinPageCount: Optional[int] = None
    MaxPageCount: Optional[int] = None
    MinRating: int = 0
    MaxRating: int = 5
    
    # File properties
    FileFormats: List[str] = field(default_factory=list)
    MinFileSize: Optional[int] = None
    MaxFileSize: Optional[int] = None
    
    # Status filters
    ReadStatuses: List[str] = field(default_factory=list)
    HasThumbnail: Optional[bool] = None
    FileExists: Optional[bool] = None
    
    # Sort options
    SortBy: str = "Title"
    SortOrder: str = "ASC"
    
    # Pagination
    Limit: Optional[int] = None
    Offset: int = 0
    
    def IsEmpty(self) -> bool:
        """Check if search criteria is empty (no filters applied)"""
        return (not self.SearchText and
                not self.Categories and
                not self.Authors and
                not self.Subjects and
                not self.Languages and
                not self.DateAddedFrom and
                not self.DateAddedTo and
                not self.PublishDateFrom and
                not self.PublishDateTo and
                self.MinPageCount is None and
                self.MaxPageCount is None and
                self.MinRating == 0 and
                self.MaxRating == 5 and
                not self.FileFormats and
                self.MinFileSize is None and
                self.MaxFileSize is None and
                not self.ReadStatuses and
                self.HasThumbnail is None and
                self.FileExists is None)
    
    def GetSummary(self) -> str:
        """Get human-readable summary of active filters"""
        Filters = []
        
        if self.SearchText:
            Filters.append(f"Text: '{self.SearchText}'")
        
        if self.Categories:
            Filters.append(f"Categories: {', '.join(self.Categories)}")
        
        if self.Authors:
            Filters.append(f"Authors: {', '.join(self.Authors)}")
        
        if self.Subjects:
            Filters.append(f"Subjects: {', '.join(self.Subjects)}")
        
        if self.MinRating > 0 or self.MaxRating < 5:
            Filters.append(f"Rating: {self.MinRating}-{self.MaxRating}")
        
        if not Filters:
            return "No filters active"
        
        return "; ".join(Filters)


@dataclass 
class SearchResult:
    """
    Represents the result of a database search operation.
    Contains the found books plus metadata about the search.
    """
    
    Books: List[BookRecord] = field(default_factory=list)
    TotalCount: int = 0
    FilteredCount: int = 0
    SearchTime: float = 0.0
    SearchCriteria: Optional[SearchCriteria] = None
    
    # Error handling
    Success: bool = True
    ErrorMessage: str = ""
    
    def __post_init__(self):
        """Post-initialization calculations"""
        if not self.TotalCount:
            self.TotalCount = len(self.Books)
        
        if not self.FilteredCount:
            self.FilteredCount = len(self.Books)
    
    def HasResults(self) -> bool:
        """Check if search returned any results"""
        return len(self.Books) > 0
    
    def GetResultSummary(self) -> str:
        """Get human-readable result summary"""
        if not self.Success:
            return f"Search failed: {self.ErrorMessage}"
        
        if not self.HasResults():
            return "No books found"
        
        if self.FilteredCount == self.TotalCount:
            return f"Found {self.TotalCount} books"
        else:
            return f"Found {self.FilteredCount} of {self.TotalCount} books"


@dataclass
class CategoryInfo:
    """
    Represents category information for filtering and display.
    Used to populate filter dropdowns and category statistics.
    """
    
    Name: str = ""
    BookCount: int = 0
    ParentCategory: str = ""
    Description: str = ""
    DisplayOrder: int = 0
    
    def GetDisplayName(self) -> str:
        """Get formatted display name with count"""
        return f"{self.Name} ({self.BookCount})"


@dataclass
class LibraryStatistics:
    """
    Represents overall library statistics for dashboard display.
    Contains counts, file sizes, and other summary information.
    """
    
    TotalBooks: int = 0
    TotalSize: int = 0
    TotalAuthors: int = 0
    TotalCategories: int = 0
    
    # File type breakdown
    FileTypeCounts: Dict[str, int] = field(default_factory=dict)
    
    # Rating statistics
    AverageRating: float = 0.0
    RatedBooks: int = 0
    
    # Date statistics
    OldestBook: str = ""
    NewestBook: str = ""
    BooksAddedThisMonth: int = 0
    BooksAddedThisYear: int = 0
    
    # File status
    MissingFiles: int = 0
    BooksWithThumbnails: int = 0
    
    def GetFormattedTotalSize(self) -> str:
        """Get human-readable total library size"""
        if self.TotalSize < 1024 * 1024 * 1024:
            return f"{self.TotalSize / (1024 * 1024):.1f} MB"
        else:
            return f"{self.TotalSize / (1024 * 1024 * 1024):.1f} GB"
    
    def GetSummary(self) -> str:
        """Get brief library summary"""
        return (f"{self.TotalBooks} books, {self.TotalAuthors} authors, "
                f"{self.GetFormattedTotalSize()}")


# Legacy compatibility - add aliases for old class names
Book = BookRecord  # Compatibility alias
Category = CategoryInfo  # Compatibility alias  
Subject = CategoryInfo  # Compatibility alias for subjects


def CreateBookRecordFromDict(Data: Dict[str, Any]) -> BookRecord:
    """
    Factory function to create BookRecord from database row dictionary.
    Handles type conversion and missing fields gracefully.
    """
    try:
        # Handle None values and type conversions
        SafeData = {}
        for Key, Value in Data.items():
            if Value is None:
                SafeData[Key] = ""
            else:
                SafeData[Key] = Value
        
        return BookRecord(
            Id=int(SafeData.get('Id', 0)),
            Title=str(SafeData.get('Title', '')),
            Author=str(SafeData.get('Author', '')),
            FileName=str(SafeData.get('FileName', '')),
            FilePath=str(SafeData.get('FilePath', '')),
            FileSize=int(SafeData.get('FileSize', 0)),
            Subject=str(SafeData.get('Subject', '')),
            Publisher=str(SafeData.get('Publisher', '')),
            PublishDate=str(SafeData.get('PublishDate', '')),
            Keywords=str(SafeData.get('Keywords', '')),
            Description=str(SafeData.get('Description', '')),
            PageCount=int(SafeData.get('PageCount', 0)),
            CreationDate=str(SafeData.get('CreationDate', '')),
            ModificationDate=str(SafeData.get('ModificationDate', '')),
            Category=str(SafeData.get('Category', '')),
            Subcategory=str(SafeData.get('Subcategory', '')),
            Language=str(SafeData.get('Language', 'English')),
            DateAdded=str(SafeData.get('DateAdded', '')),
            LastAccessed=str(SafeData.get('LastAccessed', '')),
            Rating=int(SafeData.get('Rating', 0)),
            ReadStatus=str(SafeData.get('ReadStatus', 'Unread')),
            FileFormat=str(SafeData.get('FileFormat', 'PDF')),
            FileHash=str(SafeData.get('FileHash', '')),
            ThumbnailPath=str(SafeData.get('ThumbnailPath', '')),
            ISBN=str(SafeData.get('ISBN', '')),
            Edition=str(SafeData.get('Edition', '')),
            Series=str(SafeData.get('Series', '')),
            Volume=str(SafeData.get('Volume', ''))
        )
        
    except Exception as Error:
        logging.error(f"Error creating BookRecord from data: {Error}")
        logging.error(f"Data: {Data}")
        return BookRecord()


def ValidateBookRecord(Book: BookRecord) -> Tuple[bool, List[str]]:
    """
    Validate a BookRecord for completeness and correctness.
    Returns (IsValid, ErrorMessages).
    """
    Errors = []
    
    # Required fields
    if not Book.Title.strip():
        Errors.append("Title is required")
    
    if not Book.FileName.strip():
        Errors.append("File name is required")
    
    if not Book.FilePath.strip():
        Errors.append("File path is required")
    
    # File existence
    if Book.FilePath and not os.path.exists(Book.FilePath):
        Errors.append(f"File does not exist: {Book.FilePath}")
    
    # Value ranges
    if Book.Rating < 0 or Book.Rating > 5:
        Errors.append("Rating must be between 0 and 5")
    
    if Book.PageCount < 0:
        Errors.append("Page count cannot be negative")
    
    if Book.FileSize < 0:
        Errors.append("File size cannot be negative")
    
    return len(Errors) == 0, Errors


# Database table structure definitions
DATABASE_SCHEMA = {
    "Books": {
        "Id": "INTEGER PRIMARY KEY AUTOINCREMENT",
        "Title": "TEXT NOT NULL",
        "Author": "TEXT",
        "FileName": "TEXT NOT NULL",
        "FilePath": "TEXT NOT NULL",
        "FileSize": "INTEGER DEFAULT 0",
        "Subject": "TEXT",
        "Publisher": "TEXT", 
        "PublishDate": "TEXT",
        "Keywords": "TEXT",
        "Description": "TEXT",
        "PageCount": "INTEGER DEFAULT 0",
        "CreationDate": "TEXT",
        "ModificationDate": "TEXT",
        "Category": "TEXT",
        "Subcategory": "TEXT",
        "Language": "TEXT DEFAULT 'English'",
        "DateAdded": "TEXT DEFAULT CURRENT_TIMESTAMP",
        "LastAccessed": "TEXT",
        "Rating": "INTEGER DEFAULT 0",
        "ReadStatus": "TEXT DEFAULT 'Unread'",
        "FileFormat": "TEXT DEFAULT 'PDF'",
        "FileHash": "TEXT",
        "ThumbnailPath": "TEXT",
        "ISBN": "TEXT",
        "Edition": "TEXT",
        "Series": "TEXT",
        "Volume": "TEXT"
    }
}

# Common SQL queries as constants
COMMON_QUERIES = {
    "SELECT_ALL": "SELECT * FROM Books",
    "SELECT_BY_ID": "SELECT * FROM Books WHERE Id = ?",
    "SELECT_BY_TITLE": "SELECT * FROM Books WHERE Title LIKE ?",
    "SELECT_BY_AUTHOR": "SELECT * FROM Books WHERE Author LIKE ?",
    "COUNT_TOTAL": "SELECT COUNT(*) FROM Books",
    "GET_CATEGORIES": "SELECT DISTINCT Category FROM Books WHERE Category IS NOT NULL ORDER BY Category",
    "GET_AUTHORS": "SELECT DISTINCT Author FROM Books WHERE Author IS NOT NULL ORDER BY Author",
    "GET_SUBJECTS": "SELECT DISTINCT Subject FROM Books WHERE Subject IS NOT NULL ORDER BY Subject"
}

# Legacy compatibility - add aliases for old class names AND function names
Book = BookRecord  # Compatibility alias
Category = CategoryInfo  # Compatibility alias  
Subject = CategoryInfo  # Compatibility alias for subjects
CreateBookFromRow = CreateBookRecordFromDict  # Compatibility alias for old function name
================
File: Source/Data/__init__.py
================
# File: __init__.py
# Path: Source/Data/__init__.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  14:09PM
"""
Description: Data Models Package
Data models and database schema definitions.

Purpose: Package initialization for Source/Data module. Provides clean
import interfaces and package-level configuration.
"""

# Package version and metadata
__version__ = "2.0.0"
__author__ = "Herb Bowers - Project Himalaya"
__email__ = "HimalayaProject1@gmail.com"

# Package-level imports can be added here as needed
# Example:
# from .module_name import ClassName

__all__ = [
    # Add public interface exports here
]

================
File: Source/Framework/__init__.py
================
# File: __init__.py
# Path: Source/Framework/__init__.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  14:09PM
"""
Description: Framework Package
Reusable framework components and base classes.

Purpose: Package initialization for Source/Framework module. Provides clean
import interfaces and package-level configuration.
"""

# Package version and metadata
__version__ = "2.0.0"
__author__ = "Herb Bowers - Project Himalaya"
__email__ = "HimalayaProject1@gmail.com"

# Package-level imports can be added here as needed
# Example:
# from .module_name import ClassName

__all__ = [
    # Add public interface exports here
]

================
File: Source/Interface/BookGrid.py
================
# File: BookGrid.py
# Path: Source/Interface/BookGrid.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  04:12PM
"""
Description: Book Grid Display Component for Anderson's Library
Provides the main scrollable grid display of books with covers, titles, and metadata.
Supports multiple view modes, sorting, and selection.
"""

import logging
import os
import subprocess
import platform
from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QScrollArea, 
                               QFrame, QLabel, QPushButton, QComboBox, QButtonGroup,
                               QGridLayout, QSizePolicy, QMenu, QToolButton, 
                               QProgressBar, QStackedWidget, QTextEdit, QGroupBox,
                               QApplication)
from PySide6.QtCore import Qt, Signal, QSize, QThread, QTimer, QPropertyAnimation, QEasingCurve
from PySide6.QtGui import QPixmap, QFont, QPainter, QPen, QBrush, QIcon, QAction, QCursor
from typing import List, Optional, Dict, Callable
from ..Data.DatabaseModels import BookRecord, SearchResult, SearchCriteria


class BookTile(QFrame):
    """
    Individual book tile widget showing cover, title, author, and metadata.
    Supports different display modes and provides interactive features.
    """
    
    # Signals
    BookSelected = Signal(object)      # BookRecord
    BookDoubleClicked = Signal(object) # BookRecord
    BookRightClicked = Signal(object, object) # BookRecord, QPoint
    
    def __init__(self, Book: BookRecord, ViewMode: str = "grid", parent=None):
        super().__init__(parent)
        self.Book = Book
        self.ViewMode = ViewMode
        self.IsSelected = False
        self.IsHovered = False
        
        self.SetupUI()
        self.LoadBookCover()
        self.ApplyStyles()
        
        # Animation for hover effects
        self.HoverAnimation = QPropertyAnimation(self, b"geometry")
        self.HoverAnimation.setDuration(200)
        self.HoverAnimation.setEasingCurve(QEasingCurve.Type.OutCubic)
    
    def SetupUI(self):
        """Create the tile interface based on view mode"""
        self.setFrameStyle(QFrame.Shape.StyledPanel)
        self.setCursor(Qt.CursorShape.PointingHandCursor)
        
        if self.ViewMode == "grid":
            self.SetupGridMode()
        elif self.ViewMode == "list":
            self.SetupListMode()
        elif self.ViewMode == "detail":
            self.SetupDetailMode()
        else:
            self.SetupGridMode()  # Default
    
    def SetupGridMode(self):
        """Setup grid tile layout (vertical with cover on top)"""
        self.setFixedSize(180, 280)
        
        Layout = QVBoxLayout(self)
        Layout.setContentsMargins(8, 8, 8, 8)
        Layout.setSpacing(8)
        
        # Cover image
        self.CoverLabel = QLabel()
        self.CoverLabel.setFixedSize(164, 220)
        self.CoverLabel.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.CoverLabel.setStyleSheet("""
            QLabel {
                border: 1px solid #ddd;
                background-color: #f9f9f9;
                border-radius: 4px;
            }
        """)
        Layout.addWidget(self.CoverLabel)
        
        # Title (truncated)
        self.TitleLabel = QLabel(self.Book.GetDisplayTitle())
        self.TitleLabel.setWordWrap(True)
        self.TitleLabel.setMaximumHeight(32)
        self.TitleLabel.setAlignment(Qt.AlignmentFlag.AlignCenter)
        TitleFont = QFont()
        TitleFont.setPointSize(9)
        TitleFont.setBold(True)
        self.TitleLabel.setFont(TitleFont)
        Layout.addWidget(self.TitleLabel)
        
        # Author (truncated)
        self.AuthorLabel = QLabel(self.Book.GetDisplayAuthor())
        self.AuthorLabel.setWordWrap(True)
        self.AuthorLabel.setMaximumHeight(20)
        self.AuthorLabel.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.AuthorLabel.setStyleSheet("color: #666; font-size: 8pt;")
        Layout.addWidget(self.AuthorLabel)
    
    def SetupListMode(self):
        """Setup list tile layout (horizontal with cover on left)"""
        self.setFixedHeight(80)
        self.setMinimumWidth(400)
        
        Layout = QHBoxLayout(self)
        Layout.setContentsMargins(8, 8, 8, 8)
        Layout.setSpacing(12)
        
        # Cover image (smaller)
        self.CoverLabel = QLabel()
        self.CoverLabel.setFixedSize(50, 64)
        self.CoverLabel.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.CoverLabel.setStyleSheet("""
            QLabel {
                border: 1px solid #ddd;
                background-color: #f9f9f9;
                border-radius: 2px;
            }
        """)
        Layout.addWidget(self.CoverLabel)
        
        # Text content
        TextLayout = QVBoxLayout()
        TextLayout.setSpacing(4)
        
        # Title
        self.TitleLabel = QLabel(self.Book.Title)
        TitleFont = QFont()
        TitleFont.setPointSize(11)
        TitleFont.setBold(True)
        self.TitleLabel.setFont(TitleFont)
        TextLayout.addWidget(self.TitleLabel)
        
        # Author and metadata
        self.AuthorLabel = QLabel(f"by {self.Book.Author}")
        self.AuthorLabel.setStyleSheet("color: #666;")
        TextLayout.addWidget(self.AuthorLabel)
        
        # Additional info
        InfoText = f"{self.Book.Category}"
        if self.Book.PageCount > 0:
            InfoText += f" • {self.Book.PageCount} pages"
        if self.Book.FileSize > 0:
            InfoText += f" • {self.Book.GetFileSizeFormatted()}"
        
        self.InfoLabel = QLabel(InfoText)
        self.InfoLabel.setStyleSheet("color: #888; font-size: 9pt;")
        TextLayout.addWidget(self.InfoLabel)
        
        Layout.addLayout(TextLayout)
        Layout.addStretch()
        
        # Rating and status
        StatusLayout = QVBoxLayout()
        StatusLayout.setAlignment(Qt.AlignmentFlag.AlignTop)
        
        if self.Book.Rating > 0:
            RatingLabel = QLabel("★" * self.Book.Rating)
            RatingLabel.setStyleSheet("color: #ffc107;")
            StatusLayout.addWidget(RatingLabel)
        
        StatusLabel = QLabel(self.Book.ReadStatus)
        StatusLabel.setStyleSheet("color: #666; font-size: 8pt;")
        StatusLayout.addWidget(StatusLabel)
        
        Layout.addLayout(StatusLayout)
    
    def SetupDetailMode(self):
        """Setup detailed tile layout (large with full metadata)"""
        self.setFixedHeight(120)
        self.setMinimumWidth(600)
        
        Layout = QHBoxLayout(self)
        Layout.setContentsMargins(12, 12, 12, 12)
        Layout.setSpacing(16)
        
        # Cover image
        self.CoverLabel = QLabel()
        self.CoverLabel.setFixedSize(75, 96)
        self.CoverLabel.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.CoverLabel.setStyleSheet("""
            QLabel {
                border: 1px solid #ddd;
                background-color: #f9f9f9;
                border-radius: 4px;
            }
        """)
        Layout.addWidget(self.CoverLabel)
        
        # Main content
        ContentLayout = QVBoxLayout()
        ContentLayout.setSpacing(6)
        
        # Title and author
        self.TitleLabel = QLabel(self.Book.Title)
        TitleFont = QFont()
        TitleFont.setPointSize(12)
        TitleFont.setBold(True)
        self.TitleLabel.setFont(TitleFont)
        ContentLayout.addWidget(self.TitleLabel)
        
        self.AuthorLabel = QLabel(f"by {self.Book.Author}")
        AuthorFont = QFont()
        AuthorFont.setPointSize(10)
        self.AuthorLabel.setFont(AuthorFont)
        self.AuthorLabel.setStyleSheet("color: #666;")
        ContentLayout.addWidget(self.AuthorLabel)
        
        # Description or subject
        DescText = self.Book.Description if self.Book.Description else self.Book.Subject
        if DescText and len(DescText) > 150:
            DescText = DescText[:147] + "..."
        
        if DescText:
            self.DescLabel = QLabel(DescText)
            self.DescLabel.setWordWrap(True)
            self.DescLabel.setStyleSheet("color: #444; font-size: 9pt;")
            ContentLayout.addWidget(self.DescLabel)
        
        Layout.addLayout(ContentLayout)
        
        # Metadata column
        MetaLayout = QVBoxLayout()
        MetaLayout.setAlignment(Qt.AlignmentFlag.AlignTop)
        MetaLayout.setSpacing(4)
        
        # Category and pages
        if self.Book.Category:
            CategoryLabel = QLabel(f"📂 {self.Book.Category}")
            CategoryLabel.setStyleSheet("color: #666; font-size: 9pt;")
            MetaLayout.addWidget(CategoryLabel)
        
        if self.Book.PageCount > 0:
            PagesLabel = QLabel(f"📄 {self.Book.PageCount} pages")
            PagesLabel.setStyleSheet("color: #666; font-size: 9pt;")
            MetaLayout.addWidget(PagesLabel)
        
        # File size and format
        FileSizeLabel = QLabel(f"💾 {self.Book.GetFileSizeFormatted()}")
        FileSizeLabel.setStyleSheet("color: #666; font-size: 9pt;")
        MetaLayout.addWidget(FileSizeLabel)
        
        # Rating
        if self.Book.Rating > 0:
            RatingLabel = QLabel(f"⭐ {self.Book.Rating}/5")
            RatingLabel.setStyleSheet("color: #ffc107; font-size: 9pt;")
            MetaLayout.addWidget(RatingLabel)
        
        # Date added
        if self.Book.DateAdded:
            DateLabel = QLabel(f"📅 {self.Book.DateAdded[:10]}")
            DateLabel.setStyleSheet("color: #666; font-size: 8pt;")
            MetaLayout.addWidget(DateLabel)
        
        Layout.addLayout(MetaLayout)
    
    def LoadBookCover(self):
        """Load and display book cover image"""
        try:
            # Try to load thumbnail first
            CoverPath = None
            logging.info(f"Attempting to load cover for: {self.Book.Title}")
            logging.info(f"Book.ThumbnailPath: {self.Book.ThumbnailPath}")
            logging.info(f"Book.FileName: {self.Book.FileName}")

            if self.Book.ThumbnailPath and os.path.exists(self.Book.ThumbnailPath):
                CoverPath = self.Book.ThumbnailPath
                logging.info(f"Found thumbnail at Book.ThumbnailPath: {CoverPath}")
            
            # Try default cover locations
            if not CoverPath:
                PossiblePaths = [
                    f"Assets/Covers/{self.Book.FileName}.jpg",
                    f"Assets/Covers/{self.Book.FileName}.png",
                    f"Data/Covers/{self.Book.FileName}.jpg",
                    f"Data/Covers/{self.Book.FileName}.png"
                ]
                
                for Path in PossiblePaths:
                    full_path = os.path.join(os.getcwd(), Path) # Ensure absolute path for checking existence
                    logging.info(f"Checking possible cover path: {full_path}")
                    if os.path.exists(full_path):
                        CoverPath = full_path
                        logging.info(f"Found cover at: {CoverPath}")
                        break
            
            if CoverPath:
                Pixmap = QPixmap(CoverPath)
                if not Pixmap.isNull():
                    # Scale to fit the label
                    ScaledPixmap = Pixap.scaled(
                        self.CoverLabel.size(),
                        Qt.AspectRatioMode.KeepAspectRatio,
                        Qt.TransformationMode.SmoothTransformation
                    )
                    self.CoverLabel.setPixmap(ScaledPixmap)
                    logging.info(f"Successfully loaded cover for {self.Book.Title}")
                    return
                else:
                    logging.warning(f"QPixmap could not load image from {CoverPath}")
            
            # Use default cover
            logging.info(f"Using default cover for {self.Book.Title}")
            self.SetDefaultCover()
            
        except Exception as Error:
            logging.warning(f"Error loading cover for {self.Book.Title}: {Error}", exc_info=True)
            self.SetDefaultCover()
    
    def SetDefaultCover(self):
        """Set a default cover image"""
        try:
            # Try to load default cover
            DefaultPaths = [
                "Assets/default_cover.png",
                "Assets/book_placeholder.png"
            ]
            
            for Path in DefaultPaths:
                if os.path.exists(Path):
                    Pixmap = QPixmap(Path)
                    if not Pixmap.isNull():
                        ScaledPixmap = Pixmap.scaled(
                            self.CoverLabel.size(),
                            Qt.AspectRatioMode.KeepAspectRatio,
                            Qt.TransformationMode.SmoothTransformation
                        )
                        self.CoverLabel.setPixmap(ScaledPixmap)
                        return
            
            # Generate text-based cover
            self.GenerateTextCover()
            
        except Exception as Error:
            logging.warning(f"Error setting default cover: {Error}")
            self.GenerateTextCover()
    
    def GenerateTextCover(self):
        """Generate a text-based cover"""
        try:
            Size = self.CoverLabel.size()
            Pixmap = QPixmap(Size)
            Pixmap.fill(Qt.GlobalColor.lightGray)
            
            Painter = QPainter(Pixmap)
            Painter.setPen(QPen(Qt.GlobalColor.darkGray, 2))
            
            # Draw border
            Painter.drawRect(2, 2, Size.width()-4, Size.height()-4)
            
            # Draw title text
            TitleFont = QFont()
            TitleFont.setPointSize(8)
            TitleFont.setBold(True)
            Painter.setFont(TitleFont)
            
            # Wrap title text
            Title = self.Book.Title if len(self.Book.Title) <= 40 else self.Book.Title[:37] + "..."
            TitleRect = Painter.fontMetrics().boundingRect(10, 10, Size.width()-20, Size.height()-20, 
                                                         Qt.TextFlag.TextWordWrap, Title)
            
            Painter.drawText(10, 30, Size.width()-20, Size.height()-40, 
                           Qt.TextFlag.TextWordWrap | Qt.AlignmentFlag.AlignCenter, Title)
            
            # Draw author
            if self.Book.Author:
                AuthorFont = QFont()
                AuthorFont.setPointSize(6)
                Painter.setFont(AuthorFont)
                
                Author = self.Book.Author if len(self.Book.Author) <= 30 else self.Book.Author[:27] + "..."
                Painter.drawText(10, Size.height()-30, Size.width()-20, 25, 
                               Qt.AlignmentFlag.AlignCenter, f"by {Author}")
            
            Painter.end()
            self.CoverLabel.setPixmap(Pixmap)
            
        except Exception as Error:
            logging.error(f"Error generating text cover: {Error}")
            # Last resort - just set text
            self.CoverLabel.setText("📖\nNo Cover")
            self.CoverLabel.setAlignment(Qt.AlignmentFlag.AlignCenter)
    
    def ApplyStyles(self):
        """Apply visual styling to the tile"""
        if self.IsSelected:
            self.setStyleSheet("""
                QFrame {
                    background-color: #e3f2fd;
                    border: 2px solid #2196f3;
                    border-radius: 6px;
                }
            """)
        elif self.IsHovered:
            self.setStyleSheet("""
                QFrame {
                    background-color: #f5f5f5;
                    border: 1px solid #ccc;
                    border-radius: 6px;
                }
            """)
        else:
            self.setStyleSheet("""
                QFrame {
                    background-color: white;
                    border: 1px solid #e0e0e0;
                    border-radius: 6px;
                }
                QFrame:hover {
                    border: 1px solid #bbb;
                    background-color: #fafafa;
                }
            """)
    
    def SetSelected(self, Selected: bool):
        """Set tile selection state"""
        self.IsSelected = Selected
        self.ApplyStyles()
    
    def SetHovered(self, Hovered: bool):
        """Set tile hover state"""
        self.IsHovered = Hovered
        self.ApplyStyles()
    
    # Event handlers
    def mousePressEvent(self, event):
        """Handle mouse press"""
        if event.button() == Qt.MouseButton.LeftButton:
            self.BookSelected.emit(self.Book)
        elif event.button() == Qt.MouseButton.RightButton:
            self.BookRightClicked.emit(self.Book, event.globalPosition().toPoint())
        super().mousePressEvent(event)
    
    def mouseDoubleClickEvent(self, event):
        """Handle double click"""
        if event.button() == Qt.MouseButton.LeftButton:
            self.BookDoubleClicked.emit(self.Book)
        super().mouseDoubleClickEvent(event)
    
    def enterEvent(self, event):
        """Handle mouse enter"""
        self.SetHovered(True)
        super().enterEvent(event)
    
    def leaveEvent(self, event):
        """Handle mouse leave"""
        self.SetHovered(False)
        super().leaveEvent(event)


class BookGrid(QWidget):
    """
    Main book grid widget that displays a collection of BookTile widgets.
    Supports different view modes, sorting, and virtual scrolling for performance.
    """
    
    # Signals
    BookSelected = Signal(object)       # BookRecord
    BookOpened = Signal(object)         # BookRecord
    SelectionChanged = Signal(list)     # List[BookRecord]
    ViewModeChanged = Signal(str)       # View mode
    SortChanged = Signal(str, str)      # Sort field, sort order
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        self.Books = []
        self.FilteredBooks = []
        self.SelectedBooks = []
        self.ViewMode = "grid"
        self.SortField = "Title"
        self.SortOrder = "ASC"
        self.BookTiles = []
        
        self.SetupUI()
        self.SetupConnections()
        
        logging.info("BookGrid initialized")
    
    def SetupUI(self):
        """Create the book grid interface"""
        Layout = QVBoxLayout(self)
        Layout.setContentsMargins(0, 0, 0, 0)
        Layout.setSpacing(0)
        
        # Toolbar
        self.CreateToolbar(Layout)
        
        # Main scroll area
        self.ScrollArea = QScrollArea()
        self.ScrollArea.setWidgetResizable(True)
        self.ScrollArea.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        self.ScrollArea.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        
        # Grid container
        self.GridContainer = QWidget()
        self.GridLayout = QGridLayout(self.GridContainer)
        self.GridLayout.setSpacing(10)
        self.GridLayout.setContentsMargins(15, 15, 15, 15)
        
        self.ScrollArea.setWidget(self.GridContainer)
        Layout.addWidget(self.ScrollArea)
        
        # Status bar
        self.CreateStatusBar(Layout)
        
        # Apply initial styling
        self.ApplyStyles()
    
    def CreateToolbar(self, Layout: QVBoxLayout):
        """Create the toolbar with view options and sorting"""
        ToolbarFrame = QFrame()
        ToolbarFrame.setFrameStyle(QFrame.Shape.StyledPanel)
        ToolbarFrame.setFixedHeight(50)
        ToolbarLayout = QHBoxLayout(ToolbarFrame)
        ToolbarLayout.setContentsMargins(15, 8, 15, 8)
        
        # View mode buttons
        ViewLabel = QLabel("View:")
        ToolbarLayout.addWidget(ViewLabel)
        
        self.ViewButtonGroup = QButtonGroup()
        
        self.GridViewBtn = QPushButton("⊞ Grid")
        self.GridViewBtn.setCheckable(True)
        self.GridViewBtn.setChecked(True)
        self.ViewButtonGroup.addButton(self.GridViewBtn, 0)
        ToolbarLayout.addWidget(self.GridViewBtn)
        
        self.ListViewBtn = QPushButton("☰ List")
        self.ListViewBtn.setCheckable(True)
        self.ViewButtonGroup.addButton(self.ListViewBtn, 1)
        ToolbarLayout.addWidget(self.ListViewBtn)
        
        self.DetailViewBtn = QPushButton("📄 Detail")
        self.DetailViewBtn.setCheckable(True)
        self.ViewButtonGroup.addButton(self.DetailViewBtn, 2)
        ToolbarLayout.addWidget(self.DetailViewBtn)
        
        ToolbarLayout.addWidget(QFrame())  # Separator
        
        # Sort options
        SortLabel = QLabel("Sort by:")
        ToolbarLayout.addWidget(SortLabel)
        
        self.SortCombo = QComboBox()
        self.SortCombo.addItems([
            "Title", "Author", "Category", "Date Added", 
            "File Size", "Page Count", "Rating", "Last Accessed"
        ])
        ToolbarLayout.addWidget(self.SortCombo)
        
        self.SortOrderBtn = QPushButton("↑ A-Z")
        self.SortOrderBtn.setCheckable(True)
        self.SortOrderBtn.setToolTip("Toggle sort order")
        ToolbarLayout.addWidget(self.SortOrderBtn)
        
        ToolbarLayout.addStretch()
        
        # Selection info
        self.SelectionLabel = QLabel("No selection")
        self.SelectionLabel.setStyleSheet("color: #666;")
        ToolbarLayout.addWidget(self.SelectionLabel)
        
        Layout.addWidget(ToolbarFrame)
    
    def CreateStatusBar(self, Layout: QVBoxLayout):
        """Create status bar showing book count and loading state"""
        self.StatusFrame = QFrame()
        self.StatusFrame.setFrameStyle(QFrame.Shape.StyledPanel)
        self.StatusFrame.setFixedHeight(30)
        StatusLayout = QHBoxLayout(self.StatusFrame)
        StatusLayout.setContentsMargins(15, 5, 15, 5)
        
        self.StatusLabel = QLabel("Ready")
        StatusLayout.addWidget(self.StatusLabel)
        
        StatusLayout.addStretch()
        
        # Loading progress bar
        self.ProgressBar = QProgressBar()
        self.ProgressBar.setVisible(False)
        self.ProgressBar.setMaximumWidth(200)
        StatusLayout.addWidget(self.ProgressBar)
        
        Layout.addWidget(self.StatusFrame)
    
    def SetupConnections(self):
        """Connect signals and slots"""
        # View mode buttons
        self.ViewButtonGroup.buttonClicked.connect(self.OnViewModeChanged)
        
        # Sort controls
        self.SortCombo.currentTextChanged.connect(self.OnSortFieldChanged)
        self.SortOrderBtn.clicked.connect(self.OnSortOrderToggled)
    
    def ApplyStyles(self):
        """Apply consistent styling"""
        self.setStyleSheet("""
            QFrame {
                background-color: #fafafa;
                border: 1px solid #e0e0e0;
            }
            QPushButton {
                padding: 6px 12px;
                border: 1px solid #ddd;
                border-radius: 4px;
                background-color: #fff;
            }
            QPushButton:hover {
                background-color: #f0f0f0;
            }
            QPushButton:checked {
                background-color: #2196f3;
                color: white;
                border-color: #1976d2;
            }
            QComboBox {
                padding: 4px 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
                background-color: #fff;
                min-width: 100px;
            }
        """)
    
    def SetBooks(self, Books: List[BookRecord]):
        """Set the list of books to display"""
        self.Books = Books.copy()
        self.FilteredBooks = Books.copy()
        self.ApplySorting()
        self.RefreshDisplay()
        
        logging.info(f"BookGrid updated with {len(Books)} books")
    
    def UpdateBooks(self, SearchResult: SearchResult):
        """Update books from search result"""
        self.Books = SearchResult.Books if SearchResult.Books is not None else []
        self.FilteredBooks = self.Books.copy()
        self.ApplySorting()
        self.RefreshDisplay()
        
        # Update status
        if SearchResult.Success:
            self.StatusLabel.setText(SearchResult.GetResultSummary())
        else:
            self.StatusLabel.setText(f"Error: {SearchResult.ErrorMessage}")
    
    def ClearBooks(self):
        """Clear all books"""
        self.Books.clear()
        self.FilteredBooks.clear()
        self.SelectedBooks.clear()
        self.ClearTiles()
        self.StatusLabel.setText("No books to display")
    
    def ClearTiles(self):
        """Clear all book tiles from the grid"""
        for Tile in self.BookTiles:
            Tile.deleteLater()
        self.BookTiles.clear()
        
        # Clear the grid layout
        while self.GridLayout.count():
            child = self.GridLayout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()
    
    def RefreshDisplay(self):
        """Refresh the book display"""
        self.ClearTiles()
        
        if not self.FilteredBooks:
            self.ShowEmptyState()
            return
        
        self.ShowLoadingState()
        
        # Use QTimer to prevent UI freezing
        QTimer.singleShot(10, self.CreateBookTiles)
    
    def CreateBookTiles(self):
        """Create book tiles for current books"""
        try:
            self.ProgressBar.setVisible(True)
            if not self.FilteredBooks:
                self.ShowEmptyState()
                return

            self.ProgressBar.setMaximum(len(self.FilteredBooks))
            self.ProgressBar.setValue(0)
            
            if self.ViewMode == "grid":
                self.CreateGridTiles()
            elif self.ViewMode == "list":
                self.CreateListTiles()
            elif self.ViewMode == "detail":
                self.CreateDetailTiles()
            
            self.ProgressBar.setVisible(False)
            self.UpdateSelectionDisplay()
            
        except Exception as Error:
            logging.error(f"Error creating book tiles: {Error}", exc_info=True)
            self.ProgressBar.setVisible(False)
            self.StatusLabel.setText("Error displaying books")
    
    def CreateGridTiles(self):
        """Create tiles in grid layout"""
        ColumnsPerRow = max(1, (self.ScrollArea.width() - 50) // 200)
        
        for Index, Book in enumerate(self.FilteredBooks):
            Row = Index // ColumnsPerRow
            Col = Index % ColumnsPerRow
            
            Tile = BookTile(Book, "grid")
            self.ConnectTileSignals(Tile)
            
            self.GridLayout.addWidget(Tile, Row, Col)
            self.BookTiles.append(Tile)
            
            self.ProgressBar.setValue(Index + 1)
            
            # Process events to prevent freezing
            if Index % 10 == 0:
                QApplication.processEvents()
    
    def CreateListTiles(self):
        """Create tiles in list layout"""
        for Index, Book in enumerate(self.FilteredBooks):
            Tile = BookTile(Book, "list")
            self.ConnectTileSignals(Tile)
            
            self.GridLayout.addWidget(Tile, Index, 0)
            self.BookTiles.append(Tile)
            
            self.ProgressBar.setValue(Index + 1)
            
            if Index % 5 == 0:
                QApplication.processEvents()
    
    def CreateDetailTiles(self):
        """Create tiles in detail layout"""
        for Index, Book in enumerate(self.FilteredBooks):
            Tile = BookTile(Book, "detail")
            self.ConnectTileSignals(Tile)
            
            self.GridLayout.addWidget(Tile, Index, 0)
            self.BookTiles.append(Tile)
            
            self.ProgressBar.setValue(Index + 1)
            
            if Index % 3 == 0:
                QApplication.processEvents()
    
    def ConnectTileSignals(self, Tile: BookTile):
        """Connect signals from book tile"""
        Tile.BookSelected.connect(self.OnBookSelected)
        Tile.BookDoubleClicked.connect(self.OnBookDoubleClicked)
        Tile.BookRightClicked.connect(self.OnBookRightClicked)
    
    def ShowEmptyState(self):
        """Show empty state message"""
        EmptyLabel = QLabel("📚\n\nNo books found\n\nTry adjusting your search filters")
        EmptyLabel.setAlignment(Qt.AlignmentFlag.AlignCenter)
        EmptyLabel.setStyleSheet("""
            QLabel {
                color: #666;
                font-size: 14pt;
                padding: 50px;
            }
        """)
        self.GridLayout.addWidget(EmptyLabel, 0, 0)
    
    def ShowLoadingState(self):
        """Show loading state"""
        self.StatusLabel.setText("Loading books...")
    
    def ApplySorting(self):
        """Apply current sorting to filtered books"""
        if not self.FilteredBooks:
            return
        
        try:
            Reverse = (self.SortOrder == "DESC")
            
            if self.SortField == "Title":
                self.FilteredBooks.sort(key=lambda b: b.Title.lower(), reverse=Reverse)
            elif self.SortField == "Author":
                self.FilteredBooks.sort(key=lambda b: b.Author.lower(), reverse=Reverse)
            elif self.SortField == "Category":
                self.FilteredBooks.sort(key=lambda b: b.Category.lower(), reverse=Reverse)
            elif self.SortField == "Date Added":
                self.FilteredBooks.sort(key=lambda b: b.DateAdded, reverse=Reverse)
            elif self.SortField == "File Size":
                self.FilteredBooks.sort(key=lambda b: b.FileSize, reverse=Reverse)
            elif self.SortField == "Page Count":
                self.FilteredBooks.sort(key=lambda b: b.PageCount, reverse=Reverse)
            elif self.SortField == "Rating":
                self.FilteredBooks.sort(key=lambda b: b.Rating, reverse=Reverse)
            elif self.SortField == "Last Accessed":
                self.FilteredBooks.sort(key=lambda b: b.LastAccessed or "", reverse=Reverse)
            
            logging.info(f"Books sorted by {self.SortField} ({self.SortOrder})")
            
        except Exception as Error:
            logging.error(f"Error sorting books: {Error}")
    
    def UpdateSelectionDisplay(self):
        """Update selection display"""
        Count = len(self.SelectedBooks)
        if Count == 0:
            self.SelectionLabel.setText("No selection")
        elif Count == 1:
            self.SelectionLabel.setText("1 book selected")
        else:
            self.SelectionLabel.setText(f"{Count} books selected")
    
    # Event handlers
    def OnViewModeChanged(self, Button):
        """Handle view mode change"""
        ButtonId = self.ViewButtonGroup.id(Button)
        
        if ButtonId == 0:
            self.ViewMode = "grid"
        elif ButtonId == 1:
            self.ViewMode = "list"
        elif ButtonId == 2:
            self.ViewMode = "detail"
        
        self.RefreshDisplay()
        self.ViewModeChanged.emit(self.ViewMode)
        logging.info(f"View mode changed to: {self.ViewMode}")
    
    def OnSortFieldChanged(self, Field: str):
        """Handle sort field change"""
        self.SortField = Field
        self.ApplySorting()
        self.RefreshDisplay()
        self.SortChanged.emit(self.SortField, self.SortOrder)
    
    def OnSortOrderToggled(self):
        """Handle sort order toggle"""
        if self.SortOrder == "ASC":
            self.SortOrder = "DESC"
            self.SortOrderBtn.setText("↓ Z-A")
        else:
            self.SortOrder = "ASC"
            self.SortOrderBtn.setText("↑ A-Z")
        
        self.ApplySorting()
        self.RefreshDisplay()
        self.SortChanged.emit(self.SortField, self.SortOrder)
    
    def OnBookSelected(self, Book: BookRecord):
        """Handle book selection"""
        # Toggle selection
        if Book in self.SelectedBooks:
            self.SelectedBooks.remove(Book)
        else:
            self.SelectedBooks.append(Book)
        
        # Update tile selection states
        for Tile in self.BookTiles:
            Tile.SetSelected(Tile.Book in self.SelectedBooks)
        
        self.UpdateSelectionDisplay()
        self.BookSelected.emit(Book)
        self.SelectionChanged.emit(self.SelectedBooks.copy())
    
    def OnBookDoubleClicked(self, Book: BookRecord):
        """Handle book double click"""
        self.BookOpened.emit(Book)
        logging.info(f"Book opened: {Book.Title}")
    
    def OnBookRightClicked(self, Book: BookRecord, Position):
        """Handle book right click"""
        # Create context menu
        Menu = QMenu(self)
        
        OpenAction = Menu.addAction("📖 Open Book")
        OpenAction.triggered.connect(lambda: self.BookOpened.emit(Book))
        
        Menu.addSeparator()
        
        PropertiesAction = Menu.addAction("ℹ️ Properties")
        PropertiesAction.triggered.connect(lambda: self.ShowBookProperties(Book))
        
        Menu.exec(Position)
    
    def ShowBookProperties(self, Book: BookRecord):
        """Show book properties dialog"""
        # This would open a properties dialog
        # For now, just log the action
        logging.info(f"Show properties for: {Book.Title}")
    
    def resizeEvent(self, event):
        """Handle resize to adjust grid columns"""
        super().resizeEvent(event)
        if self.ViewMode == "grid":
            # Refresh grid layout on resize
            QTimer.singleShot(100, self.RefreshDisplay)
================
File: Source/Interface/CustomWindow.py
================
from PySide6.QtWidgets import (
    QApplication,
    QMainWindow,
    QLabel,
    QPushButton,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QSpacerItem,
    QStatusBar,
    QSizePolicy,
    QDialog,
)
from PySide6.QtGui import QPalette, QColor, QIcon, QPixmap, QFont, QMouseEvent, QCursor
from PySide6.QtCore import Qt, QEvent, QPoint, QSize


class CustomWindow(QMainWindow):
    def __init__(self, title, central_widget=None):
        super().__init__()

        self.setWindowTitle(title)
        self.setWindowFlags(Qt.FramelessWindowHint)

        # Create custom title bar
        self.title_bar = CustomTitleBar(self, title)

        # Create status bar and set it separately from the central widget
        self.status_bar = QStatusBar()
        self.status_bar.setStyleSheet("background-color: #780000; color: white;")
        self.setStatusBar(self.status_bar)

        # Create a widget for the title bar and set its background color
        self.title_bar_widget = QWidget()
        self.title_bar_widget.setStyleSheet("background-color: #780000;")
        self.title_bar_layout = QVBoxLayout()
        self.title_bar_widget.setLayout(self.title_bar_layout)

        # Add the custom title bar to the title bar widget
        self.title_bar_layout.addWidget(self.title_bar)

        # Set the title bar widget as the QMainWindow's menu bar
        self.setMenuWidget(self.title_bar_widget)

        # Add the passed widget to the layout
        if central_widget:
            self.setCentralWidget(central_widget)

        self.setMouseTracking(True)
        self.resize_origin = QPoint()

    def get_content_widget(self):
        return self.centralWidget()

    def get_status_bar(self):
        return self.status_bar

    def event(self, event):
        if (
            event.type() == QEvent.MouseButtonPress
            and event.buttons() == Qt.LeftButton
            and self.status_bar.underMouse()
        ):
            self.resize_origin = event.position()

        if (
            event.type() == QEvent.MouseMove
            and event.buttons() == Qt.LeftButton
            and self.resize_origin is not None
        ):
            delta = event.position() - self.resize_origin
            new_width = self.width() + delta.x()
            new_height = self.height() + delta.y()

            screen_size = QApplication.primaryScreen().availableSize()
            new_x = self.x() + new_width
            new_y = self.y() + new_height

            if new_x > screen_size.width():
                new_width = screen_size.width() - self.x()
            if new_y > screen_size.height():
                new_height = screen_size.height() - self.y()

            self.resize(new_width, new_height)
            self.resize_origin = event.position()

        if event.type() == QEvent.MouseButtonRelease:
            self.resize_origin = None

        return super().event(event)


class AboutDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)

        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Dialog)

        self.setStyleSheet("background-color: #780000;")

        self.label = QLabel(
            "Another Intuitive Product\nfrom the folks at\nBowersWorld.com"
        )
        self.label.setStyleSheet("color: #ffd200; font: bold 24px; text-align: center;")
        self.label.setAlignment(Qt.AlignCenter)

        pixmap = QPixmap("Assets/BowersWorld.png").scaled(170, 170, Qt.KeepAspectRatio)

        self.icon_label = QLabel()
        self.icon_label.setPixmap(pixmap)

        self.copyright_label = QLabel("\u00A9")
        self.copyright_label.setContentsMargins(0, 160, 0, 0)
        self.copyright_label.setStyleSheet(
            "color: #ffd200; font: bold 24px; text-align: center;"
        )

        self.icon_layout = QHBoxLayout()
        self.icon_layout.addWidget(QLabel("   "))
        self.icon_layout.addWidget(self.icon_label)
        self.icon_layout.addWidget(self.copyright_label)

        self.icon_layout.insertStretch(0, 1)
        self.icon_layout.insertStretch(4, 1)

        self.layout = QVBoxLayout()
        self.layout.setContentsMargins(15, 15, 15, 15)
        self.setLayout(self.layout)

        self.layout.addWidget(self.label)
        self.layout.addLayout(self.icon_layout)

    def showEvent(self, event):
        if self.parent() is not None:
            parent_rect = self.parent().frameGeometry()
            self.move(parent_rect.center() - self.rect().center())
        super().showEvent(event)


class IconLabel(QLabel):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.about_dialog = AboutDialog(self.window())
        self.setMouseTracking(True)

    def enterEvent(self, e):
        if e.type() == QEvent.Enter:
            self.about_dialog.move(QCursor.pos())
            self.about_dialog.show()

    def leaveEvent(self, e):
        if e.type() == QEvent.Leave:
            self.about_dialog.hide()


class CustomTitleBar(QWidget):
    def __init__(self, parent, title):
        super().__init__(parent)
        self.parent = parent
        self.setFixedHeight(24)
        self.setStyleSheet("background-color: #780000; color: white;")

        self.draggable = False
        self.draggable_offset = QPoint()

        self.layout = QHBoxLayout(self)
        self.layout.setContentsMargins(0, 0, 0, 0)

        self.icon_label = IconLabel(self)
        self.icon_label.setPixmap(
            QPixmap("Assets/icon.png").scaled(30, 30, Qt.KeepAspectRatio)
        )

        self.title_label = QLabel(self)
        self.title_label.setText(title)
        self.title_label.setStyleSheet("font: 12pt Arial;")

        self.spacer = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        # Tooltip styles for the buttons
        tooltip_stylesheet = """
        QToolTip {
            font-size: 16px;
        }
        """

        self.min_button = QPushButton(self)
        pixmap = QPixmap("Assets/hide.png").scaled(34, 34, Qt.KeepAspectRatio)
        self.min_button.setIcon(QIcon(pixmap))
        self.min_button.setIconSize(QSize(34, 34))
        self.min_button.setFixedSize(28, 28)
        self.min_button.clicked.connect(self.parent.showMinimized)

        self.min_button.setStyleSheet(
            """
        QPushButton {
            background-color: none;
        }
        QPushButton:hover {
            background-color: #FFFFFF;
        }
        QPushButton:pressed {
            background-color: #800000;
        }
        """
            + tooltip_stylesheet
        )
        self.min_button.setToolTip("Hide")

        self.max_button = QPushButton(self)
        pixmap = QPixmap("Assets/Max.png").scaled(30, 30, Qt.KeepAspectRatio)
        self.max_button.setIcon(QIcon(pixmap))
        self.max_button.setIconSize(QSize(30, 30))
        self.max_button.setFixedSize(28, 28)
        self.max_button.clicked.connect(self.toggle_maximize)
        self.max_button.setStyleSheet(
            """
        QPushButton {
            background-color: none;
        }
        QPushButton:hover {
            background-color: #FFFFFF;
        }
        QPushButton:pressed {
            background-color: #800000;
        }
        """
            + tooltip_stylesheet
        )
        self.max_button.setToolTip("Max/Min")

        self.exit_button = QPushButton(self)
        pixmap = QPixmap("Assets/exit.png").scaled(30, 30)
        self.exit_button.setIcon(QIcon(pixmap))
        self.exit_button.setIconSize(QSize(30, 24))
        self.exit_button.setFixedSize(30, 24)
        self.exit_button.clicked.connect(self.parent.close)
        self.exit_button.setStyleSheet(
            """
        QPushButton {s
            background-color: none;
        }
        QPushButton:hover {
            background-color: #FFFFFF;
        }
        QPushButton:pressed {
            background-color: #800000;
        }
        """
            + tooltip_stylesheet
        )
        self.exit_button.setToolTip("Exit")

        self.layout.addWidget(self.icon_label)
        self.layout.addWidget(self.title_label)
        self.layout.addItem(self.spacer)
        self.layout.addWidget(self.min_button)
        self.layout.addWidget(self.max_button)
        self.layout.addWidget(self.exit_button)

        self.normal_size = self.parent.size()

    def toggle_maximize(self):
        if self.parent.isFullScreen():
            self.parent.showNormal()
            self.parent.resize(self.normal_size)
        else:
            self.normal_size = self.parent.size()
            self.parent.showFullScreen()

    def mousePressEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.draggable = True
            self.draggable_offset = (
                event.globalPosition().toPoint() - self.parent.frameGeometry().topLeft()
            )

    def mouseMoveEvent(self, event: QMouseEvent):
        if self.draggable:
            new_position = event.globalPosition().toPoint() - self.draggable_offset
            self.parent.move(new_position)

    def mouseReleaseEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.draggable = False

    def mouseDoubleClickEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.toggle_maximize()


if __name__ == "__main__":
    import sys

    app = QApplication(sys.argv)

    # Increase size of tool tips
    app.setStyleSheet(
        """
    QToolTip {
        font-size: px;
    }
    """
    )

    window = CustomWindow("Test Window")
    window.showMaximized()
    sys.exit(app.exec())

================
File: Source/Interface/FilterPanel.py
================
# File: FilterPanel.py
# Path: Source/Interface/FilterPanel.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  04:12PM
"""
Description: Filter Panel Component for Anderson's Library
Provides the left sidebar interface for searching and filtering books.
Includes text search, category filters, author filters, and advanced options.
"""

import logging
from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                               QLineEdit, QPushButton, QComboBox, QCheckBox,
                               QGroupBox, QScrollArea, QButtonGroup, QFrame,
                               QSlider, QSpinBox, QDateEdit, QListWidget,
                               QListWidgetItem, QSizePolicy)
from PySide6.QtCore import Qt, Signal, QDate, QTimer
from PySide6.QtGui import QFont, QPalette, QIcon
from typing import List, Dict, Optional, Callable
from ..Data.DatabaseModels import SearchCriteria, CategoryInfo


class FilterPanel(QWidget):
    """
    Left sidebar panel providing search and filter functionality.
    Emits signals when search criteria changes to trigger book grid updates.
    """
    
    # Signals
    SearchRequested = Signal(object)  # SearchCriteria
    FiltersChanged = Signal(object)   # SearchCriteria
    ClearRequested = Signal()
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.SetupUI()
        self.SetupConnections()
        self.LoadInitialData()
        
        # Search debouncing
        self.SearchTimer = QTimer()
        self.SearchTimer.setSingleShot(True)
        self.SearchTimer.timeout.connect(self.OnSearchTimerTimeout)
        
        # Current filter state
        self.CurrentCriteria = SearchCriteria()
        
        logging.info("FilterPanel initialized")
    
    def SetupUI(self):
        """Create and arrange the filter panel interface"""
        self.setFixedWidth(280)
        self.setMinimumHeight(600)
        
        # Main layout
        MainLayout = QVBoxLayout(self)
        MainLayout.setContentsMargins(10, 10, 10, 10)
        MainLayout.setSpacing(15)
        
        # Header
        self.CreateHeaderSection(MainLayout)
        
        # Search section
        self.CreateSearchSection(MainLayout)
        
        # Quick filters
        self.CreateQuickFiltersSection(MainLayout)
        
        # Category filters
        self.CreateCategorySection(MainLayout)
        
        # Author filters  
        self.CreateAuthorSection(MainLayout)
        
        # Advanced filters
        self.CreateAdvancedSection(MainLayout)
        
        # Action buttons
        self.CreateActionSection(MainLayout)
        
        # Stretch to push everything to top
        MainLayout.addStretch()
        
        # Apply styling
        self.ApplyStyles()
    
    def CreateHeaderSection(self, Layout: QVBoxLayout):
        """Create the header with title and stats"""
        HeaderFrame = QFrame()
        HeaderLayout = QVBoxLayout(HeaderFrame)
        HeaderLayout.setContentsMargins(0, 0, 0, 0)
        
        # Title
        TitleLabel = QLabel("📚 Library Filters")
        TitleLabel.setAlignment(Qt.AlignmentFlag.AlignCenter)
        TitleFont = QFont()
        TitleFont.setPointSize(14)
        TitleFont.setBold(True)
        TitleLabel.setFont(TitleFont)
        HeaderLayout.addWidget(TitleLabel)
        
        # Stats label
        self.StatsLabel = QLabel("Loading...")
        self.StatsLabel.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.StatsLabel.setStyleSheet("color: #666; font-size: 11px;")
        HeaderLayout.addWidget(self.StatsLabel)
        
        Layout.addWidget(HeaderFrame)
    
    def CreateSearchSection(self, Layout: QVBoxLayout):
        """Create the text search section"""
        SearchGroup = QGroupBox("🔍 Search")
        SearchLayout = QVBoxLayout(SearchGroup)
        
        # Main search box
        self.SearchEdit = QLineEdit()
        self.SearchEdit.setPlaceholderText("Search titles, authors, subjects...")
        self.SearchEdit.setClearButtonEnabled(True)
        SearchLayout.addWidget(self.SearchEdit)
        
        # Search field options
        FieldsFrame = QFrame()
        FieldsLayout = QVBoxLayout(FieldsFrame)
        FieldsLayout.setContentsMargins(0, 0, 0, 0)
        FieldsLayout.setSpacing(5)
        
        self.SearchTitleCheck = QCheckBox("Search in titles")
        self.SearchTitleCheck.setChecked(True)
        FieldsLayout.addWidget(self.SearchTitleCheck)
        
        self.SearchAuthorCheck = QCheckBox("Search in authors")
        self.SearchAuthorCheck.setChecked(True)
        FieldsLayout.addWidget(self.SearchAuthorCheck)
        
        self.SearchSubjectCheck = QCheckBox("Search in subjects")
        self.SearchSubjectCheck.setChecked(True)
        FieldsLayout.addWidget(self.SearchSubjectCheck)
        
        self.SearchKeywordsCheck = QCheckBox("Search in keywords")
        self.SearchKeywordsCheck.setChecked(True)
        FieldsLayout.addWidget(self.SearchKeywordsCheck)
        
        self.SearchDescriptionCheck = QCheckBox("Search in descriptions")
        self.SearchDescriptionCheck.setChecked(False)
        FieldsLayout.addWidget(self.SearchDescriptionCheck)
        
        SearchLayout.addWidget(FieldsFrame)
        Layout.addWidget(SearchGroup)
    
    def CreateQuickFiltersSection(self, Layout: QVBoxLayout):
        """Create quick filter buttons"""
        QuickGroup = QGroupBox("⚡ Quick Filters")
        QuickLayout = QVBoxLayout(QuickGroup)
        
        # Row 1
        Row1Layout = QHBoxLayout()
        self.RecentlyAddedBtn = QPushButton("Recent")
        self.RecentlyAddedBtn.setCheckable(True)
        self.HighRatedBtn = QPushButton("★★★★+")
        self.HighRatedBtn.setCheckable(True)
        Row1Layout.addWidget(self.RecentlyAddedBtn)
        Row1Layout.addWidget(self.HighRatedBtn)
        QuickLayout.addLayout(Row1Layout)
        
        # Row 2
        Row2Layout = QHBoxLayout()
        self.UnreadBtn = QPushButton("Unread")
        self.UnreadBtn.setCheckable(True)
        self.LargeFilesBtn = QPushButton("Large Files")
        self.LargeFilesBtn.setCheckable(True)
        Row2Layout.addWidget(self.UnreadBtn)
        Row2Layout.addWidget(self.LargeFilesBtn)
        QuickLayout.addLayout(Row2Layout)
        
        Layout.addWidget(QuickGroup)
    
    def CreateCategorySection(self, Layout: QVBoxLayout):
        """Create category filter section"""
        CategoryGroup = QGroupBox("📂 Categories")
        CategoryLayout = QVBoxLayout(CategoryGroup)
        
        # Category dropdown
        self.CategoryCombo = QComboBox()
        self.CategoryCombo.addItem("All Categories", "")
        CategoryLayout.addWidget(self.CategoryCombo)
        
        # Category list for multiple selection
        self.CategoryList = QListWidget()
        self.CategoryList.setMaximumHeight(120)
        self.CategoryList.setSelectionMode(QListWidget.SelectionMode.MultiSelection)
        CategoryLayout.addWidget(self.CategoryList)
        
        # Show/hide multiple selection
        self.MultipleCategoriesCheck = QCheckBox("Multiple selection")
        self.MultipleCategoriesCheck.toggled.connect(self.OnMultipleCategoriesToggled)
        CategoryLayout.addWidget(self.MultipleCategoriesCheck)
        
        # Initially hide the list
        self.CategoryList.hide()
        
        Layout.addWidget(CategoryGroup)
    
    def CreateAuthorSection(self, Layout: QVBoxLayout):
        """Create author filter section"""
        AuthorGroup = QGroupBox("👤 Authors")
        AuthorLayout = QVBoxLayout(AuthorGroup)
        
        # Author dropdown
        self.AuthorCombo = QComboBox()
        self.AuthorCombo.addItem("All Authors", "")
        self.AuthorCombo.setEditable(True)
        self.AuthorCombo.setInsertPolicy(QComboBox.InsertPolicy.NoInsert)
        AuthorLayout.addWidget(self.AuthorCombo)
        
        # Popular authors quick buttons
        self.PopularAuthorsFrame = QFrame()
        self.PopularAuthorsLayout = QVBoxLayout(self.PopularAuthorsFrame)
        self.PopularAuthorsLayout.setContentsMargins(0, 0, 0, 0)
        AuthorLayout.addWidget(self.PopularAuthorsFrame)
        
        Layout.addWidget(AuthorGroup)
    
    def CreateAdvancedSection(self, Layout: QVBoxLayout):
        """Create advanced filters section"""
        AdvancedGroup = QGroupBox("⚙️ Advanced")
        AdvancedLayout = QVBoxLayout(AdvancedGroup)
        
        # Make it collapsible
        AdvancedGroup.setCheckable(True)
        AdvancedGroup.setChecked(False)
        
        # Rating filter
        RatingFrame = QFrame()
        RatingLayout = QHBoxLayout(RatingFrame)
        RatingLayout.addWidget(QLabel("Rating:"))
        
        self.MinRatingSlider = QSlider(Qt.Orientation.Horizontal)
        self.MinRatingSlider.setRange(0, 5)
        self.MinRatingSlider.setValue(0)
        RatingLayout.addWidget(self.MinRatingSlider)
        
        self.RatingLabel = QLabel("0-5")
        RatingLayout.addWidget(self.RatingLabel)
        AdvancedLayout.addWidget(RatingFrame)
        
        # Page count filter
        PageFrame = QFrame()
        PageLayout = QHBoxLayout(PageFrame)
        PageLayout.addWidget(QLabel("Pages:"))
        
        self.MinPagesSpinBox = QSpinBox()
        self.MinPagesSpinBox.setRange(0, 9999)
        self.MinPagesSpinBox.setSpecialValueText("Any")
        PageLayout.addWidget(self.MinPagesSpinBox)
        
        PageLayout.addWidget(QLabel("to"))
        
        self.MaxPagesSpinBox = QSpinBox()
        self.MaxPagesSpinBox.setRange(0, 9999)
        self.MaxPagesSpinBox.setValue(9999)
        self.MaxPagesSpinBox.setSpecialValueText("Any")
        PageLayout.addWidget(self.MaxPagesSpinBox)
        AdvancedLayout.addWidget(PageFrame)
        
        # Date filter
        DateFrame = QFrame()
        DateLayout = QVBoxLayout(DateFrame)
        DateLayout.addWidget(QLabel("Date Added:"))
        
        DateRangeLayout = QHBoxLayout()
        self.DateFromEdit = QDateEdit()
        self.DateFromEdit.setDate(QDate.currentDate().addYears(-1))
        self.DateFromEdit.setCalendarPopup(True)
        DateRangeLayout.addWidget(self.DateFromEdit)
        
        DateRangeLayout.addWidget(QLabel("to"))
        
        self.DateToEdit = QDateEdit()
        self.DateToEdit.setDate(QDate.currentDate())
        self.DateToEdit.setCalendarPopup(True)
        DateRangeLayout.addWidget(self.DateToEdit)
        
        DateLayout.addLayout(DateRangeLayout)
        
        self.DateFilterCheck = QCheckBox("Enable date filter")
        self.DateFilterCheck.toggled.connect(self.OnDateFilterToggled)
        DateLayout.addWidget(self.DateFilterCheck)
        AdvancedLayout.addWidget(DateFrame)
        
        # File format filter
        FormatFrame = QFrame()
        FormatLayout = QVBoxLayout(FormatFrame)
        FormatLayout.addWidget(QLabel("File Format:"))
        
        self.PdfCheck = QCheckBox("PDF")
        self.PdfCheck.setChecked(True)
        FormatLayout.addWidget(self.PdfCheck)
        
        self.EpubCheck = QCheckBox("EPUB")
        FormatLayout.addWidget(self.EpubCheck)
        
        self.MobiCheck = QCheckBox("MOBI")
        FormatLayout.addWidget(self.MobiCheck)
        AdvancedLayout.addWidget(FormatFrame)
        
        # Initially disable date controls
        self.OnDateFilterToggled(False)
        
        Layout.addWidget(AdvancedGroup)
    
    def CreateActionSection(self, Layout: QVBoxLayout):
        """Create action buttons"""
        ActionFrame = QFrame()
        ActionLayout = QVBoxLayout(ActionFrame)
        ActionLayout.setSpacing(10)
        
        # Search button
        self.SearchButton = QPushButton("🔍 Search")
        self.SearchButton.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 8px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
            QPushButton:pressed {
                background-color: #0D47A1;
            }
        """)
        ActionLayout.addWidget(self.SearchButton)
        
        # Clear button
        self.ClearButton = QPushButton("🗑️ Clear All")
        self.ClearButton.setStyleSheet("""
            QPushButton {
                background-color: #FF5722;
                color: white;
                border: none;
                padding: 8px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #D84315;
            }
        """)
        ActionLayout.addWidget(self.ClearButton)
        
        # Results count
        self.ResultsLabel = QLabel("Ready to search")
        self.ResultsLabel.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.ResultsLabel.setStyleSheet("color: #666; font-size: 11px; margin-top: 5px;")
        ActionLayout.addWidget(self.ResultsLabel)
        
        Layout.addWidget(ActionFrame)
    
    def SetupConnections(self):
        """Connect signals and slots"""
        # Search text with debouncing
        self.SearchEdit.textChanged.connect(self.OnSearchTextChanged)
        
        # Search field checkboxes
        self.SearchTitleCheck.toggled.connect(self.OnFiltersChanged)
        self.SearchAuthorCheck.toggled.connect(self.OnFiltersChanged)
        self.SearchSubjectCheck.toggled.connect(self.OnFiltersChanged)
        self.SearchKeywordsCheck.toggled.connect(self.OnFiltersChanged)
        self.SearchDescriptionCheck.toggled.connect(self.OnFiltersChanged)
        
        # Quick filters
        self.RecentlyAddedBtn.toggled.connect(self.OnFiltersChanged)
        self.HighRatedBtn.toggled.connect(self.OnFiltersChanged)
        self.UnreadBtn.toggled.connect(self.OnFiltersChanged)
        self.LargeFilesBtn.toggled.connect(self.OnFiltersChanged)
        
        # Category filters
        self.CategoryCombo.currentTextChanged.connect(self.OnFiltersChanged)
        self.CategoryList.itemSelectionChanged.connect(self.OnFiltersChanged)
        
        # Author filter
        self.AuthorCombo.currentTextChanged.connect(self.OnFiltersChanged)
        
        # Advanced filters
        self.MinRatingSlider.valueChanged.connect(self.OnRatingChanged)
        self.MinPagesSpinBox.valueChanged.connect(self.OnFiltersChanged)
        self.MaxPagesSpinBox.valueChanged.connect(self.OnFiltersChanged)
        self.DateFromEdit.dateChanged.connect(self.OnFiltersChanged)
        self.DateToEdit.dateChanged.connect(self.OnFiltersChanged)
        self.PdfCheck.toggled.connect(self.OnFiltersChanged)
        self.EpubCheck.toggled.connect(self.OnFiltersChanged)
        self.MobiCheck.toggled.connect(self.OnFiltersChanged)
        
        # Action buttons
        self.SearchButton.clicked.connect(self.OnSearchClicked)
        self.ClearButton.clicked.connect(self.OnClearClicked)
    
    def ApplyStyles(self):
        """Apply consistent styling"""
        self.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #cccccc;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 5px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
            QLineEdit {
                padding: 6px;
                border: 1px solid #ddd;
                border-radius: 3px;
            }
            QComboBox {
                padding: 4px;
                border: 1px solid #ddd;
                border-radius: 3px;
            }
            QPushButton {
                padding: 6px 12px;
                border: 1px solid #ddd;
                border-radius: 3px;
                background-color: #f5f5f5;
            }
            QPushButton:hover {
                background-color: #e5e5e5;
            }
            QPushButton:checked {
                background-color: #2196F3;
                color: white;
            }
        """)
    
    def LoadInitialData(self):
        """Load initial filter data"""
        # This will be called by the main window to populate categories and authors
        pass
    
    def UpdateCategories(self, Categories: List[CategoryInfo]):
        """Update the category filter options"""
        # Clear existing
        self.CategoryCombo.clear()
        self.CategoryList.clear()
        
        # Add "All Categories" option
        self.CategoryCombo.addItem("All Categories", "")
        
        # Add categories
        for Category in Categories:
            DisplayName = Category.GetDisplayName()
            self.CategoryCombo.addItem(DisplayName, Category.Name)
            
            ListItem = QListWidgetItem(DisplayName)
            ListItem.setData(Qt.ItemDataRole.UserRole, Category.Name)
            self.CategoryList.addItem(ListItem)
    
    def UpdateAuthors(self, Authors: List[str]):
        """Update the author filter options"""
        # Clear existing
        self.AuthorCombo.clear()
        
        # Add "All Authors" option
        self.AuthorCombo.addItem("All Authors", "")
        
        # Add authors
        for Author in Authors:
            self.AuthorCombo.addItem(Author, Author)
        
        # Update popular authors buttons
        self.UpdatePopularAuthors(Authors[:6])  # Top 6 authors
    
    def UpdatePopularAuthors(self, Authors: List[str]):
        """Update popular author quick buttons"""
        # Clear existing buttons
        for i in reversed(range(self.PopularAuthorsLayout.count())):
            child = self.PopularAuthorsLayout.itemAt(i).widget()
            if child:
                child.deleteLater()
        
        # Add new buttons
        for Author in Authors:
            AuthorBtn = QPushButton(Author)
            AuthorBtn.setCheckable(True)
            AuthorBtn.setMaximumHeight(25)
            AuthorBtn.clicked.connect(lambda checked, a=Author: self.OnPopularAuthorClicked(a))
            self.PopularAuthorsLayout.addWidget(AuthorBtn)
    
    def UpdateStats(self, TotalBooks: int, FilteredBooks: int):
        """Update the stats display"""
        if FilteredBooks == TotalBooks:
            self.StatsLabel.setText(f"{TotalBooks} books total")
        else:
            self.StatsLabel.setText(f"{FilteredBooks} of {TotalBooks} books")
        
        self.ResultsLabel.setText(f"Showing {FilteredBooks} books")
    
    def GetCurrentCriteria(self) -> SearchCriteria:
        """Build and return current search criteria"""
        Criteria = SearchCriteria()
        
        # Text search
        Criteria.SearchText = self.SearchEdit.text().strip()
        Criteria.SearchTitle = self.SearchTitleCheck.isChecked()
        Criteria.SearchAuthor = self.SearchAuthorCheck.isChecked()
        Criteria.SearchSubject = self.SearchSubjectCheck.isChecked()
        Criteria.SearchKeywords = self.SearchKeywordsCheck.isChecked()
        Criteria.SearchDescription = self.SearchDescriptionCheck.isChecked()
        
        # Categories
        if self.MultipleCategoriesCheck.isChecked():
            # Multiple selection from list
            SelectedItems = self.CategoryList.selectedItems()
            Criteria.Categories = [item.data(Qt.ItemDataRole.UserRole) for item in SelectedItems]
        else:
            # Single selection from combo
            CurrentCategory = self.CategoryCombo.currentData()
            if CurrentCategory:
                Criteria.Categories = [CurrentCategory]
        
        # Author
        CurrentAuthor = self.AuthorCombo.currentData()
        if CurrentAuthor:
            Criteria.Authors = [CurrentAuthor]
        
        # Quick filters
        if self.RecentlyAddedBtn.isChecked():
            Criteria.DateAddedFrom = QDate.currentDate().addDays(-30).toString("yyyy-MM-dd")
        
        if self.HighRatedBtn.isChecked():
            Criteria.MinRating = 4
        
        if self.UnreadBtn.isChecked():
            Criteria.ReadStatuses = ["Unread"]
        
        if self.LargeFilesBtn.isChecked():
            Criteria.MinFileSize = 50 * 1024 * 1024  # 50 MB
        
        # Advanced filters
        if self.MinRatingSlider.value() > 0:
            Criteria.MinRating = max(Criteria.MinRating, self.MinRatingSlider.value())
        
        if self.MinPagesSpinBox.value() > 0:
            Criteria.MinPageCount = self.MinPagesSpinBox.value()
        
        if self.MaxPagesSpinBox.value() < 9999:
            Criteria.MaxPageCount = self.MaxPagesSpinBox.value()
        
        # Date filter
        if self.DateFilterCheck.isChecked():
            Criteria.DateAddedFrom = self.DateFromEdit.date().toString("yyyy-MM-dd")
            Criteria.DateAddedTo = self.DateToEdit.date().toString("yyyy-MM-dd")
        
        # File formats
        FileFormats = []
        if self.PdfCheck.isChecked():
            FileFormats.append("PDF")
        if self.EpubCheck.isChecked():
            FileFormats.append("EPUB")
        if self.MobiCheck.isChecked():
            FileFormats.append("MOBI")
        Criteria.FileFormats = FileFormats
        
        self.CurrentCriteria = Criteria
        return Criteria
    
    def ClearFilters(self):
        """Clear all filters and reset to defaults"""
        # Search
        self.SearchEdit.clear()
        self.SearchTitleCheck.setChecked(True)
        self.SearchAuthorCheck.setChecked(True)
        self.SearchSubjectCheck.setChecked(True)
        self.SearchKeywordsCheck.setChecked(True)
        self.SearchDescriptionCheck.setChecked(False)
        
        # Quick filters
        self.RecentlyAddedBtn.setChecked(False)
        self.HighRatedBtn.setChecked(False)
        self.UnreadBtn.setChecked(False)
        self.LargeFilesBtn.setChecked(False)
        
        # Categories
        self.CategoryCombo.setCurrentIndex(0)
        self.CategoryList.clearSelection()
        self.MultipleCategoriesCheck.setChecked(False)
        
        # Authors
        self.AuthorCombo.setCurrentIndex(0)
        
        # Clear popular author buttons
        for i in range(self.PopularAuthorsLayout.count()):
            widget = self.PopularAuthorsLayout.itemAt(i).widget()
            if isinstance(widget, QPushButton):
                widget.setChecked(False)
        
        # Advanced
        self.MinRatingSlider.setValue(0)
        self.MinPagesSpinBox.setValue(0)
        self.MaxPagesSpinBox.setValue(9999)
        self.DateFilterCheck.setChecked(False)
        self.PdfCheck.setChecked(True)
        self.EpubCheck.setChecked(False)
        self.MobiCheck.setChecked(False)
        
        logging.info("All filters cleared")
    
    # Event handlers
    def OnSearchTextChanged(self):
        """Handle search text changes with debouncing"""
        self.SearchTimer.stop()
        self.SearchTimer.start(500)  # 500ms delay
    
    def OnSearchTimerTimeout(self):
        """Handle search timer timeout"""
        self.OnFiltersChanged()
    
    def OnFiltersChanged(self):
        """Handle any filter change"""
        Criteria = self.GetCurrentCriteria()
        self.FiltersChanged.emit(Criteria)
    
    def OnSearchClicked(self):
        """Handle search button click"""
        Criteria = self.GetCurrentCriteria()
        self.SearchRequested.emit(Criteria)
        logging.info(f"Search requested: {Criteria.GetSummary()}")
    
    def OnClearClicked(self):
        """Handle clear button click"""
        self.ClearFilters()
        self.ClearRequested.emit()
        logging.info("Filters cleared")
    
    def OnMultipleCategoriesToggled(self, Checked: bool):
        """Handle multiple categories checkbox toggle"""
        if Checked:
            self.CategoryCombo.hide()
            self.CategoryList.show()
        else:
            self.CategoryCombo.show()
            self.CategoryList.hide()
            self.CategoryList.clearSelection()
        self.OnFiltersChanged()
    
    def OnRatingChanged(self, Value: int):
        """Handle rating slider change"""
        self.RatingLabel.setText(f"{Value}-5")
        self.OnFiltersChanged()
    
    def OnDateFilterToggled(self, Checked: bool):
        """Handle date filter checkbox toggle"""
        self.DateFromEdit.setEnabled(Checked)
        self.DateToEdit.setEnabled(Checked)
        if Checked:
            self.OnFiltersChanged()
    
    def OnPopularAuthorClicked(self, Author: str):
        """Handle popular author button click"""
        # Set the author in the combo box
        Index = self.AuthorCombo.findData(Author)
        if Index >= 0:
            self.AuthorCombo.setCurrentIndex(Index)
        self.OnFiltersChanged()
================
File: Source/Interface/MainWindow.py
================
# File: MainWindow.py
# Path: Source/Interface/MainWindow.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04 06:35PM
"""
Description: Main Application Window for Anderson's Library
Orchestrates the Filter Panel and Book Grid components to create the complete
library management interface. Handles application-level concerns and user interactions.
"""

import sys
import logging
import os
import subprocess
import platform
from PySide6.QtWidgets import (QApplication, QMainWindow, QHBoxLayout, QVBoxLayout, QSizePolicy, QMenu,
                               QWidget, QMenuBar, QStatusBar, QToolBar, 
                               QMessageBox, QProgressBar, QLabel, QSplitter,
                               QDialog, QTextEdit, QPushButton, QFileDialog)
from PySide6.QtCore import Qt, QTimer, QThread, Signal, QSettings, QSize
from PySide6.QtGui import QIcon, QPixmap, QFont, QKeySequence, QShortcut, QAction
from typing import List, Optional, Dict, Any
import traceback

from .CustomWindow import CustomWindow
from .FilterPanel import FilterPanel
from .BookGrid import BookGrid
from ..Core.DatabaseManager import DatabaseManager
from ..Core.BookService import BookService
from ..Data.DatabaseModels import BookRecord, SearchResult, SearchCriteria, CategoryInfo, LibraryStatistics


class LoadingWorker(QThread):
    """
    Background worker for loading books and performing database operations.
    Prevents the UI from freezing during long operations.
    """
    
    # Signals
    BooksLoaded = Signal(object)        # SearchResult
    StatisticsLoaded = Signal(object)   # LibraryStatistics
    Error = Signal(str)                 # Error message
    Progress = Signal(int, str)         # Progress value, status message
    
    def __init__(self, BookService: BookService, SearchCriteria: Optional[SearchCriteria] = None):
        super().__init__()
        self.BookService = BookService
        self.SearchCriteria = SearchCriteria
        self.Operation = "load_books"
        
    def SetOperation(self, Operation: str):
        """Set the operation to perform"""
        self.Operation = Operation
    
    def run(self):
        """Execute the background operation"""
        try:
            if self.Operation == "load_books":
                self.LoadBooks()
            elif self.Operation == "load_statistics":
                self.LoadStatistics()
            elif self.Operation == "refresh_database":
                self.RefreshDatabase()
                
        except Exception as Error:
            logging.error(f"Worker error: {Error}")
            self.Error.emit(str(Error))
    
    def LoadBooks(self):
        """Load books based on search criteria"""
        try:
            self.Progress.emit(10, "Connecting to database...")
            
            if self.SearchCriteria and not self.SearchCriteria.IsEmpty():
                self.Progress.emit(30, "Searching books...")
                Result = self.BookService.SearchBooks(self.SearchCriteria)
            else:
                self.Progress.emit(30, "Loading all books...")
                Result = self.BookService.GetAllBooks()
            
            self.Progress.emit(90, "Processing results...")
            self.BooksLoaded.emit(Result)
            self.Progress.emit(100, "Complete")
            
        except Exception as Error:
            self.Error.emit(f"Error loading books: {Error}")
    
    def LoadStatistics(self):
        """Load library statistics"""
        try:
            self.Progress.emit(20, "Calculating statistics...")
            Stats = self.BookService.GetLibraryStatistics()
            self.StatisticsLoaded.emit(Stats)
            self.Progress.emit(100, "Statistics loaded")
            
        except Exception as Error:
            self.Error.emit(f"Error loading statistics: {Error}")
    
    def RefreshDatabase(self):
        """Refresh database and reload books"""
        try:
            self.Progress.emit(20, "Refreshing database...")
            # This could include operations like updating file paths, 
            # recalculating statistics, cleaning up orphaned records, etc.
            self.Progress.emit(60, "Reloading books...")
            Result = self.BookService.GetAllBooks()
            self.BooksLoaded.emit(Result)
            self.Progress.emit(100, "Database refreshed")
            
        except Exception as Error:
            self.Error.emit(f"Error refreshing database: {Error}")


class AndersonMainWindow(CustomWindow):
    """
    Main application window for Anderson's Library.
    Inherits from CustomWindow for consistent BowersWorld styling and behavior.
    """
    
    def __init__(self):
        super().__init__("Anderson's Library - Professional Edition")
        
        # Initialize services
        self.DatabaseManager = None
        self.BookService = None
        self.LoadingWorker = None
        
        # Application state
        self.CurrentBooks = []
        self.CurrentCriteria = SearchCriteria()
        self.LibraryStats = None
        
        # Initialize the UI
        self.InitializeApplication()
        self.SetupMainWindow()
        self.CreateMenuSystem()
        self.CreateToolbar()
        self.CreateMainInterface()
        self.CreateStatusBar()
        self.SetupConnections()
        self.LoadSettings()
        
        # Start loading data
        self.StartDataLoading()
        
        logging.info("Anderson's Library main window initialized")
    
    def InitializeApplication(self):
        """Initialize database and services"""
        try:
            # Initialize database
            DatabasePath = "Assets/my_library.db"
            if not os.path.exists(DatabasePath):
                # Try alternate paths
                AlternatePaths = [
                    "Data/my_library.db",
                    "Data/Databases/my_library.db",
                    "my_library.db"
                ]
                
                for Path in AlternatePaths:
                    if os.path.exists(Path):
                        DatabasePath = Path
                        break
                else:
                    raise FileNotFoundError("Database file not found")
            
            self.DatabaseManager = DatabaseManager(DatabasePath)
            self.BookService = BookService(self.DatabaseManager)
            
            logging.info(f"Database initialized: {DatabasePath}")
            
        except Exception as Error:
            logging.error(f"Failed to initialize application: {Error}")
            QMessageBox.critical(self, "Initialization Error", 
                               f"Failed to initialize Anderson's Library:\n{Error}")
            sys.exit(1)
    
    def SetupMainWindow(self):
        """Configure the main window properties"""
        self.setWindowTitle("🏔️ Anderson's Library - Professional Edition")
        self.setMinimumSize(1200, 800)
        self.resize(1400, 900)
        
        # Try to load application icon
        IconPaths = [
            "Assets/icon.png",
            "Assets/library.png", 
            "Assets/BowersWorld.png"
        ]
        
        for IconPath in IconPaths:
            if os.path.exists(IconPath):
                self.setWindowIcon(QIcon(IconPath))
                break
    
    def CreateMenuSystem(self):
        """Create the application menu system"""
        MenuBar = self.menuBar()
        
        # File menu
        FileMenu = MenuBar.addMenu("&File")
        
        OpenAction = QAction("&Open Book...", self)
        OpenAction.setShortcut(QKeySequence.StandardKey.Open)
        OpenAction.setStatusTip("Open a book file")
        OpenAction.triggered.connect(self.OnOpenBook)
        FileMenu.addAction(OpenAction)
        
        FileMenu.addSeparator()
        
        RefreshAction = QAction("&Refresh Library", self)
        RefreshAction.setShortcut(QKeySequence("F5"))
        RefreshAction.setStatusTip("Refresh the library database")
        RefreshAction.triggered.connect(self.OnRefreshLibrary)
        FileMenu.addAction(RefreshAction)
        
        FileMenu.addSeparator()
        
        ExitAction = QAction("E&xit", self)
        ExitAction.setShortcut(QKeySequence.StandardKey.Quit)
        ExitAction.setStatusTip("Exit Anderson's Library")
        ExitAction.triggered.connect(self.close)
        FileMenu.addAction(ExitAction)
        
        # View menu
        self.ViewMenu = MenuBar.addMenu("&View")
        
        GridViewAction = QAction("&Grid View", self)
        GridViewAction.setShortcut(QKeySequence("Ctrl+1"))
        GridViewAction.setCheckable(True)
        GridViewAction.setChecked(True)
        GridViewAction.triggered.connect(lambda: self.SetViewMode("grid"))
        self.ViewMenu.addAction(GridViewAction)
        
        ListViewAction = QAction("&List View", self)
        ListViewAction.setShortcut(QKeySequence("Ctrl+2"))
        ListViewAction.setCheckable(True)
        ListViewAction.triggered.connect(lambda: self.SetViewMode("list"))
        self.ViewMenu.addAction(ListViewAction)
        
        DetailViewAction = QAction("&Detail View", self)
        DetailViewAction.setShortcut(QKeySequence("Ctrl+3"))
        DetailViewAction.setCheckable(True)
        DetailViewAction.triggered.connect(lambda: self.SetViewMode("detail"))
        self.ViewMenu.addAction(DetailViewAction)
        
        # Tools menu
        ToolsMenu = MenuBar.addMenu("&Tools")
        
        StatsAction = QAction("Library &Statistics", self)
        StatsAction.setStatusTip("Show library statistics")
        StatsAction.triggered.connect(self.OnShowStatistics)
        ToolsMenu.addAction(StatsAction)
        
        SettingsAction = QAction("&Settings...", self)
        SettingsAction.setStatusTip("Open application settings")
        SettingsAction.triggered.connect(self.OnShowSettings)
        ToolsMenu.addAction(SettingsAction)
        
        # Help menu
        HelpMenu = MenuBar.addMenu("&Help")
        
        AboutAction = QAction("&About Anderson's Library", self)
        AboutAction.setStatusTip("About this application")
        AboutAction.triggered.connect(self.OnShowAbout)
        HelpMenu.addAction(AboutAction)
    
    def CreateToolbar(self):
        """Create the main toolbar"""
        self.MainToolbar = self.addToolBar("Main")
        self.MainToolbar.setToolButtonStyle(Qt.ToolButtonStyle.ToolButtonTextBesideIcon)
        
        # Refresh action
        RefreshAction = QAction("🔄 Refresh", self)
        RefreshAction.setToolTip("Refresh library")
        RefreshAction.triggered.connect(self.OnRefreshLibrary)
        self.MainToolbar.addAction(RefreshAction)
        
        self.MainToolbar.addSeparator()
        
        # Statistics action
        StatsAction = QAction("📊 Statistics", self)
        StatsAction.setToolTip("Show library statistics")
        StatsAction.triggered.connect(self.OnShowStatistics)
        self.MainToolbar.addAction(StatsAction)
        
        self.MainToolbar.addSeparator()
        
        # Add spacer
        Spacer = QWidget()
        Spacer.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Preferred)
        self.MainToolbar.addWidget(Spacer)
        
        # Logo/branding
        LogoLabel = QLabel("📚 Anderson's Library")
        LogoFont = QFont()
        LogoFont.setPointSize(12)
        LogoFont.setBold(True)
        LogoLabel.setFont(LogoFont)
        LogoLabel.setStyleSheet("color: #2196F3; margin-right: 10px;")
        self.MainToolbar.addWidget(LogoLabel)
    
    def CreateMainInterface(self):
        """Create the main interface with filter panel and book grid"""
        # Central widget
        CentralWidget = QWidget()
        self.setCentralWidget(CentralWidget)
        
        # Main layout
        MainLayout = QHBoxLayout(CentralWidget)
        MainLayout.setContentsMargins(0, 0, 0, 0)
        MainLayout.setSpacing(0)
        
        # Create splitter for resizable panels
        self.MainSplitter = QSplitter(Qt.Orientation.Horizontal)
        
        # Filter panel
        self.FilterPanel = FilterPanel()
        self.MainSplitter.addWidget(self.FilterPanel)
        
        # Book grid
        self.BookGrid = BookGrid()
        self.MainSplitter.addWidget(self.BookGrid)
        
        # Set splitter proportions
        self.MainSplitter.setStretchFactor(0, 0)  # Filter panel fixed width
        self.MainSplitter.setStretchFactor(1, 1)  # Book grid expandable
        self.MainSplitter.setSizes([280, 1120])    # Initial sizes
        
        MainLayout.addWidget(self.MainSplitter)
    
    def CreateStatusBar(self):
        """Create the status bar"""
        self.StatusBar = self.statusBar()
        
        # Main status label
        self.StatusLabel = QLabel("Ready")
        self.StatusBar.addWidget(self.StatusLabel)
        
        # Progress bar for operations
        self.ProgressBar = QProgressBar()
        self.ProgressBar.setVisible(False)
        self.ProgressBar.setMaximumWidth(200)
        self.StatusBar.addPermanentWidget(self.ProgressBar)
        
        # Database status
        self.DatabaseStatusLabel = QLabel("Database: Connected")
        self.DatabaseStatusLabel.setStyleSheet("color: green;")
        self.StatusBar.addPermanentWidget(self.DatabaseStatusLabel)
    
    def SetupConnections(self):
        """Connect signals between components"""
        # Filter panel connections
        self.FilterPanel.SearchRequested.connect(self.OnSearchRequested)
        self.FilterPanel.FiltersChanged.connect(self.OnFiltersChanged)
        self.FilterPanel.ClearRequested.connect(self.OnClearFilters)
        
        # Book grid connections
        self.BookGrid.BookSelected.connect(self.OnBookSelected)
        self.BookGrid.BookOpened.connect(self.OnBookOpened)
        self.BookGrid.SelectionChanged.connect(self.OnSelectionChanged)
        self.BookGrid.ViewModeChanged.connect(self.OnViewModeChanged)
        self.BookGrid.SortChanged.connect(self.OnSortChanged)
    
    def LoadSettings(self):
        """Load application settings"""
        try:
            Settings = QSettings("BowersWorld", "AndersonLibrary")
            
            # Window geometry
            if Settings.contains("geometry"):
                self.restoreGeometry(Settings.value("geometry"))
            
            # Splitter state
            if Settings.contains("splitter"):
                self.MainSplitter.restoreState(Settings.value("splitter"))
            
            # View mode
            ViewMode = Settings.value("viewMode", "grid")
            self.SetViewMode(ViewMode)
            
            logging.info("Settings loaded")
            
        except Exception as Error:
            logging.warning(f"Error loading settings: {Error}")
    
    def SaveSettings(self):
        """Save application settings"""
        try:
            Settings = QSettings("BowersWorld", "AndersonLibrary")
            
            Settings.setValue("geometry", self.saveGeometry())
            Settings.setValue("splitter", self.MainSplitter.saveState())
            Settings.setValue("viewMode", self.BookGrid.ViewMode)
            
            logging.info("Settings saved")
            
        except Exception as Error:
            logging.warning(f"Error saving settings: {Error}")
    
    def StartDataLoading(self):
        """Start loading initial data"""
        self.SetLoadingState(True, "Initializing library...")
        
        # Load initial books
        self.LoadBooks()
        
        # Load filter data in background
        QTimer.singleShot(100, self.LoadFilterData)
    
    def LoadBooks(self, Criteria: Optional[SearchCriteria] = None):
        """Load books with optional search criteria"""
        if self.LoadingWorker and self.LoadingWorker.isRunning():
            return  # Already loading
        
        self.CurrentCriteria = Criteria or SearchCriteria()
        
        self.LoadingWorker = LoadingWorker(self.BookService, self.CurrentCriteria)
        self.LoadingWorker.BooksLoaded.connect(self.OnBooksLoaded)
        self.LoadingWorker.Error.connect(self.OnLoadingError)
        self.LoadingWorker.Progress.connect(self.OnLoadingProgress)
        self.LoadingWorker.finished.connect(self.OnLoadingFinished)
        
        self.SetLoadingState(True, "Loading books...")
        self.LoadingWorker.start()
    
    def LoadFilterData(self):
        """Load data for filter dropdowns"""
        try:
            # Load categories
            Categories = self.BookService.GetAllCategories()
            self.FilterPanel.UpdateCategories(Categories)
            
            # Load authors
            Authors = self.BookService.GetAuthors()
            if Authors:
                self.FilterPanel.UpdateAuthors(Authors)
            
            logging.info("Filter data loaded")
            
        except Exception as Error:
            logging.error(f"Error loading filter data: {Error}")
    
    def SetLoadingState(self, Loading: bool, Message: str = ""):
        """Set the loading state of the interface"""
        if Loading:
            self.ProgressBar.setVisible(True)
            self.ProgressBar.setValue(0)
            self.StatusLabel.setText(Message)
            self.setCursor(Qt.CursorShape.WaitCursor)
        else:
            self.ProgressBar.setVisible(False)
            self.setCursor(Qt.CursorShape.ArrowCursor)
            if not Message:
                Message = "Ready"
            self.StatusLabel.setText(Message)
    
    def SetViewMode(self, Mode: str):
        """Set the book grid view mode"""
        if not self.ViewMenu:
            return

        # Update menu checkmarks
        for Action in self.ViewMenu.actions():
            Action.setChecked(False)
            if Action.text().lower().startswith(f"&{Mode}"):
                Action.setChecked(True)
        
        # Update book grid
        self.BookGrid.ViewMode = Mode
        self.BookGrid.RefreshDisplay()
    
    # Event handlers
    def OnSearchRequested(self, Criteria: SearchCriteria):
        """Handle search request from filter panel"""
        logging.info(f"Search requested: {Criteria.GetSummary()}")
        self.LoadBooks(Criteria)
    
    def OnFiltersChanged(self, Criteria: SearchCriteria):
        """Handle filter changes (with debouncing)"""
        # Auto-search with a slight delay
        QTimer.singleShot(300, lambda: self.LoadBooks(Criteria))
    
    def OnClearFilters(self):
        """Handle clear filters request"""
        self.LoadBooks()
    
    def OnBooksLoaded(self, Result: SearchResult):
        """Handle books loaded from worker"""
        if not Result.Success:
            self.OnLoadingError(Result.ErrorMessage)
            return

        self.CurrentBooks = Result.Books
        self.BookGrid.UpdateBooks(Result)
        
        # Update filter panel stats
        self.FilterPanel.UpdateStats(len(self.CurrentBooks), len(Result.Books))
        
        Message = f"Loaded {len(Result.Books)} books"
        if Result.SearchTime > 0:
            Message += f" in {Result.SearchTime:.2f}s"
        
        self.SetLoadingState(False, Message)
        logging.info(f"Books loaded: {len(Result.Books)}")
    
    def OnLoadingError(self, ErrorMessage: str):
        """Handle loading error"""
        self.SetLoadingState(False, f"Error: {ErrorMessage}")
        QMessageBox.warning(self, "Loading Error", f"Failed to load books:\n{ErrorMessage}")
        logging.error(f"Loading error: {ErrorMessage}")
    
    def OnLoadingProgress(self, Value: int, Message: str):
        """Handle loading progress update"""
        self.ProgressBar.setValue(Value)
        self.StatusLabel.setText(Message)
    
    def OnLoadingFinished(self):
        """Handle loading worker finished"""
        if self.LoadingWorker:
            self.LoadingWorker.deleteLater()
            self.LoadingWorker = None
    
    def OnBookSelected(self, Book: BookRecord):
        """Handle book selection"""
        self.StatusLabel.setText(f"Selected: {Book.Title}")
    
    def OnBookOpened(self, Book: BookRecord):
        """Handle book opening"""
        self.OpenBook(Book)
    
    def OnSelectionChanged(self, SelectedBooks: List[BookRecord]):
        """Handle selection change"""
        Count = len(SelectedBooks)
        if Count == 0:
            self.StatusLabel.setText("Ready")
        elif Count == 1:
            self.StatusLabel.setText(f"Selected: {SelectedBooks[0].Title}")
        else:
            self.StatusLabel.setText(f"Selected {Count} books")
    
    def OnViewModeChanged(self, Mode: str):
        """Handle view mode change"""
        logging.info(f"View mode changed to: {Mode}")
    
    def OnSortChanged(self, Field: str, Order: str):
        """Handle sort change"""
        logging.info(f"Sort changed: {Field} {Order}")
    
    # Menu actions
    def OnOpenBook(self):
        """Handle open book menu action"""
        FilePath, _ = QFileDialog.getOpenFileName(
            self, "Open Book File", "", 
            "Book Files (*.pdf *.epub *.mobi *.txt);;All Files (*.*)"
        )
        
        if FilePath:
            # This would add the book to the library
            logging.info(f"Open book file: {FilePath}")
    
    def OnRefreshLibrary(self):
        """Handle refresh library action"""
        self.LoadBooks()
        self.LoadFilterData()
    
    def OnShowStatistics(self):
        """Show library statistics dialog"""
        if self.LoadingWorker and self.LoadingWorker.isRunning():
            QMessageBox.information(self, "Busy", "Please wait for the current operation to complete.")
            return

        if not self.LibraryStats:
            # Load statistics in background
            self.LoadingWorker = LoadingWorker(self.BookService)
            self.LoadingWorker.SetOperation("load_statistics")
            self.LoadingWorker.StatisticsLoaded.connect(self.DisplayStatistics)
            self.LoadingWorker.Error.connect(self.OnLoadingError)
            self.LoadingWorker.Progress.connect(self.OnLoadingProgress)
            self.LoadingWorker.finished.connect(self.OnLoadingFinished)
            self.SetLoadingState(True, "Loading statistics...")
            self.LoadingWorker.start()
        else:
            self.DisplayStatistics(self.LibraryStats)
    
    def DisplayStatistics(self, Stats: LibraryStatistics):
        """Display statistics dialog"""
        self.LibraryStats = Stats
        
        Dialog = QDialog(self)
        Dialog.setWindowTitle("Library Statistics")
        Dialog.setModal(True)
        Dialog.resize(400, 300)
        
        Layout = QVBoxLayout(Dialog)
        
        StatsText = QTextEdit()
        StatsText.setReadOnly(True)
        StatsText.setPlainText(f"""
📚 Anderson's Library Statistics

Total Books: {Stats.TotalBooks}
Total Size: {Stats.GetFormattedTotalSize()}
Total Authors: {Stats.TotalAuthors}
Total Categories: {Stats.TotalCategories}

Average Rating: {Stats.AverageRating:.1f}/5
Rated Books: {Stats.RatedBooks}

Books Added This Month: {Stats.BooksAddedThisMonth}
Books Added This Year: {Stats.BooksAddedThisYear}

Missing Files: {Stats.MissingFiles}
Books with Thumbnails: {Stats.BooksWithThumbnails}

File Type Breakdown:
{chr(10).join([f"  {fmt}: {count}" for fmt, count in Stats.FileTypeCounts.items()])}
        """)
        Layout.addWidget(StatsText)
        
        CloseBtn = QPushButton("Close")
        CloseBtn.clicked.connect(Dialog.accept)
        Layout.addWidget(CloseBtn)
        
        Dialog.exec()
    
    def OnShowSettings(self):
        """Show settings dialog"""
        QMessageBox.information(self, "Settings", "Settings dialog not yet implemented")
    
    def OnShowAbout(self):
        """Show about dialog"""
        QMessageBox.about(self, "About Anderson's Library", 
                         """
<h3>🏔️ Anderson's Library - Professional Edition</h3>
<p><b>Digital Library Management System</b></p>
<p>🎯 Project Himalaya - BowersWorld.com</p>
<p>⚡ Modular Architecture - Design Standard v1.8</p>
<br>
<p>A professional-grade library management application built with modern Python architecture.</p>
<p>© 2025 Herb Bowers - BowersWorld.com</p>
                         """)
    
    def OpenBook(self, Book: BookRecord):
        """Open a book file with the system default application"""
        try:
            if not Book.FileExists():
                QMessageBox.warning(self, "File Not Found", 
                                  f"The book file was not found:\n{Book.FilePath}")
                return
            
            FilePath = Book.GetFullPath()
            
            # Open with system default application
            if platform.system() == "Windows":
                os.startfile(FilePath)
            elif platform.system() == "Darwin":  # macOS
                subprocess.call(["open", FilePath])
            else:  # Linux
                subprocess.call(["xdg-open", FilePath])
            
            # Update last accessed time
            self.BookService.UpdateLastAccessed(Book.Id)
            
            logging.info(f"Opened book: {Book.Title}")
            
        except Exception as Error:
            logging.error(f"Error opening book: {Error}")
            QMessageBox.critical(self, "Error Opening Book", 
                               f"Failed to open book:\n{Error}")
    
    # Window event handlers
    def closeEvent(self, event):
        """Handle window close event"""
        self.SaveSettings()
        
        # Clean up workers
        if self.LoadingWorker and self.LoadingWorker.isRunning():
            self.LoadingWorker.quit()
            if not self.LoadingWorker.wait(3000):  # Wait up to 3 seconds
                logging.warning("Worker thread did not terminate gracefully.")
                self.LoadingWorker.terminate() # Force terminate if necessary
                self.LoadingWorker.wait() # Wait again after termination
        
        super().closeEvent(event)


def RunApplication() -> int:
    """
    Main entry point for the Anderson's Library application.
    Creates and runs the QApplication with proper error handling.
    """
    try:
        # Configure logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('anderson_library.log'),
                logging.StreamHandler()
            ]
        )
        
        # Create application
        App = QApplication(sys.argv)
        App.setApplicationName("Anderson's Library")
        App.setApplicationVersion("1.0.0")
        App.setOrganizationName("BowersWorld")
        App.setOrganizationDomain("bowersworld.com")
        
        # Print startup message
        print("🏔️ Anderson's Library - Professional Edition")
        print("=" * 50)
        print("📚 Digital Library Management System")
        print("🎯 Project Himalaya - BowersWorld.com")
        print("⚡ Modular Architecture - Design Standard v1.8")
        print("=" * 50)
        
        # Create and show main window
        MainWindow = AndersonMainWindow()
        MainWindow.show()
        
        # Run application
        return App.exec()
        
    except Exception as Error:
        logging.critical(f"Application startup failed: {Error}")
        logging.critical(traceback.format_exc())
        
        if 'App' in locals():
            QMessageBox.critical(None, "Startup Error", 
                               f"Anderson's Library failed to start:\n{Error}")
        else:
            print(f"CRITICAL ERROR: {Error}")
            traceback.print_exc()
        
        return 1


if __name__ == "__main__":
    sys.exit(RunApplication())
================
File: Source/Interface/__init__.py
================
# File: __init__.py
# Path: Source/Interface/__init__.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  14:09PM
"""
Description: User Interface Package
User interface components and widgets.

Purpose: Package initialization for Source/Interface module. Provides clean
import interfaces and package-level configuration.
"""

# Package version and metadata
__version__ = "2.0.0"
__author__ = "Herb Bowers - Project Himalaya"
__email__ = "HimalayaProject1@gmail.com"

# Package-level imports can be added here as needed
# Example:
# from .module_name import ClassName

__all__ = [
    # Add public interface exports here
]

================
File: Source/Utils/__init__.py
================
# File: __init__.py
# Path: Source/Utils/__init__.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  14:09PM
"""
Description: Utilities Package
Utility functions and helper classes.

Purpose: Package initialization for Source/Utils module. Provides clean
import interfaces and package-level configuration.
"""

# Package version and metadata
__version__ = "2.0.0"
__author__ = "Herb Bowers - Project Himalaya"
__email__ = "HimalayaProject1@gmail.com"

# Package-level imports can be added here as needed
# Example:
# from .module_name import ClassName

__all__ = [
    # Add public interface exports here
]

================
File: Source/__init__.py
================
# File: __init__.py
# Path: Source/__init__.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  14:09PM
"""
Description: Anderson's Library Source Package
Main source code package for Anderson's Library application.

Purpose: Package initialization for Source module. Provides clean
import interfaces and package-level configuration.
"""

# Package version and metadata
__version__ = "2.0.0"
__author__ = "Herb Bowers - Project Himalaya"
__email__ = "HimalayaProject1@gmail.com"

# Package-level imports can be added here as needed
# Example:
# from .module_name import ClassName

__all__ = [
    # Add public interface exports here
]

================
File: SyntaxFix.py
================
#!/usr/bin/env python3
# File: SyntaxFix.py
# Path: SyntaxFix.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  05:30PM
"""
Description: Syntax Fix for Anderson's Library DatabaseModels
Quick fix for unclosed parenthesis syntax error in DatabaseModels.py
"""

import os
import sys

def FixSyntaxError():
    """Fix the unclosed parenthesis in DatabaseModels.py"""
    
    print("🔧 Anderson's Library - Syntax Fix")
    print("=" * 50)
    print("🐛 Fixing unclosed parenthesis in DatabaseModels.py")
    
    DatabaseModelsPath = "Source/Data/DatabaseModels.py"
    
    # Check if file exists
    if not os.path.exists(DatabaseModelsPath):
        print(f"❌ File not found: {DatabaseModelsPath}")
        return False
    
    # Read current content
    try:
        with open(DatabaseModelsPath, 'r', encoding='utf-8') as File:
            Lines = File.readlines()
    except Exception as Error:
        print(f"❌ Error reading file: {Error}")
        return False
    
    print(f"📄 File has {len(Lines)} lines")
    
    # Find and fix common syntax issues
    Fixed = False
    
    # Check around line 515 (give or take a few lines)
    for i in range(max(0, 510), min(len(Lines), 520)):
        Line = Lines[i]
        LineNum = i + 1
        
        # Look for common syntax issues
        if Line.strip().endswith(',') and 'def ' in Line:
            # Function definition ending with comma instead of colon
            Lines[i] = Line.replace(',', ':')
            print(f"✅ Fixed line {LineNum}: Changed trailing comma to colon")
            Fixed = True
            
        elif '(' in Line and ')' not in Line and not Line.strip().endswith('\\'):
            # Unclosed parenthesis - look for the next line to close it
            if i + 1 < len(Lines):
                NextLine = Lines[i + 1].strip()
                if NextLine and not NextLine.startswith(')'):
                    # Add closing parenthesis to current line
                    Lines[i] = Line.rstrip() + ')\n'
                    print(f"✅ Fixed line {LineNum}: Added missing closing parenthesis")
                    Fixed = True
        
        elif Line.strip() == 'try:' and i + 1 < len(Lines):
            # Check if there's proper indentation after try
            NextLine = Lines[i + 1]
            if not NextLine.startswith('        '):  # Should be indented
                Lines[i + 1] = '        ' + NextLine.lstrip()
                print(f"✅ Fixed line {LineNum + 1}: Fixed indentation after try:")
                Fixed = True
    
    # Look for specific common issues in the entire file
    for i, Line in enumerate(Lines):
        LineNum = i + 1
        
        # Fix return statement with missing closing parenthesis
        if 'return str(Data.get(' in Line and Line.count('(') > Line.count(')'):
            # Find where the return statement should end
            if not Line.rstrip().endswith(')'):
                Lines[i] = Line.rstrip() + ')\n'
                print(f"✅ Fixed line {LineNum}: Added missing closing parenthesis to return statement")
                Fixed = True
        
        # Fix function calls with unclosed parentheses
        if 'logging.error(f' in Line and Line.count('(') > Line.count(')'):
            if not Line.rstrip().endswith(')'):
                Lines[i] = Line.rstrip() + ')\n'
                print(f"✅ Fixed line {LineNum}: Added missing closing parenthesis to logging call")
                Fixed = True
    
    # Check for the specific error pattern around line 515
    if len(Lines) > 515:
        Line515 = Lines[514]  # Line 515 (0-indexed)
        print(f"🔍 Line 515 content: {repr(Line515)}")
        
        # Common fixes for line 515
        if 'try:' in Line515 and not Line515.strip().endswith(':'):
            Lines[514] = Line515.rstrip() + ':\n'
            print("✅ Fixed line 515: Added missing colon after try")
            Fixed = True
        
        elif 'except' in Line515 and not Line515.strip().endswith(':'):
            Lines[514] = Line515.rstrip() + ':\n'
            print("✅ Fixed line 515: Added missing colon after except")
            Fixed = True
        
        elif Line515.count('(') > Line515.count(')'):
            # Add missing closing parenthesis
            Lines[514] = Line515.rstrip() + ')\n'
            print("✅ Fixed line 515: Added missing closing parenthesis")
            Fixed = True
    
    if not Fixed:
        # Try a more aggressive fix - look for the CreateAuthorFromRow function
        for i, Line in enumerate(Lines):
            if 'def CreateAuthorFromRow' in Line:
                LineNum = i + 1
                print(f"🔍 Found CreateAuthorFromRow at line {LineNum}")
                
                # Check the return statement in this function
                for j in range(i, min(i + 10, len(Lines))):
                    if 'return str(' in Lines[j] and Lines[j].count('(') > Lines[j].count(')'):
                        Lines[j] = Lines[j].rstrip() + ')\n'
                        print(f"✅ Fixed line {j + 1}: Added missing closing parenthesis to return statement")
                        Fixed = True
                        break
                break
    
    if Fixed:
        # Write back to file
        try:
            with open(DatabaseModelsPath, 'w', encoding='utf-8') as File:
                File.writelines(Lines)
            
            print("✅ Syntax fixes applied successfully!")
            return True
            
        except Exception as Error:
            print(f"❌ Error writing fixed file: {Error}")
            return False
    else:
        print("🔍 No obvious syntax issues found. Let me show you line 515:")
        if len(Lines) > 515:
            for i in range(max(0, 512), min(len(Lines), 518)):
                LineNum = i + 1
                print(f"   {LineNum:3}: {Lines[i].rstrip()}")
        
        # Manual fix suggestion
        print("\n💡 Manual fix suggestion:")
        print("   Check line 515 in Source/Data/DatabaseModels.py")
        print("   Look for missing closing parenthesis ')' or colon ':'")
        print("   Common issues: function calls, return statements, try/except blocks")
        
        return False


def ValidateSyntax():
    """Validate Python syntax by attempting to compile"""
    print("\n🔍 Validating Python syntax...")
    
    DatabaseModelsPath = "Source/Data/DatabaseModels.py"
    
    try:
        with open(DatabaseModelsPath, 'r', encoding='utf-8') as File:
            Content = File.read()
        
        # Try to compile the code
        compile(Content, DatabaseModelsPath, 'exec')
        print("✅ Python syntax is valid!")
        return True
        
    except SyntaxError as Error:
        print(f"❌ Syntax error still present:")
        print(f"   Line {Error.lineno}: {Error.text}")
        print(f"   Error: {Error.msg}")
        return False
    except Exception as Error:
        print(f"❌ Other error: {Error}")
        return False


def Main():
    """Main syntax fix"""
    print("🏔️ Anderson's Library - Syntax Fix")
    print("=" * 50)
    print("🐛 Fixing unclosed parenthesis syntax error")
    print("=" * 50)
    
    # Apply fixes
    if FixSyntaxError():
        # Validate syntax
        if ValidateSyntax():
            print("\n" + "=" * 50)
            print("🎉 SYNTAX FIXED SUCCESSFULLY!")
            print("=" * 50)
            print("🚀 Now try running: python AndersonLibrary.py")
            return 0
        else:
            print("\n⚠️  Some syntax issues may remain")
            print("💡 Check the error message above and fix manually")
            return 1
    else:
        print("\n🔍 Automatic fix not applied")
        print("💡 Manual inspection required")
        return 1


if __name__ == "__main__":
    sys.exit(Main())
================
File: TestImports.py
================
#!/usr/bin/env python3
# File: TestImports.py
# Path: TestImports.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  16:30PM
"""
Description: Anderson's Library Module Import Test
Tests that all modular components can be imported correctly after migration.
Validates the new professional architecture is properly configured.

Purpose: Provides quick validation that the modular refactor was successful
and all components are accessible for the Anderson's Library application.
"""

import sys
import os
from pathlib import Path

def TestImports():
    """Test that all modules can be imported successfully"""
    print("🧪 Testing Anderson's Library Module Imports")
    print("=" * 50)
    
    # Add current directory to Python path (where Clive put the modules)
    CurrentPath = Path(__file__).parent
    sys.path.insert(0, str(CurrentPath))
    print(f"✅ Added to path: {CurrentPath}")
    
    # Check if we have the modular structure that Clive created
    if not (CurrentPath / "Data").exists():
        print("❌ Modular directories not found")
        print("📁 Make sure UpdatePopulate.py has been run")
        return False
    
    print("\n🔍 Testing module imports...")
    
    # Define modules to test with their expected classes
    TestModules = [
        ("Data.DatabaseModels", ["Book", "Category", "Subject"], "Data models"),
        ("Core.DatabaseManager", ["DatabaseManager"], "Database operations"),
        ("Core.BookService", ["BookService"], "Business logic"),
        ("Interface.FilterPanel", ["FilterPanel"], "Filter sidebar"),
        ("Interface.BookGrid", ["BookGrid"], "Book display grid"),
        ("Interface.MainWindow", ["MainWindow"], "Main application window")
    ]
    
    SuccessCount = 0
    FailedCount = 0
    
    for ModuleName, Classes, Description in TestModules:
        try:
            # Test module import
            Module = __import__(ModuleName, fromlist=Classes)
            
            # Test class imports
            MissingClasses = []
            for ClassName in Classes:
                if not hasattr(Module, ClassName):
                    MissingClasses.append(ClassName)
            
            if MissingClasses:
                print(f"   ⚠️  {ModuleName}: Missing classes {MissingClasses}")
                FailedCount += 1
            else:
                print(f"   ✅ {ModuleName} - {Description}")
                SuccessCount += 1
                
        except ImportError as Error:
            print(f"   ❌ {ModuleName}: {Error}")
            FailedCount += 1
        except Exception as Error:
            print(f"   ❌ {ModuleName}: Unexpected error - {Error}")
            FailedCount += 1
    
    # Test CustomWindow import (user's existing file)
    try:
        from Interface.CustomWindow import CustomWindow
        print(f"   ✅ Interface.CustomWindow - Custom window framework")
        SuccessCount += 1
    except ImportError as Error:
        print(f"   ⚠️  Interface.CustomWindow: {Error}")
        print(f"      💡 Copy your CustomWindow.py to Source/Interface/")
        FailedCount += 1
    
    # Generate summary
    print("\n" + "=" * 50)
    print("📊 IMPORT TEST RESULTS")
    print("=" * 50)
    print(f"✅ Successful imports: {SuccessCount}")
    print(f"❌ Failed imports: {FailedCount}")
    
    if FailedCount == 0:
        print("\n🎉 ALL IMPORTS SUCCESSFUL!")
        print("🚀 Ready to run: python RunAnderson.py")
        print("📚 Your modular Anderson's Library is ready!")
        return True
    else:
        print(f"\n⚠️  {FailedCount} imports failed")
        print("\n🔧 TROUBLESHOOTING:")
        
        if FailedCount == len(TestModules) + 1:
            print("   📁 Check that Source/ directory structure exists")
            print("   📄 Verify all modules are in correct locations")
            print("   🏗️ Run setup scripts if needed")
        else:
            print("   📄 Check file locations match the expected structure:")
            print("      • Source/Data/DatabaseModels.py")
            print("      • Source/Core/DatabaseManager.py")
            print("      • Source/Core/BookService.py") 
            print("      • Source/Interface/FilterPanel.py")
            print("      • Source/Interface/BookGrid.py")
            print("      • Source/Interface/MainWindow.py")
            print("      • Source/Interface/CustomWindow.py")
        
        return False

def CheckFileStructure():
    """Check if all expected files are present"""
    print("\n📁 Checking file structure...")
    
    ExpectedFiles = [
        "Source/Data/DatabaseModels.py",
        "Source/Core/DatabaseManager.py", 
        "Source/Core/BookService.py",
        "Source/Interface/FilterPanel.py",
        "Source/Interface/BookGrid.py",
        "Source/Interface/MainWindow.py",
        "Source/Interface/CustomWindow.py"
    ]
    
    MissingFiles = []
    PresentFiles = []
    
    for FilePath in ExpectedFiles:
        if os.path.exists(FilePath):
            PresentFiles.append(FilePath)
            print(f"   ✅ {FilePath}")
        else:
            MissingFiles.append(FilePath)
            print(f"   ❌ {FilePath}")
    
    print(f"\n📊 Files: {len(PresentFiles)} present, {len(MissingFiles)} missing")
    
    if MissingFiles:
        print("\n📋 Missing files:")
        for File in MissingFiles:
            print(f"   📄 {File}")
        
        if "Source/Interface/CustomWindow.py" in MissingFiles:
            print("\n💡 Don't forget to copy your existing CustomWindow.py!")
    
    return len(MissingFiles) == 0

def TestDatabaseConnection():
    """Test database connection if possible"""
    print("\n🗄️  Testing database connection...")
    
    DatabasePaths = [
        "Assets/my_library.db",
        "Data/Databases/my_library.db", 
        "my_library.db"
    ]
    
    DatabaseFound = False
    for DbPath in DatabasePaths:
        if os.path.exists(DbPath):
            print(f"   ✅ Found database: {DbPath}")
            DatabaseFound = True
            break
    
    if not DatabaseFound:
        print("   ⚠️  No database found at expected locations:")
        for DbPath in DatabasePaths:
            print(f"      📄 {DbPath}")
        print("   💡 Make sure your SQLite database is accessible")
    
    return DatabaseFound

def Main():
    """Main test execution"""
    try:
        print("🏔️ Anderson's Library - Professional Edition")
        print("Import Validation Test")
        print()
        
        # Check file structure first
        FilesOk = CheckFileStructure()
        
        # Test imports
        ImportsOk = TestImports()
        
        # Test database
        DatabaseOk = TestDatabaseConnection()
        
        # Final status
        print("\n" + "=" * 50)
        if FilesOk and ImportsOk:
            print("🎉 MIGRATION VALIDATION SUCCESSFUL!")
            print("✅ All modules imported correctly")
            print("✅ File structure is correct")
            if DatabaseOk:
                print("✅ Database found")
            print("\n🚀 Ready to run your professional Anderson's Library!")
            print("   python RunAnderson.py")
        else:
            print("❌ VALIDATION ISSUES FOUND")
            print("📝 Please resolve the issues above before running the application")
        
        print("=" * 50)
        
        return FilesOk and ImportsOk
        
    except Exception as Error:
        print(f"❌ Test failed with error: {Error}")
        return False

if __name__ == "__main__":
    Success = Main()
    sys.exit(0 if Success else 1)

================
File: Tests/Integration/__init__.py
================
# File: __init__.py
# Path: Tests/Integration/__init__.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  14:09PM
"""
Description: Integration Tests Package
Integration tests for component interactions.

Purpose: Package initialization for Tests/Integration module. Provides clean
import interfaces and package-level configuration.
"""

# Package version and metadata
__version__ = "2.0.0"
__author__ = "Herb Bowers - Project Himalaya"
__email__ = "HimalayaProject1@gmail.com"

# Package-level imports can be added here as needed
# Example:
# from .module_name import ClassName

__all__ = [
    # Add public interface exports here
]

================
File: Tests/Unit/__init__.py
================
# File: __init__.py
# Path: Tests/Unit/__init__.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  14:09PM
"""
Description: Unit Tests Package
Unit tests for individual components.

Purpose: Package initialization for Tests/Unit module. Provides clean
import interfaces and package-level configuration.
"""

# Package version and metadata
__version__ = "2.0.0"
__author__ = "Herb Bowers - Project Himalaya"
__email__ = "HimalayaProject1@gmail.com"

# Package-level imports can be added here as needed
# Example:
# from .module_name import ClassName

__all__ = [
    # Add public interface exports here
]

================
File: Tests/__init__.py
================
# File: __init__.py
# Path: Tests/__init__.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  14:09PM
"""
Description: Test Suite Package
Complete test suite for Anderson's Library.

Purpose: Package initialization for Tests module. Provides clean
import interfaces and package-level configuration.
"""

# Package version and metadata
__version__ = "2.0.0"
__author__ = "Herb Bowers - Project Himalaya"
__email__ = "HimalayaProject1@gmail.com"

# Package-level imports can be added here as needed
# Example:
# from .module_name import ClassName

__all__ = [
    # Add public interface exports here
]

================
File: Updates/CommunitySQLs/upgrade_ui_flow.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anderson's Library - Upgrade Flow Demo</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            line-height: 1.6;
        }
        
        .demo-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .scenario {
            background: white;
            border-radius: 15px;
            padding: 25px;
            margin: 20px 0;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            border-left: 5px solid #4285f4;
        }
        
        .scenario h2 {
            color: #2c3e50;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .limit-hit-modal {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            color: white;
            border-radius: 12px;
            padding: 25px;
            margin: 15px 0;
            position: relative;
            overflow: hidden;
        }
        
        .limit-hit-modal::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
            transform: rotate(45deg);
            animation: shine 3s infinite;
        }
        
        @keyframes shine {
            0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
            100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }
        
        .upgrade-card {
            background: linear-gradient(135deg, #4285f4, #34a853);
            color: white;
            border-radius: 12px;
            padding: 20px;
            margin: 15px 0;
            position: relative;
        }
        
        .tier-comparison {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .tier-card {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            position: relative;
            transition: transform 0.3s ease;
        }
        
        .tier-card:hover {
            transform: translateY(-5px);
        }
        
        .tier-card.current {
            background: linear-gradient(135deg, #ffeaa7, #fdcb6e);
            transform: scale(1.05);
        }
        
        .tier-card.recommended {
            background: linear-gradient(135deg, #00b894, #00cec9);
            color: white;
            transform: scale(1.08);
        }
        
        .tier-card.premium {
            background: linear-gradient(135deg, #6c5ce7, #a29bfe);
            color: white;
        }
        
        .tier-icon {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .tier-title {
            font-size: 1.4em;
            font-weight: bold;
            margin-bottom: 10px;
        }
        
        .benefit-list {
            list-style: none;
            margin: 15px 0;
        }
        
        .benefit-list li {
            padding: 5px 0;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .benefit-list li::before {
            content: '✅';
            font-size: 0.9em;
        }
        
        .upgrade-btn {
            background: linear-gradient(135deg, #00b894, #00cec9);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0,184,148,0.3);
        }
        
        .upgrade-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,184,148,0.4);
        }
        
        .notification-demo {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-radius: 12px;
            padding: 20px;
            margin: 15px 0;
        }
        
        .priority-badge {
            background: #e17055;
            color: white;
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 0.85em;
            font-weight: bold;
            display: inline-block;
            margin-left: 10px;
        }
        
        .progress-bar {
            background: #ecf0f1;
            border-radius: 10px;
            height: 8px;
            margin: 10px 0;
            overflow: hidden;
        }
        
        .progress-fill {
            background: linear-gradient(90deg, #00b894, #00cec9);
            height: 100%;
            border-radius: 10px;
            transition: width 0.3s ease;
        }
        
        .smart-alert {
            background: #74b9ff;
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .feature-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        
        .feature-card {
            background: #f1f2f6;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }
        
        .feature-card.locked {
            opacity: 0.6;
            filter: grayscale(50%);
        }
        
        .unlock-hint {
            background: #ffeaa7;
            padding: 10px;
            border-radius: 6px;
            margin-top: 10px;
            font-size: 0.9em;
            color: #2d3436;
        }
    </style>
</head>
<body>
    <div class="demo-container">
        <h1 style="text-align: center; color: white; margin-bottom: 30px; font-size: 2.5em;">
            📚 Anderson's Library - Smart Upgrade System
        </h1>
        
        <!-- Scenario 1: Download Limit Hit -->
        <div class="scenario">
            <h2>🚫 Scenario 1: Daily Download Limit Reached</h2>
            
            <div class="limit-hit-modal">
                <h3 style="font-size: 1.8em; margin-bottom: 15px;">⏰ Daily Download Limit Reached!</h3>
                <p style="font-size: 1.1em; margin-bottom: 15px;">
                    You've downloaded <strong>3 books</strong> today (your daily limit as a Basic user).
                </p>
                
                <div class="progress-bar">
                    <div class="progress-fill" style="width: 100%;"></div>
                </div>
                
                <div style="display: flex; gap: 15px; margin-top: 20px; flex-wrap: wrap;">
                    <button class="upgrade-btn" onclick="showUpgradeOptions()">
                        🚀 Upgrade for More Downloads
                    </button>
                    <div style="color: rgba(255,255,255,0.9);">
                        <strong>Or wait:</strong> Limit resets in 8 hours 23 minutes
                    </div>
                </div>
            </div>
            
            <div class="smart-alert">
                <div style="font-size: 2em;">💡</div>
                <div>
                    <strong>Smart Suggestion:</strong> Enable our newsletter and new book alerts to get 
                    <strong>5 downloads per day</strong> + personalized recommendations!
                </div>
            </div>
        </div>
        
        <!-- Scenario 2: Enhanced Incentives Display -->
        <div class="scenario">
            <h2>⭐ Enhanced Tier Benefits Comparison</h2>
            
            <div class="tier-comparison">
                <div class="tier-card current">
                    <div class="tier-icon">📚</div>
                    <div class="tier-title">Basic Access</div>
                    <div style="color: #e17055; font-weight: bold;">Your Current Tier</div>
                    <ul class="benefit-list">
                        <li>3 downloads per day</li>
                        <li>20 searches per day</li>
                        <li>Basic book previews</li>
                        <li>Community support</li>
                        <li>Standard database updates</li>
                    </ul>
                </div>
                
                <div class="tier-card recommended">
                    <div class="tier-icon">🔗</div>
                    <div class="tier-title">Connected Reader</div>
                    <div class="priority-badge">RECOMMENDED</div>
                    <ul class="benefit-list">
                        <li>5 downloads per day</li>
                        <li>30 searches per day</li>
                        <li>📧 Personalized book alerts</li>
                        <li>🎯 Interest-based notifications</li>
                        <li>⚡ Priority database updates</li>
                        <li>2x download speed</li>
                    </ul>
                    <div class="unlock-hint">
                        <strong>Unlock with:</strong> Newsletter + New book alerts
                    </div>
                </div>
                
                <div class="tier-card premium">
                    <div class="tier-icon">💎</div>
                    <div class="tier-title">VIP Experience</div>
                    <ul class="benefit-list">
                        <li>Unlimited downloads</li>
                        <li>Unlimited searches</li>
                        <li>🔔 Instant new book notifications</li>
                        <li>🏆 First access to rare books</li>
                        <li>⚡ Real-time database sync</li>
                        <li>🚀 Maximum download speeds</li>
                        <li>👑 Priority support</li>
                    </ul>
                    <div class="unlock-hint">
                        <strong>Unlock with:</strong> All marketing preferences
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Scenario 3: Smart Notifications Demo -->
        <div class="scenario">
            <h2>🔔 Smart Notification System</h2>
            
            <div class="notification-demo">
                <h3 style="margin-bottom: 15px;">📱 Personalized Alerts (Connected+ Users)</h3>
                
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; margin: 10px 0;">
                    <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                        <span style="font-size: 1.5em;">🐍</span>
                        <strong>New Python Book Alert!</strong>
                        <span class="priority-badge">PRIORITY</span>
                    </div>
                    <p>"Advanced Python Web Scraping" just added - matches your programming interests!</p>
                    <div style="margin-top: 10px; font-size: 0.9em; opacity: 0.8;">
                        Available for immediate download • Added 2 minutes ago
                    </div>
                </div>
                
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; margin: 10px 0;">
                    <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                        <span style="font-size: 1.5em;">🤖</span>
                        <strong>AI Recommendation</strong>
                    </div>
                    <p>Based on your recent downloads, you might love "Machine Learning Engineering"</p>
                    <div style="margin-top: 10px; font-size: 0.9em; opacity: 0.8;">
                        94% match confidence • Similar to 3 books you've downloaded
                    </div>
                </div>
            </div>
            
            <div class="feature-grid">
                <div class="feature-card">
                    <div style="font-size: 2em; margin-bottom: 10px;">⚡</div>
                    <h4>Instant Alerts</h4>
                    <p>Get notified within minutes of new books in your interests</p>
                </div>
                
                <div class="feature-card">
                    <div style="font-size: 2em; margin-bottom: 10px;">🎯</div>
                    <h4>Smart Targeting</h4>
                    <p>AI learns your preferences for perfect book matching</p>
                </div>
                
                <div class="feature-card locked">
                    <div style="font-size: 2em; margin-bottom: 10px;">👑</div>
                    <h4>VIP Early Access</h4>
                    <p>First dibs on rare and premium books</p>
                    <div class="unlock-hint">Upgrade to VIP</div>
                </div>
                
                <div class="feature-card locked">
                    <div style="font-size: 2em; margin-bottom: 10px;">📊</div>
                    <h4>Reading Analytics</h4>
                    <p>Personal insights into your reading patterns</p>
                    <div class="unlock-hint">Enable analytics permissions</div>
                </div>
            </div>
        </div>
        
        <!-- Scenario 4: Priority Database Updates -->
        <div class="scenario">
            <h2>⚡ Priority Database Update System</h2>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">
                <div style="background: #fd79a8; color: white; padding: 20px; border-radius: 12px;">
                    <h4 style="margin-bottom: 15px;">📡 Basic Updates</h4>
                    <ul style="list-style: none;">
                        <li style="padding: 5px 0;">📅 Weekly database sync</li>
                        <li style="padding: 5px 0;">🔄 Updates during off-peak hours</li>
                        <li style="padding: 5px 0;">📚 New books available next business day</li>
                        <li style="padding: 5px 0;">⏰ 24-48 hour delay for new content</li>
                    </ul>
                </div>
                
                <div style="background: #00b894; color: white; padding: 20px; border-radius: 12px;">
                    <h4 style="margin-bottom: 15px;">⚡ Priority Updates (Connected+)</h4>
                    <ul style="list-style: none;">
                        <li style="padding: 5px 0;">🚀 Real-time database sync</li>
                        <li style="padding: 5px 0;">⚡ Instant new book availability</li>
                        <li style="padding: 5px 0;">🎯 Personalized update notifications</li>
                        <li style="padding: 5px 0;">👑 VIP users get 2-hour early access</li>
                    </ul>
                </div>
            </div>
            
            <div class="upgrade-card">
                <h3 style="margin-bottom: 15px;">🔥 Live Update Example</h3>
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;">
                    <div style="display: flex; justify-content: between; align-items: center;">
                        <div>
                            <strong>Database Update in Progress...</strong>
                            <div style="font-size: 0.9em; opacity: 0.9; margin-top: 5px;">
                                Adding 12 new books • Priority users get immediate access
                            </div>
                        </div>
                        <div style="font-size: 1.5em;">⚡</div>
                    </div>
                    <div class="progress-bar" style="margin-top: 10px;">
                        <div class="progress-fill" style="width: 75%; animation: pulse 2s infinite;"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Scenario 5: Upgrade Flow -->
        <div class="scenario">
            <h2>🚀 Smart Upgrade Flow</h2>
            
            <div id="upgradeFlow" style="display: none;">
                <div style="background: linear-gradient(135deg, #00b894, #00cec9); color: white; padding: 25px; border-radius: 12px;">
                    <h3 style="margin-bottom: 20px;">🎯 Choose Your Upgrade Path</h3>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                        <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 8px;">
                            <h4>📧 Quick Boost (Connected)</h4>
                            <p style="margin: 10px 0;">Just enable newsletter + book alerts</p>
                            <ul style="list-style: none; font-size: 0.9em;">
                                <li>✅ 5 downloads per day</li>
                                <li>✅ 30 searches per day</li>
                                <li>✅ Smart book notifications</li>
                                <li>✅ Priority updates</li>
                            </ul>
                            <button class="upgrade-btn" style="margin-top: 15px;" onclick="upgradeToConnected()">
                                Enable Now (2 clicks!)
                            </button>
                        </div>
                        
                        <div style="background: rgba(255,255,255,0.15); padding: 20px; border-radius: 8px; border: 2px solid rgba(255,255,255,0.3);">
                            <h4>💎 Full VIP Experience</h4>
                            <p style="margin: 10px 0;">All permissions for maximum benefits</p>
                            <ul style="list-style: none; font-size: 0.9em;">
                                <li>✅ Unlimited everything</li>
                                <li>✅ Instant notifications</li>
                                <li>✅ Early access to new books</li>
                                <li>✅ Priority support</li>
                            </ul>
                            <button class="upgrade-btn" style="margin-top: 15px; background: linear-gradient(135deg, #6c5ce7, #a29bfe);" onclick="upgradeToVIP()">
                                Go VIP (5 permissions)
                            </button>
                        </div>
                    </div>
                    
                    <div style="text-align: center; margin-top: 20px; font-size: 0.9em; opacity: 0.9;">
                        💡 You can modify your preferences anytime in account settings
                    </div>
                </div>
            </div>
            
            <div style="text-align: center; margin: 20px 0;">
                <button class="upgrade-btn" id="showUpgradeBtn" onclick="showUpgradeOptions()">
                    See Upgrade Options
                </button>
            </div>
        </div>
    </div>
    
    <script>
        function showUpgradeOptions() {
            const upgradeFlow = document.getElementById('upgradeFlow');
            const btn = document.getElementById('showUpgradeBtn');
            
            if (upgradeFlow.style.display === 'none') {
                upgradeFlow.style.display = 'block';
                btn.textContent = 'Hide Upgrade Options';
                upgradeFlow.scrollIntoView({ behavior: 'smooth' });
            } else {
                upgradeFlow.style.display = 'none';
                btn.textContent = 'See Upgrade Options';
            }
        }
        
        function upgradeToConnected() {
            alert('🎉 Awesome! You would now see the permission selection form:\n\n✅ Newsletter (weekly library updates)\n✅ New book alerts (instant notifications)\n\nAfter enabling, you immediately get:\n• 5 downloads per day\n• 30 searches per day\n• Smart notifications\n• Priority updates');
        }
        
        function upgradeToVIP() {
            alert('👑 VIP Upgrade! You would see all available permissions:\n\n✅ Newsletter\n✅ New book alerts\n✅ Personalized recommendations\n✅ Premium offers\n✅ Surveys & feedback\n\nInstant VIP benefits:\n• Unlimited access\n• Real-time updates\n• Early book access\n• Priority support');
        }
        
        // Add some interactive animations
        document.addEventListener('DOMContentLoaded', function() {
            const progressBars = document.querySelectorAll('.progress-fill');
            progressBars.forEach(bar => {
                const width = bar.style.width;
                bar.style.width = '0%';
                setTimeout(() => {
                    bar.style.width = width;
                }, 500);
            });
        });
        
        // Simulate real-time notification
        setTimeout(() => {
            const alerts = document.querySelectorAll('.smart-alert');
            alerts.forEach(alert => {
                alert.style.animation = 'pulse 2s ease-in-out';
            });
        }, 2000);
    </script>
    
    <style>
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.02); }
            100% { transform: scale(1); }
        }
    </style>
</body>
</html>
================
File: __init__.py
================
# Create these __init__.py files in the appropriate directories:

# File: __init__.py
# Path: Source/__init__.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  04:12PM
"""
Description: Anderson's Library Source Package
Root package for all Anderson's Library source code modules.
"""

__version__ = "1.0.0"
__author__ = "Herb Bowers"
__project__ = "Project Himalaya"


# File: __init__.py
# Path: Source/Data/__init__.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  04:12PM
"""
Description: Data Layer Package
Contains data models, database schemas, and data access objects.
"""

from .DatabaseModels import (
    BookRecord, SearchCriteria, SearchResult, CategoryInfo, 
    LibraryStatistics, CreateBookRecordFromDict, ValidateBookRecord
)

__all__ = [
    'BookRecord', 'SearchCriteria', 'SearchResult', 'CategoryInfo',
    'LibraryStatistics', 'CreateBookRecordFromDict', 'ValidateBookRecord'
]


# File: __init__.py
# Path: Source/Core/__init__.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  04:12PM
"""
Description: Core Services Package
Contains business logic, database managers, and core application services.
"""

from .DatabaseManager import DatabaseManager
from .BookService import BookService

__all__ = ['DatabaseManager', 'BookService']


# File: __init__.py
# Path: Source/Interface/__init__.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  04:12PM
"""
Description: User Interface Package
Contains all GUI components, windows, dialogs, and interface elements.
"""

from .FilterPanel import FilterPanel
from .BookGrid import BookGrid, BookTile
from .MainWindow import AndersonMainWindow, RunApplication

__all__ = ['FilterPanel', 'BookGrid', 'BookTile', 'AndersonMainWindow', 'RunApplication']


# File: __init__.py
# Path: Source/Utils/__init__.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  04:12PM
"""
Description: Utilities Package
Contains utility functions, helpers, and shared components.
"""

# This package will contain utility modules as they are created
__all__ = []


# File: __init__.py
# Path: Source/Framework/__init__.py
# Standard: AIDEV-PascalCase-1.8
# Created: 2025-07-04
# Last Modified: 2025-07-04  04:12PM
"""
Description: Framework Package
Contains framework components like CustomWindow and shared UI elements.
"""

# Will contain CustomWindow and other framework components
# from .CustomWindow import CustomWindow
# __all__ = ['CustomWindow']
__all__ = []
================
File: requirements.txt
================
PySide6==6.9.1
PySide6_Addons==6.9.1
PySide6_Essentials==6.9.1
shiboken6==6.9.1
Pillow
PyMuPDF

================================================================
List of Included Files
================================================================

Files included:
..Excclude/CodebaseSummary_20250704_130009.txt
..Excclude/CopyModulesToStructure.py
..Excclude/DatabaseModels.py
..Excclude/SetupProjectStructure.py
AndersonLibrary.py
Archive/AndersonLibrary_2025-07-04_16-38-40.py
Archive/Data/DatabaseModels_2025-07-04_16-38-40.py
Archive/Interface/BookGrid_2025-07-04_16-38-40.py
Archive/Interface/FilterPanel_2025-07-04_16-38-40.py
Archive/Interface/MainWindow_2025-07-04_16-38-40.py
Archive/TestImports_2025-07-04_14-44-12.py
CreateThumbs/ConvertToThumbnails.py
CreateThumbs/ConvertToThumbnailsPart2.py
HTML/GoogleAuthorzeTest.html
Legacy/Andy.py
Legacy/CustomWindow.py
README.md
Results.txt
RunAnderson.py
Scripts/Deployment/GitHubAutoUpdate.py
Scripts/Deployment/GitHubUpdateSite.py
Scripts/Deployment/UpdatePopulate.py
Scripts/Development/QuickSetup.py
Scripts/Maintenance/generate_thumbnails.py
Scripts/Migration/add_authors.py
Scripts/Migration/add_authors_v2.py
Scripts/Migration/add_filepath_thumbnailpath.py
Scripts/System/BackupProject.py
Scripts/System/CodebaseSum.py
Scripts/System/GPU OCR Speed Test.py
Scripts/System/ListFilesByDate.py
Scripts/System/MarkdownToText.py
Scripts/temp_db_inspector.py
Source/Core/BookService.py
Source/Core/DatabaseManager.py
Source/Core/__init__.py
Source/DADs/CompatibilityPatch.py
Source/DADs/CustomWindowFix.py
Source/DADs/FinalImportFix.py
Source/DADs/MigrateToModular.py
Source/DADs/PySide6ImportFix.py
Source/DADs/database_models_fix.py
Source/Data/DatabaseModels.py
Source/Data/DatabaseModels_backup.py
Source/Data/__init__.py
Source/Framework/__init__.py
Source/Interface/BookGrid.py
Source/Interface/CustomWindow.py
Source/Interface/FilterPanel.py
Source/Interface/MainWindow.py
Source/Interface/__init__.py
Source/Utils/__init__.py
Source/__init__.py
SyntaxFix.py
TestImports.py
Tests/Integration/__init__.py
Tests/Unit/__init__.py
Tests/__init__.py
Updates/CommunitySQLs/upgrade_ui_flow.html
__init__.py
requirements.txt

There are 61 files included in the Files section of the CodebaseSummary document.
